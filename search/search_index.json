{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction & Overview \u00b6 Welcome to the Finaptic documentation website. As Release 1.0 nears completion, this documentation repository will be in flux. Beyond Release 1.0, incremental changes will be captured in release notes in this section. We welcome any feedback you may have on our documentation. Release Version 1.1 \u00b6","title":"Introduction & Overview"},{"location":"#introduction-overview","text":"Welcome to the Finaptic documentation website. As Release 1.0 nears completion, this documentation repository will be in flux. Beyond Release 1.0, incremental changes will be captured in release notes in this section. We welcome any feedback you may have on our documentation.","title":"Introduction &amp; Overview"},{"location":"#release-version-11","text":"","title":"Release Version 1.1"},{"location":"API-Specifications/clientinformation/","text":"Client Profile API (Draft) \u00b6 This is a draft API specification that is subject to change clientprofile_v1_individualparty.proto \u00b6 Services \u00b6 ClientProfileService \u00b6 GetIndividualParty \u00b6 rpc GetIndividualParty( GetIndividualPartyRequest ) IndividualParty API-specific types \u00b6 Address \u00b6 Field Type Label Description type string Required, HOME or WORK. Will be validated based on reference data values organization string NR max-len=300) line_one string line_two string line_three string line_four string line_five string line_six string line_seven string line_eight string locality string dependent_locality string double_dependent_locality string administrative_area string sub_administrative_area string area string postal_code string country string ContactDetails \u00b6 Field Type Label Description phone_number string Deprecated. The contact phone number. Deprecated in favor of ContactPhoneNumber. If both are specified in a request, preference will be given to ContactPhoneNumber. In responses and events, if only PhoneNumber was specified, ContactPhoneNumber will assume SMS compatible to be false. customer_email string customer_communication_language string customer_communication_pref string contact_phone_number thebaasco.types.PhoneNumber The contact phone number. See PhoneNumber type for more details. CreateIndividualPartyRequest \u00b6 Field Type Label Description individual_party IndividualParty CreateIndividualPartyResponse \u00b6 Field Type Label Description individual_party IndividualParty CustomerResidency \u00b6 Field Type Label Description is_canadian_tax_resident bool Are you resident of Canada? other_residences OtherResidence repeated sin_token string [(validate.rules).string = { min_len: 9, max_len:9, pattern:\"^\\d*$\"}]; // NR, ?How to deal with # patterns dependent on country citizenship string Employment \u00b6 Field Type Label Description employment_status string employer_name string industry string occupation string start_date google.type.Date not required, format Month/year end_date google.type.Date not required, format Month/year work_address Address Required for 0-2 status work_phone_number string Deprecated. The phone number of the employer. Deprecated in favor of PhoneNumber. If both are specified in a request, preference will be given to PhoneNumber. In responses and events, if only WorkPhoneNumber was specified, PhoneNumber will assume SMS compatible to be false. phone_number thebaasco.types.PhoneNumber The phone number of the employer. See PhoneNumber for more details. GetIndividualPartyRequest \u00b6 Field Type Label Description individual_party_id string IndividualParty \u00b6 This structure must be filled with data from onboarding, previous version was draft. Please update Field Type Label Description first_name string middle_name string last_name string date_of_birth google.type.Date customer_contact_details ContactDetails customer_employment Employment repeated customer_residency CustomerResidency customer_residence_address Address repeated individual_party_id string Output only kycDone bool This boolean field is used to indicate if the customer has been validated through the onboarding KYC process alias string The customer alias. This value is optional and has a maximum of 20 characters. Accepts alphanumeric input without special characters. IndividualPartyCreatedEvent \u00b6 Field Type Label Description event_id string individual_party IndividualParty tenant_id int32 individual_party_created_time google.protobuf.Timestamp IndividualPartyUpdatedEvent \u00b6 IndividualPartyUpdatedEvent is raised when an IndividualParty is updated. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. individual_party IndividualParty The IndividualParty that will be updated to. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp at which the IndividualParty was updated. OtherResidence \u00b6 Field Type Label Description country string tin_token string [(validate.rules).string = {ignore_empty: true,max_len: 50}]; // max length 50 citizenship string UpdateIndividualPartyRequest \u00b6 UpdateIndividualPartyRequest is the message used to perform the asynchronous operation of updating an Individual Party. Performing this operation will generate an asynchronous response of type UpdateIndividualPartyResponse, on the response topic. The operation will override all information previously stored with that provided in the request object. A user can only update their own IndividualParty. Field Type Label Description individual_party IndividualParty The individual party that will be updated to as the result of the operation. UpdateIndividualPartyResponse \u00b6 UpdateIndividualPartyResponse is the response to UpdateIndividualPartyRequest. It contains the updated IndividualParty. Field Type Label Description individual_party IndividualParty The updated IndividualParty. Shared types \u00b6 PhoneNumber \u00b6 Global types / Phone Number Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Client Profile API (Draft)"},{"location":"API-Specifications/clientinformation/#client-profile-api-draft","text":"This is a draft API specification that is subject to change","title":"Client Profile API (Draft)"},{"location":"API-Specifications/clientinformation/#clientprofile_v1_individualpartyproto","text":"","title":"clientprofile_v1_individualparty.proto"},{"location":"API-Specifications/clientinformation/#services","text":"","title":"Services"},{"location":"API-Specifications/clientinformation/#clientprofileservice","text":"","title":"ClientProfileService"},{"location":"API-Specifications/clientinformation/#getindividualparty","text":"rpc GetIndividualParty( GetIndividualPartyRequest ) IndividualParty","title":"GetIndividualParty"},{"location":"API-Specifications/clientinformation/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/clientinformation/#address","text":"Field Type Label Description type string Required, HOME or WORK. Will be validated based on reference data values organization string NR max-len=300) line_one string line_two string line_three string line_four string line_five string line_six string line_seven string line_eight string locality string dependent_locality string double_dependent_locality string administrative_area string sub_administrative_area string area string postal_code string country string","title":"Address"},{"location":"API-Specifications/clientinformation/#contactdetails","text":"Field Type Label Description phone_number string Deprecated. The contact phone number. Deprecated in favor of ContactPhoneNumber. If both are specified in a request, preference will be given to ContactPhoneNumber. In responses and events, if only PhoneNumber was specified, ContactPhoneNumber will assume SMS compatible to be false. customer_email string customer_communication_language string customer_communication_pref string contact_phone_number thebaasco.types.PhoneNumber The contact phone number. See PhoneNumber type for more details.","title":"ContactDetails"},{"location":"API-Specifications/clientinformation/#createindividualpartyrequest","text":"Field Type Label Description individual_party IndividualParty","title":"CreateIndividualPartyRequest"},{"location":"API-Specifications/clientinformation/#createindividualpartyresponse","text":"Field Type Label Description individual_party IndividualParty","title":"CreateIndividualPartyResponse"},{"location":"API-Specifications/clientinformation/#customerresidency","text":"Field Type Label Description is_canadian_tax_resident bool Are you resident of Canada? other_residences OtherResidence repeated sin_token string [(validate.rules).string = { min_len: 9, max_len:9, pattern:\"^\\d*$\"}]; // NR, ?How to deal with # patterns dependent on country citizenship string","title":"CustomerResidency"},{"location":"API-Specifications/clientinformation/#employment","text":"Field Type Label Description employment_status string employer_name string industry string occupation string start_date google.type.Date not required, format Month/year end_date google.type.Date not required, format Month/year work_address Address Required for 0-2 status work_phone_number string Deprecated. The phone number of the employer. Deprecated in favor of PhoneNumber. If both are specified in a request, preference will be given to PhoneNumber. In responses and events, if only WorkPhoneNumber was specified, PhoneNumber will assume SMS compatible to be false. phone_number thebaasco.types.PhoneNumber The phone number of the employer. See PhoneNumber for more details.","title":"Employment"},{"location":"API-Specifications/clientinformation/#getindividualpartyrequest","text":"Field Type Label Description individual_party_id string","title":"GetIndividualPartyRequest"},{"location":"API-Specifications/clientinformation/#individualparty","text":"This structure must be filled with data from onboarding, previous version was draft. Please update Field Type Label Description first_name string middle_name string last_name string date_of_birth google.type.Date customer_contact_details ContactDetails customer_employment Employment repeated customer_residency CustomerResidency customer_residence_address Address repeated individual_party_id string Output only kycDone bool This boolean field is used to indicate if the customer has been validated through the onboarding KYC process alias string The customer alias. This value is optional and has a maximum of 20 characters. Accepts alphanumeric input without special characters.","title":"IndividualParty"},{"location":"API-Specifications/clientinformation/#individualpartycreatedevent","text":"Field Type Label Description event_id string individual_party IndividualParty tenant_id int32 individual_party_created_time google.protobuf.Timestamp","title":"IndividualPartyCreatedEvent"},{"location":"API-Specifications/clientinformation/#individualpartyupdatedevent","text":"IndividualPartyUpdatedEvent is raised when an IndividualParty is updated. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. individual_party IndividualParty The IndividualParty that will be updated to. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp at which the IndividualParty was updated.","title":"IndividualPartyUpdatedEvent"},{"location":"API-Specifications/clientinformation/#otherresidence","text":"Field Type Label Description country string tin_token string [(validate.rules).string = {ignore_empty: true,max_len: 50}]; // max length 50 citizenship string","title":"OtherResidence"},{"location":"API-Specifications/clientinformation/#updateindividualpartyrequest","text":"UpdateIndividualPartyRequest is the message used to perform the asynchronous operation of updating an Individual Party. Performing this operation will generate an asynchronous response of type UpdateIndividualPartyResponse, on the response topic. The operation will override all information previously stored with that provided in the request object. A user can only update their own IndividualParty. Field Type Label Description individual_party IndividualParty The individual party that will be updated to as the result of the operation.","title":"UpdateIndividualPartyRequest"},{"location":"API-Specifications/clientinformation/#updateindividualpartyresponse","text":"UpdateIndividualPartyResponse is the response to UpdateIndividualPartyRequest. It contains the updated IndividualParty. Field Type Label Description individual_party IndividualParty The updated IndividualParty.","title":"UpdateIndividualPartyResponse"},{"location":"API-Specifications/clientinformation/#shared-types","text":"","title":"Shared types"},{"location":"API-Specifications/clientinformation/#phonenumber","text":"Global types / Phone Number","title":"PhoneNumber"},{"location":"API-Specifications/clientinformation/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/corebanking/","text":"Core Banking API \u00b6 corebanking_v1_accounts.proto \u00b6 Services \u00b6 Accounts \u00b6 Accounts service exposes specific operations related to checking and saving accounts. To retrieve general information about an Account, such as its balance, check the Core-Transaction api documentation. GetAccountDetails \u00b6 rpc GetAccountDetails( GetAccountDetailsRequest ) AccountDetails GetAccountDetails retrieves details about an Account. Only users associated with the Account (owner or authorized users) will be able to invoke this endpoint. To list Accounts, or to get generic information about a specific Account, such as its balance, see Core-Transaction api documentation. Enums \u00b6 AccountStatus \u00b6 AccountStatus is an enumeration indicating the status of an Account. All accounts are created in the ACCOUNT_STATUS_INACTIVE state by default. Name Number Description ACCOUNT_STATUS_UNSPECIFIED 0 ACCOUNT_STATUS_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. ACCOUNT_STATUS_INACTIVE 1 ACCOUNT_STATUS_INACTIVE represents an Account that is inactive. It is the initial state after creation. An Account that is inactive cannot process any transactions. ACCOUNT_STATUS_ACTIVE 2 ACCOUNT_STATUS_ACTIVE represents an Account that is active. In this state normal operations can be processed on the Account. AccountType \u00b6 AccountType is an enumeration indicating the type of an Account. Name Number Description ACCOUNT_TYPE_UNSPECIFIED 0 ACCOUNT_TYPE_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. ACCOUNT_TYPE_DEPOSIT 1 ACCOUNT_TYPE_DEPOSIT represents a deposit Account. API-specific types \u00b6 AccountCreatedEvent \u00b6 AccountCreatedEvent is an event that is raised when a Core-Banking Account is successfully created, following a CreateAccountRequest. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_details AccountDetails The details of the created Account. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. account_creation_time google.protobuf.Timestamp The UTC timestamp at which the Account was created. AccountDetails \u00b6 AccountDetails represents the details of a Core-Banking Account. Field Type Label Description account_id string The ID of the Account. This will always be a valid UUID. Output only. status AccountStatus The status of the Account. See documentation on AccountStatus enum for details on enum values. Output only. accrued_interest thebaasco.types.Amount The interest that is accumulated daily since last applied, but hasn't been applied to the balance yet. Interest is applied to Account balance monthly. Output only. account_type AccountType The account type as defined in the AccountType enum. AccountStatusChangedEvent \u00b6 AccountStatusChangedEvent is an event raised when an Account changes status. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_details AccountDetails The updated details for the Account. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. account_status_changed_time google.protobuf.Timestamp The UTC timestamp at which the Account status changed. ChangeAccountStatusRequest \u00b6 ChangeAccountStatusRequest is used to perform the asynchronous operation of changing an Account's status. Performing this operation will generate an asynchronous response of type ChangeAccountStatusResponse, on the response topic. Possible state transitions: - From \"ACCOUNT_STATUS_INACTIVE\" to \"ACCOUNT_STATUS_ACTIVE\" Field Type Label Description account_id string The ID of the Account to update. The value must be a valid UUID, and current user must have proper access to the Account. status AccountStatus The target status of the Account. See documentation on AccountStatus enum for details on enum values. ChangeAccountStatusResponse \u00b6 ChangeAccountStatusResponse message is returned when issuing a CreateAccountRequest. It contains the AccountDetails for the Account. Field Type Label Description account_details AccountDetails The updated details for the Account. CreateAccountRequest \u00b6 CreateAccountRequest is used to perform the asynchronous operation of creating a new Account. Performing this operation will generate an asynchronous response of type CreateAccountResponse, on the response topic. Field Type Label Description account_type string Required. The type of Account to open is a string that is composed in conjunction between product catalog and requestor domain (e.g. \"current_account.v39\") An unknown or invalid Account type will generate an error with status code INVALID_ARGUMENT. account_parameters CreateAccountRequest.AccountParametersEntry repeated Optional. The parameters for the Account type. The possible parameters and format is defined by the banking layer's Smart Contract. CreateAccountRequest.AccountParametersEntry \u00b6 Field Type Label Description key string value string CreateAccountResponse \u00b6 CreateAccountResponse is the response to CreateAccountRequest. It contains the AccountDetails for the created Account. Field Type Label Description account_details AccountDetails The details for the created Account. GetAccountDetailsRequest \u00b6 GetAccountDetailsRequest is passed as parameter to the GetAccountDetails operation, in order to determine which Account to retrieve the details from. Field Type Label Description account_id string The ID of the Account to retrieve. The value must be a valid UUID, and current user must have proper access to the Account to retrieve it. Shared types \u00b6 Amount \u00b6 Global types / Amount Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Core Banking API"},{"location":"API-Specifications/corebanking/#core-banking-api","text":"","title":"Core Banking API"},{"location":"API-Specifications/corebanking/#corebanking_v1_accountsproto","text":"","title":"corebanking_v1_accounts.proto"},{"location":"API-Specifications/corebanking/#services","text":"","title":"Services"},{"location":"API-Specifications/corebanking/#accounts","text":"Accounts service exposes specific operations related to checking and saving accounts. To retrieve general information about an Account, such as its balance, check the Core-Transaction api documentation.","title":"Accounts"},{"location":"API-Specifications/corebanking/#getaccountdetails","text":"rpc GetAccountDetails( GetAccountDetailsRequest ) AccountDetails GetAccountDetails retrieves details about an Account. Only users associated with the Account (owner or authorized users) will be able to invoke this endpoint. To list Accounts, or to get generic information about a specific Account, such as its balance, see Core-Transaction api documentation.","title":"GetAccountDetails"},{"location":"API-Specifications/corebanking/#enums","text":"","title":"Enums"},{"location":"API-Specifications/corebanking/#accountstatus","text":"AccountStatus is an enumeration indicating the status of an Account. All accounts are created in the ACCOUNT_STATUS_INACTIVE state by default. Name Number Description ACCOUNT_STATUS_UNSPECIFIED 0 ACCOUNT_STATUS_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. ACCOUNT_STATUS_INACTIVE 1 ACCOUNT_STATUS_INACTIVE represents an Account that is inactive. It is the initial state after creation. An Account that is inactive cannot process any transactions. ACCOUNT_STATUS_ACTIVE 2 ACCOUNT_STATUS_ACTIVE represents an Account that is active. In this state normal operations can be processed on the Account.","title":"AccountStatus"},{"location":"API-Specifications/corebanking/#accounttype","text":"AccountType is an enumeration indicating the type of an Account. Name Number Description ACCOUNT_TYPE_UNSPECIFIED 0 ACCOUNT_TYPE_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. ACCOUNT_TYPE_DEPOSIT 1 ACCOUNT_TYPE_DEPOSIT represents a deposit Account.","title":"AccountType"},{"location":"API-Specifications/corebanking/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/corebanking/#accountcreatedevent","text":"AccountCreatedEvent is an event that is raised when a Core-Banking Account is successfully created, following a CreateAccountRequest. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_details AccountDetails The details of the created Account. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. account_creation_time google.protobuf.Timestamp The UTC timestamp at which the Account was created.","title":"AccountCreatedEvent"},{"location":"API-Specifications/corebanking/#accountdetails","text":"AccountDetails represents the details of a Core-Banking Account. Field Type Label Description account_id string The ID of the Account. This will always be a valid UUID. Output only. status AccountStatus The status of the Account. See documentation on AccountStatus enum for details on enum values. Output only. accrued_interest thebaasco.types.Amount The interest that is accumulated daily since last applied, but hasn't been applied to the balance yet. Interest is applied to Account balance monthly. Output only. account_type AccountType The account type as defined in the AccountType enum.","title":"AccountDetails"},{"location":"API-Specifications/corebanking/#accountstatuschangedevent","text":"AccountStatusChangedEvent is an event raised when an Account changes status. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_details AccountDetails The updated details for the Account. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. account_status_changed_time google.protobuf.Timestamp The UTC timestamp at which the Account status changed.","title":"AccountStatusChangedEvent"},{"location":"API-Specifications/corebanking/#changeaccountstatusrequest","text":"ChangeAccountStatusRequest is used to perform the asynchronous operation of changing an Account's status. Performing this operation will generate an asynchronous response of type ChangeAccountStatusResponse, on the response topic. Possible state transitions: - From \"ACCOUNT_STATUS_INACTIVE\" to \"ACCOUNT_STATUS_ACTIVE\" Field Type Label Description account_id string The ID of the Account to update. The value must be a valid UUID, and current user must have proper access to the Account. status AccountStatus The target status of the Account. See documentation on AccountStatus enum for details on enum values.","title":"ChangeAccountStatusRequest"},{"location":"API-Specifications/corebanking/#changeaccountstatusresponse","text":"ChangeAccountStatusResponse message is returned when issuing a CreateAccountRequest. It contains the AccountDetails for the Account. Field Type Label Description account_details AccountDetails The updated details for the Account.","title":"ChangeAccountStatusResponse"},{"location":"API-Specifications/corebanking/#createaccountrequest","text":"CreateAccountRequest is used to perform the asynchronous operation of creating a new Account. Performing this operation will generate an asynchronous response of type CreateAccountResponse, on the response topic. Field Type Label Description account_type string Required. The type of Account to open is a string that is composed in conjunction between product catalog and requestor domain (e.g. \"current_account.v39\") An unknown or invalid Account type will generate an error with status code INVALID_ARGUMENT. account_parameters CreateAccountRequest.AccountParametersEntry repeated Optional. The parameters for the Account type. The possible parameters and format is defined by the banking layer's Smart Contract.","title":"CreateAccountRequest"},{"location":"API-Specifications/corebanking/#createaccountrequestaccountparametersentry","text":"Field Type Label Description key string value string","title":"CreateAccountRequest.AccountParametersEntry"},{"location":"API-Specifications/corebanking/#createaccountresponse","text":"CreateAccountResponse is the response to CreateAccountRequest. It contains the AccountDetails for the created Account. Field Type Label Description account_details AccountDetails The details for the created Account.","title":"CreateAccountResponse"},{"location":"API-Specifications/corebanking/#getaccountdetailsrequest","text":"GetAccountDetailsRequest is passed as parameter to the GetAccountDetails operation, in order to determine which Account to retrieve the details from. Field Type Label Description account_id string The ID of the Account to retrieve. The value must be a valid UUID, and current user must have proper access to the Account to retrieve it.","title":"GetAccountDetailsRequest"},{"location":"API-Specifications/corebanking/#shared-types","text":"","title":"Shared types"},{"location":"API-Specifications/corebanking/#amount","text":"Global types / Amount","title":"Amount"},{"location":"API-Specifications/corebanking/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/corecard/","text":"Core Card API \u00b6 corecard_v1_cards.proto \u00b6 This section of Core Card API includes the main data types and services that make the API surface if this domain Services \u00b6 Cards \u00b6 Cards service exposes operations related to listing and retrieving details for Cards issued. It is a real gRPC service accessible in a synchronous manner. As such it is also used for generation of Card SDK sign on tokens needed to reveal card authentication details like CVV and expiration date GetCard \u00b6 rpc GetCard( GetCardRequest ) Card GetCard retrieves generic details about a single Card. The card data returned does not contain any sensitive information such as card number or expiration date. Only users associated with the Card will be able to invoke this endpoint and retrieve details for a given Card. ListCards \u00b6 rpc ListCards( ListCardsRequest ) ListCardsResponse ListCards lists all Cards associated to the current user. The information returned does not contain any sensitive information such as card number or expiration date. This endpoint uses pagination to allow listing the Cards in smaller, easy to manage, chunks. CreateCardSDKSignOnToken \u00b6 rpc CreateCardSDKSignOnToken( CreateCardSDKSignOnTokenRequest ) CreateCardSDKSignOnTokenResponse CreateCardSDKSignOnToken generates a single-use, limited duration token, which is used by the Front End SDK to retrieve sensitive information about Cards. The SDK is necessary when performing sensitive operations like retrieving the Card's number (PAN), expiration date, CVV, or resetting the Card's PIN. CardsCommands \u00b6 CardsCommandsService is a key component of Core Card API thar exposes asynchronous operations that alter the state of a Card. It is not directly accessible by consumers as a gRPC service, it instead uses Google PubSub as delivery mechanism for requests and responses. We include it in the documentation as a reference for a better understanding of the responsibilities and API surface of this domain CreateCard \u00b6 rpc CreateCard( CreateCardRequest ) Card CreateCard is an asynchronous operation used to create a new Card. Performing this operation will generate an asynchronous response of type Card on the response topic. When creating the card, the information contained in the Client-Profile domain for current user will be used to populate Card information such as name on card, and billing address. As result of a successful card creation, a business event of type CardCreatedEvent will be issued LockCard \u00b6 rpc LockCard( LockCardRequest ) LockCardResponse LockCard is an asynchronous function used to temporarily lock a card. Performing this operation will generate an asynchronous response of type LockCardResponse on the response topic or an error if applicable. This feature allows customers to prevent transactions from getting authorized while they confirm if a card is effectively lost. After finding the card if it is the case, they can re-enable the card by using the unlock function above. UnlockCard \u00b6 rpc UnlockCard( UnlockCardRequest ) UnlockCardResponse UnlockCard is an asynchronous function used to re-enable a locked card. Performing this operation will generate an asynchronous response of type UnlockCardResponse on the response topic or an error if applicable. This feature allows customers to re-enable transactions on the card if they find it after suspecting it lost. CreateAuthorizedUserCard \u00b6 rpc CreateAuthorizedUserCard( CreateAuthorizedUserCardRequest ) CreateAuthorizedUserCardResponse CreateAuthorizedCard is an asynchronous function for the creation of a new Card for an authorized user of an account. Performing this operation will generate an asynchronous response of type CreateAuthorizedUserCardResponse on the response topic. When creating the card, the Client-Profile for the authorized user will be fetched to populate information such as name on card and billing address. Enums \u00b6 CardState \u00b6 CardState is used to describe the state of a card. Name Number Description CARD_STATE_UNSPECIFIED 0 CARD_TYPE_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. CARD_STATE_ACTIVE 1 CARD_STATE_ACTIVE indicates that the card is ready to be used. CARD_STATE_LOCKED 2 CARD_STATE_LOCKED indicates that the card is temporarily blocked for usage. CardType \u00b6 CardType provides indication of the Card's type. Name Number Description CARD_TYPE_UNSPECIFIED 0 CARD_TYPE_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. Trying to create a Card with this type will result in an error. CARD_TYPE_PREPAID 1 CARD_TYPE_PREPAID represents a Prepaid Card. A Prepaid Card uses the linked account's funds when processing operations. ErrorCodes \u00b6 A Domain-specific list of error codes (For Core Card) documenting the error situations that could arrive while consuming synchronous or asynchronous APIs In all cases these error codes will be communicated to the consumer in a structured manner within an instance of AppError (see https://github.com/thebaasco/api-contracts/tree/master/proto/types/errordetails.proto) that will be included within the error status response: status.Status.Details Name Number Description UNSPECIFIED 0 UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. CARDS_INVALID_ACCOUNT 1 CARDS_INVALID_ACCOUNT - Invalid Account. gRPC Code=InvalidArgument. Returned when an account ID passed as argument for a given operation does not resolve to an existing account or the account is not authorized for the caller (e.g. the customer does not own the account) CARDS_INVALID_AUTHORIZED_USER 2 CARDS_INVALID_AUTHORIZED_USER - Invalid authorized user. gRPC Code==InvalidArgument. Returned while creating a card for an authorized user if the ID passed as argument does not resolve to an existing user or the user is not an authorized user of the given account CARDS_INVALID_CARD_ID 3 CARDS_INVALID_CARD_ID - Invalid Card ID. gRPC Code=InvalidArgument. Returned while executing card servicing operations (e.g Lock/Unlock) if the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user API-specific types \u00b6 Card \u00b6 Card represents generic details about a given Card. The message does not contain any sensitive information, such as Card number (PAN), expiration date, or CVV. Access to such sensitive information must be done throuh other mechanism, such as via an external SDK (using CreateCardSDKSignOnToken operation) Field Type Label Description id string Output only. The unique ID of this Card. It is not nescessary to specify the ID when creating a Card, but the resulting Card will have this value populated with the generated ID. The ID generated follows the UUID v4 format, always. card_type CardType The type of the Card. See documentation on CardType enum for details on enum values. account_id string The ID of the Account linked to this Card. The value of this field must follow the UUID format, and must map to a valid Account, for which the user has proper access. The list of valid Accounts can be retrieved from Core-Transaction domain. All Cards must have a linked Account. description string The description for this Card. Specifying a description for a Card is optional. state CardState Describes the current state of the card. Output-only owner_id string The user ID of the card owner. Output-only CardCreatedEvent \u00b6 CardCreatedEvent is an event raised when a Card is successfuly created. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. card Card The Card that was created. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. card_creation_time google.protobuf.Timestamp The UTC timestamp for the creation of the Card. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. CardUpdatedEvent \u00b6 CardUpdatedEvent is an event raised when a card is updated. E.g. The card description could be changed or the card state change from Active to Locked, Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. card Card Snapshot of the card at its resulting state after the update took place. user_id string The ID of the user who triggered the operation that resulted in the creation of the current event tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. CreateAuthorizedUserCardRequest \u00b6 CreateAuthorizedCardRequest is message used to perform the asynchronous operation of creating a new Card for an authorized user of an account. Performing this operation will generate an asynchronous response of type Card on the response topic. When creating the card, the information contained in the Client-Profile for the authorized user will be fetched to populate information such as name on card and billing address. Errors: ErrorCodes.CARDS_INVALID_ACCOUNT if the account passed as argument does not exist or is not owned by the current user ErrorCodes.CARDS_INVALID_AUTH_USER if the user ID passed as argument does not exist or is not an authorized user of the account Field Type Label Description card Card A valid Card message. Refer to Card message for details. authorized_user_id string The ID of the authorized user who will be the owner of the newly created card CreateAuthorizedUserCardResponse \u00b6 CreateAuthorizedUserCardResponse is the response model for the asynchronous operation of creating a new Card for an authorized user of an account. Field Type Label Description card Card A valid Card message. Refer to Card message for details. CreateCardRequest \u00b6 CreateCardRequest is message used to perform the asynchronous operation of creating a new Card. Performing this operation will generate an asynchronous response of type Card, on the response topic. When creating the card, the information contained in the Client-Profile domain for current user will be used to populate Card information such as name on card, and billing address. Field Type Label Description card Card A valid Card message. Refer to Card message for details. CreateCardSDKSignOnTokenRequest \u00b6 CreateCardSDKSignOnTokenRequest is a message passed as parameter to the CreateCardSDKSignOnToken operation. Field Type Label Description card_id string The ID of the Card for which a SDK Sign-On Token must be created. The value must be a valid UUID, and current user must have proper access to the Card. CreateCardSDKSignOnTokenResponse \u00b6 CreateCardSDKSignOnTokenResponse is a message returned in response to the CreateCardSDKSignOnToken operation, which contains the token needed to use the SDK. Field Type Label Description token string The token to be used by the Front End SDK t . This token can only be used to sign-on a single device, for a single session, and has limited duration during which it can be used. card_ref_number string A reference number assigned to the selected card by the card payment processor provider. This value must be passed along with the token to the card payment processor's SDK in order to reveal the card's authentication details (number, CVV, expiration) GetCardRequest \u00b6 GetCardRequest is a message passed as parameter to the GetCard operation. Field Type Label Description card_id string The ID of the Card to retrieve. The value must be a valid UUID, and current user must have proper access to the Card to retrieve it. ListCardsRequest \u00b6 ListCardsRequest is a message passed as parameter to the ListCards operation. See ListCards for details on operation. Field Type Label Description page_size int32 The maximum number of Cards to retrieve as part of this request. This value needs to be superior, or equal to 1. page_token string When retrieving page other than the initial page, the value for the page_token must be specified, and taken from the previous page's next_page_token value (see ListCardsResponse). When no value is specified, then the initial page will be returned. ListCardsResponse \u00b6 ListCardsResponse is a message returned in response to the ListCards operation, which contains the requested data. Field Type Label Description cards Card repeated The list of Card messages requested. next_page_token string The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see ListCardsRequest). When no value is returned in this field, then no further data exists to be listed. LockCardRequest \u00b6 LockCardRequest is message used to perform the asynchronous operation of temporarily locking a card. Performing this operation will generate an asynchronous response of type Card on the response topic or an error if applicable. This feature allows customers to prevent transactions from getting authorized while they confirm if a card is effectively lost. After finding the card if it is the case, they can re-enable the card by using the unlock function, see UnlockCardRequest Errors: ErrorCodes.CARDS_INVALID_CARD_ID if the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user Field Type Label Description card_id string The ID of the card to be locked LockCardResponse \u00b6 LockCardResponse is message used as return type of the async operation LockCard Field Type Label Description card Card The card in its current status as result of the operation. UnlockCardRequest \u00b6 UnlockCardRequest is message used to perform the asynchronous operation of unlocking a locked card. Performing this operation will generate an asynchronous response of type UnlockCardResponse on the response topic or an error if applicable. This feature allows customers to re-enable transactions on the card if they find it after suspecting it lost. Errors: ErrorCodes.CARDS_INVALID_CARD_ID if the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user Field Type Label Description card_id string The ID of the locked card to be unlocked UnlockCardResponse \u00b6 UnlockCardResponse is message used as return type of the async operation UnlockCard Field Type Label Description card Card The card in its current as result of of the operation. UpdateCardRequest \u00b6 UpdateCardRequest is message used to perform the asynchronous operation of updating a Card. Performing this operation will generate an asynchronous response of type Card, on the response topic. Field Type Label Description card_id string The ID of the Card to update. This must be specified as part of the UpdateCardRequest, instead of as part of the Card message, since the Card ID is specified as \"Output Only\" (not considered during input). User must have proper access to the Card to call this endpoint. card Card A valid Card message. Refer to Card message for details. corecard_v1_transactiondetails.proto \u00b6 API-specific types \u00b6 TransactionDetails \u00b6 TransactionDetails message contains details about a given transaction, relevant and specific to the Core-Card domain. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". merchant_type int32 The classification of the merchant\u2019s type of business product or service. This is the MCC (Merchant Category Code), and is extracted from Data Element DE-018 of the ISO-8583 messages. Refer to this github project for details on MCC values: https://github.com/greggles/mcc-codes card_acceptor_identification_code string This Data element denotes the Merchant ID as part of the tansaction In a Point of sale transaction i.e Maestro or debit MasterCard transaction, this data element type is an alphanumeric value card_acceptor_name_location string The name and location of the card acceptor (merchant), including the city name, state and country code. This is extracted from Data Element DE-043 from ISO-8583 messages. network_transaction_time google.protobuf.Timestamp The UTC timestamp for the point in time when the transaction took place from the payment network's standpoint Its value is extracted from the Data Element DE-007 of the ISO-8583 messages mti string The 4 digits representation of the originating message type (e.g. \"0100\", \"0400\", ... ). card_id string The identifier of the card involved in this card transaction. TransactionDetailsCreatedEvent \u00b6 TransactionDetailsCreatedEvent event is raised by the Core-Card domain when transactions are created and Core-Card specific details are available. Note: There are no timestamps in this event message, since details field will contain the transaction timestamp. Field Type Label Description event_id string The unique event ID for this transaction. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. details TransactionDetails The transaction details for this event. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. txsimulation_v1_cardpayments.proto \u00b6 Services \u00b6 CardPaymentsSimulationService \u00b6 CardPaymentsSimulationService is a synchronous gRPC service for the simulation of card payments transactions Purchase \u00b6 rpc Purchase( PurchaseRequest ) PurchaseResponse Used to simulate a purchase made in one step. The transaction authorization and confirmation occurs in a single shot. At the end of the operation the committed balance of the underlying account will be reduced by the amount specified in the purchase request AuthorizePurchase \u00b6 rpc AuthorizePurchase( AuthorizePurchaseRequest ) AuthorizePurchaseResponse Used to simulate a purchase made in two steps. The transaction authorization occurs during this step and it must be followed by a finalization call: ConfirmPurchase() or CancelPurchase() At the end of the operation the overall transaction ends up in an authorized status and will be open until the finalization operation is called for this transfer ConfirmPurchase \u00b6 rpc ConfirmPurchase( ConfirmPurchaseRequest ) ConfirmPurchaseResponse Used to simulate a purchase made in two steps. This is the second step of a successful 2-steps purchase, where the merchant confirms the transaction closing it and triggering the actual moving of funds in the underlying account CancelPurchase \u00b6 rpc CancelPurchase( CancelPurchaseRequest ) CancelPurchaseResponse Used to simulate a purchase made in two steps. This is the second step of a cancelled 2-steps purchase, where the merchant voids the purchase authorization closing it and triggering releasing any funds withheld by the authorization Refund \u00b6 rpc Refund( RefundRequest ) RefundResponse Used to simulate a purchase refund. E.g. when the customer returns all or part of the merchandise to receive a total or partial refund or when the merchant needs to return part of the funds because some item ran out of stock after the order was completed and the payment completed. Notice that this operation is meant to be used for cases where the original payment already completed. in order to cancel an on-going payments, use CancelPurchase() instead. API-specific types \u00b6 AuthorizePurchaseRequest \u00b6 message AuthorizePurchaseRequest is the request model for the AuthorizePurchase() operation. Field Type Label Description payment PaymentDetails The identifier of the card that will be used for the purchase simulation AuthorizePurchaseResponse \u00b6 AuthorizePurchaseResponse is returned when the purchase authorization operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string an ISO 8583 response code describing the status of the card payment \"00\" means success other values indicate error e.g. \"51\" -> Insufficient funds id string Unique identifier that will be used to 'link' transactions for one purchase ( for example: auth, settlement is one purchase. Settlement, refund is another.. etc) CancelPurchaseRequest \u00b6 CancelPurchaseRequest is the request model for the operation CancelPurchase(). Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). id string CancelPurchaseRequest is the second step of a cancelled 2-steps purchase and this field is used to specify which purchase should be cancelled. It is required. card_id string The identifier of the card that will be used for the purchase simulation CancelPurchaseResponse \u00b6 AuthorizePurchaseResponse is returned when the purchase authorization operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string an ISO 8583 response code describing the status of the card payment \"00\" means success other values indicate error e.g. \"51\" -> Insufficient funds ConfirmPurchaseRequest \u00b6 ConfirmPurchaseRequest is the request model for the ConfirmPurchase() operation. Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). amount thebaasco.types.Amount Amount to be used for the authorization confirmation. Sometimes it can be a smaller than what was originally authorized e.g. for gas station transactions where there is an original authorization of 200$ but the confirmed amount depends on the actual gas the customer ended up buying id string Unique identifier that will be used to 'link' transactions for one purchase ( for example: auth, settlement is one purchase. Settlement, refund is another.. etc) card_id string The identifier of the card that will be used for the purchase simulation ConfirmPurchaseResponse \u00b6 ConfirmPurchaseResponse is returned when the purchase confirmation operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string an ISO 8583 response code describing the status of the card payment \"00\" means success other values indicate error e.g. \"51\" -> Insufficient funds PaymentDetails \u00b6 PaymentDetails is a model that describes the detail of a card payment Field Type Label Description card_id string The identifier of the card that will be used for the purchase simulation amount thebaasco.types.Amount Amount to be paid in this transaction card_acceptor_name string This field contains the name of the merchant. An example: \"AMAZON.COM\". merchant_category_code string Category code of the merchant to use for the payment simulation For example values see: https://www.citibank.com/tts/solutions/commercial-cards/assets/docs/govt/Merchant-Category-Codes.pdf If left blank will get a default value assigned. PurchaseRequest \u00b6 PurchaseRequest is used when distribution partner wants to simulate a card transaction. Field Type Label Description payment PaymentDetails The identifier of the card that will be used for the purchase simulation PurchaseResponse \u00b6 PurchaseResponse is returned when the purchase operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string an ISO 8583 response code describing the status of the card payment \"00\" means success other values indicate error e.g. \"51\" -> Insufficient funds RefundRequest \u00b6 RefundRequest is the request model for the operation Refund() It is used to simulate that a customer is returning all or part of the merchandise he bought to obtain a total or partial refund Notice that this operation is expected to happen afther the original transaction had already been completed To reverse/cancel an on-going transaction before it is confirmed, use the CancelPurchase() operation instead Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). amount thebaasco.types.Amount Indicates the amount to be returned to the customer's account it could be the total value of the original purchase or it could be a smaller amount in case of partial refunds. card_id string The identifier of the card that will be used for the purchase simulation RefundResponse \u00b6 RefundResponse is returned when the purchase authorization operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string an ISO 8583 response code describing the status of the card payment \"00\" means success other values indicate error e.g. \"51\" -> Insufficient funds Shared types \u00b6 TODO: write shared types here if they exist Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Core Card API"},{"location":"API-Specifications/corecard/#core-card-api","text":"","title":"Core Card API"},{"location":"API-Specifications/corecard/#corecard_v1_cardsproto","text":"This section of Core Card API includes the main data types and services that make the API surface if this domain","title":"corecard_v1_cards.proto"},{"location":"API-Specifications/corecard/#services","text":"","title":"Services"},{"location":"API-Specifications/corecard/#cards","text":"Cards service exposes operations related to listing and retrieving details for Cards issued. It is a real gRPC service accessible in a synchronous manner. As such it is also used for generation of Card SDK sign on tokens needed to reveal card authentication details like CVV and expiration date","title":"Cards"},{"location":"API-Specifications/corecard/#getcard","text":"rpc GetCard( GetCardRequest ) Card GetCard retrieves generic details about a single Card. The card data returned does not contain any sensitive information such as card number or expiration date. Only users associated with the Card will be able to invoke this endpoint and retrieve details for a given Card.","title":"GetCard"},{"location":"API-Specifications/corecard/#listcards","text":"rpc ListCards( ListCardsRequest ) ListCardsResponse ListCards lists all Cards associated to the current user. The information returned does not contain any sensitive information such as card number or expiration date. This endpoint uses pagination to allow listing the Cards in smaller, easy to manage, chunks.","title":"ListCards"},{"location":"API-Specifications/corecard/#createcardsdksignontoken","text":"rpc CreateCardSDKSignOnToken( CreateCardSDKSignOnTokenRequest ) CreateCardSDKSignOnTokenResponse CreateCardSDKSignOnToken generates a single-use, limited duration token, which is used by the Front End SDK to retrieve sensitive information about Cards. The SDK is necessary when performing sensitive operations like retrieving the Card's number (PAN), expiration date, CVV, or resetting the Card's PIN.","title":"CreateCardSDKSignOnToken"},{"location":"API-Specifications/corecard/#cardscommands","text":"CardsCommandsService is a key component of Core Card API thar exposes asynchronous operations that alter the state of a Card. It is not directly accessible by consumers as a gRPC service, it instead uses Google PubSub as delivery mechanism for requests and responses. We include it in the documentation as a reference for a better understanding of the responsibilities and API surface of this domain","title":"CardsCommands"},{"location":"API-Specifications/corecard/#createcard","text":"rpc CreateCard( CreateCardRequest ) Card CreateCard is an asynchronous operation used to create a new Card. Performing this operation will generate an asynchronous response of type Card on the response topic. When creating the card, the information contained in the Client-Profile domain for current user will be used to populate Card information such as name on card, and billing address. As result of a successful card creation, a business event of type CardCreatedEvent will be issued","title":"CreateCard"},{"location":"API-Specifications/corecard/#lockcard","text":"rpc LockCard( LockCardRequest ) LockCardResponse LockCard is an asynchronous function used to temporarily lock a card. Performing this operation will generate an asynchronous response of type LockCardResponse on the response topic or an error if applicable. This feature allows customers to prevent transactions from getting authorized while they confirm if a card is effectively lost. After finding the card if it is the case, they can re-enable the card by using the unlock function above.","title":"LockCard"},{"location":"API-Specifications/corecard/#unlockcard","text":"rpc UnlockCard( UnlockCardRequest ) UnlockCardResponse UnlockCard is an asynchronous function used to re-enable a locked card. Performing this operation will generate an asynchronous response of type UnlockCardResponse on the response topic or an error if applicable. This feature allows customers to re-enable transactions on the card if they find it after suspecting it lost.","title":"UnlockCard"},{"location":"API-Specifications/corecard/#createauthorizedusercard","text":"rpc CreateAuthorizedUserCard( CreateAuthorizedUserCardRequest ) CreateAuthorizedUserCardResponse CreateAuthorizedCard is an asynchronous function for the creation of a new Card for an authorized user of an account. Performing this operation will generate an asynchronous response of type CreateAuthorizedUserCardResponse on the response topic. When creating the card, the Client-Profile for the authorized user will be fetched to populate information such as name on card and billing address.","title":"CreateAuthorizedUserCard"},{"location":"API-Specifications/corecard/#enums","text":"","title":"Enums"},{"location":"API-Specifications/corecard/#cardstate","text":"CardState is used to describe the state of a card. Name Number Description CARD_STATE_UNSPECIFIED 0 CARD_TYPE_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. CARD_STATE_ACTIVE 1 CARD_STATE_ACTIVE indicates that the card is ready to be used. CARD_STATE_LOCKED 2 CARD_STATE_LOCKED indicates that the card is temporarily blocked for usage.","title":"CardState"},{"location":"API-Specifications/corecard/#cardtype","text":"CardType provides indication of the Card's type. Name Number Description CARD_TYPE_UNSPECIFIED 0 CARD_TYPE_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. Trying to create a Card with this type will result in an error. CARD_TYPE_PREPAID 1 CARD_TYPE_PREPAID represents a Prepaid Card. A Prepaid Card uses the linked account's funds when processing operations.","title":"CardType"},{"location":"API-Specifications/corecard/#errorcodes","text":"A Domain-specific list of error codes (For Core Card) documenting the error situations that could arrive while consuming synchronous or asynchronous APIs In all cases these error codes will be communicated to the consumer in a structured manner within an instance of AppError (see https://github.com/thebaasco/api-contracts/tree/master/proto/types/errordetails.proto) that will be included within the error status response: status.Status.Details Name Number Description UNSPECIFIED 0 UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. CARDS_INVALID_ACCOUNT 1 CARDS_INVALID_ACCOUNT - Invalid Account. gRPC Code=InvalidArgument. Returned when an account ID passed as argument for a given operation does not resolve to an existing account or the account is not authorized for the caller (e.g. the customer does not own the account) CARDS_INVALID_AUTHORIZED_USER 2 CARDS_INVALID_AUTHORIZED_USER - Invalid authorized user. gRPC Code==InvalidArgument. Returned while creating a card for an authorized user if the ID passed as argument does not resolve to an existing user or the user is not an authorized user of the given account CARDS_INVALID_CARD_ID 3 CARDS_INVALID_CARD_ID - Invalid Card ID. gRPC Code=InvalidArgument. Returned while executing card servicing operations (e.g Lock/Unlock) if the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user","title":"ErrorCodes"},{"location":"API-Specifications/corecard/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/corecard/#card","text":"Card represents generic details about a given Card. The message does not contain any sensitive information, such as Card number (PAN), expiration date, or CVV. Access to such sensitive information must be done throuh other mechanism, such as via an external SDK (using CreateCardSDKSignOnToken operation) Field Type Label Description id string Output only. The unique ID of this Card. It is not nescessary to specify the ID when creating a Card, but the resulting Card will have this value populated with the generated ID. The ID generated follows the UUID v4 format, always. card_type CardType The type of the Card. See documentation on CardType enum for details on enum values. account_id string The ID of the Account linked to this Card. The value of this field must follow the UUID format, and must map to a valid Account, for which the user has proper access. The list of valid Accounts can be retrieved from Core-Transaction domain. All Cards must have a linked Account. description string The description for this Card. Specifying a description for a Card is optional. state CardState Describes the current state of the card. Output-only owner_id string The user ID of the card owner. Output-only","title":"Card"},{"location":"API-Specifications/corecard/#cardcreatedevent","text":"CardCreatedEvent is an event raised when a Card is successfuly created. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. card Card The Card that was created. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. card_creation_time google.protobuf.Timestamp The UTC timestamp for the creation of the Card. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"CardCreatedEvent"},{"location":"API-Specifications/corecard/#cardupdatedevent","text":"CardUpdatedEvent is an event raised when a card is updated. E.g. The card description could be changed or the card state change from Active to Locked, Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. card Card Snapshot of the card at its resulting state after the update took place. user_id string The ID of the user who triggered the operation that resulted in the creation of the current event tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants.","title":"CardUpdatedEvent"},{"location":"API-Specifications/corecard/#createauthorizedusercardrequest","text":"CreateAuthorizedCardRequest is message used to perform the asynchronous operation of creating a new Card for an authorized user of an account. Performing this operation will generate an asynchronous response of type Card on the response topic. When creating the card, the information contained in the Client-Profile for the authorized user will be fetched to populate information such as name on card and billing address. Errors: ErrorCodes.CARDS_INVALID_ACCOUNT if the account passed as argument does not exist or is not owned by the current user ErrorCodes.CARDS_INVALID_AUTH_USER if the user ID passed as argument does not exist or is not an authorized user of the account Field Type Label Description card Card A valid Card message. Refer to Card message for details. authorized_user_id string The ID of the authorized user who will be the owner of the newly created card","title":"CreateAuthorizedUserCardRequest"},{"location":"API-Specifications/corecard/#createauthorizedusercardresponse","text":"CreateAuthorizedUserCardResponse is the response model for the asynchronous operation of creating a new Card for an authorized user of an account. Field Type Label Description card Card A valid Card message. Refer to Card message for details.","title":"CreateAuthorizedUserCardResponse"},{"location":"API-Specifications/corecard/#createcardrequest","text":"CreateCardRequest is message used to perform the asynchronous operation of creating a new Card. Performing this operation will generate an asynchronous response of type Card, on the response topic. When creating the card, the information contained in the Client-Profile domain for current user will be used to populate Card information such as name on card, and billing address. Field Type Label Description card Card A valid Card message. Refer to Card message for details.","title":"CreateCardRequest"},{"location":"API-Specifications/corecard/#createcardsdksignontokenrequest","text":"CreateCardSDKSignOnTokenRequest is a message passed as parameter to the CreateCardSDKSignOnToken operation. Field Type Label Description card_id string The ID of the Card for which a SDK Sign-On Token must be created. The value must be a valid UUID, and current user must have proper access to the Card.","title":"CreateCardSDKSignOnTokenRequest"},{"location":"API-Specifications/corecard/#createcardsdksignontokenresponse","text":"CreateCardSDKSignOnTokenResponse is a message returned in response to the CreateCardSDKSignOnToken operation, which contains the token needed to use the SDK. Field Type Label Description token string The token to be used by the Front End SDK t . This token can only be used to sign-on a single device, for a single session, and has limited duration during which it can be used. card_ref_number string A reference number assigned to the selected card by the card payment processor provider. This value must be passed along with the token to the card payment processor's SDK in order to reveal the card's authentication details (number, CVV, expiration)","title":"CreateCardSDKSignOnTokenResponse"},{"location":"API-Specifications/corecard/#getcardrequest","text":"GetCardRequest is a message passed as parameter to the GetCard operation. Field Type Label Description card_id string The ID of the Card to retrieve. The value must be a valid UUID, and current user must have proper access to the Card to retrieve it.","title":"GetCardRequest"},{"location":"API-Specifications/corecard/#listcardsrequest","text":"ListCardsRequest is a message passed as parameter to the ListCards operation. See ListCards for details on operation. Field Type Label Description page_size int32 The maximum number of Cards to retrieve as part of this request. This value needs to be superior, or equal to 1. page_token string When retrieving page other than the initial page, the value for the page_token must be specified, and taken from the previous page's next_page_token value (see ListCardsResponse). When no value is specified, then the initial page will be returned.","title":"ListCardsRequest"},{"location":"API-Specifications/corecard/#listcardsresponse","text":"ListCardsResponse is a message returned in response to the ListCards operation, which contains the requested data. Field Type Label Description cards Card repeated The list of Card messages requested. next_page_token string The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see ListCardsRequest). When no value is returned in this field, then no further data exists to be listed.","title":"ListCardsResponse"},{"location":"API-Specifications/corecard/#lockcardrequest","text":"LockCardRequest is message used to perform the asynchronous operation of temporarily locking a card. Performing this operation will generate an asynchronous response of type Card on the response topic or an error if applicable. This feature allows customers to prevent transactions from getting authorized while they confirm if a card is effectively lost. After finding the card if it is the case, they can re-enable the card by using the unlock function, see UnlockCardRequest Errors: ErrorCodes.CARDS_INVALID_CARD_ID if the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user Field Type Label Description card_id string The ID of the card to be locked","title":"LockCardRequest"},{"location":"API-Specifications/corecard/#lockcardresponse","text":"LockCardResponse is message used as return type of the async operation LockCard Field Type Label Description card Card The card in its current status as result of the operation.","title":"LockCardResponse"},{"location":"API-Specifications/corecard/#unlockcardrequest","text":"UnlockCardRequest is message used to perform the asynchronous operation of unlocking a locked card. Performing this operation will generate an asynchronous response of type UnlockCardResponse on the response topic or an error if applicable. This feature allows customers to re-enable transactions on the card if they find it after suspecting it lost. Errors: ErrorCodes.CARDS_INVALID_CARD_ID if the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user Field Type Label Description card_id string The ID of the locked card to be unlocked","title":"UnlockCardRequest"},{"location":"API-Specifications/corecard/#unlockcardresponse","text":"UnlockCardResponse is message used as return type of the async operation UnlockCard Field Type Label Description card Card The card in its current as result of of the operation.","title":"UnlockCardResponse"},{"location":"API-Specifications/corecard/#updatecardrequest","text":"UpdateCardRequest is message used to perform the asynchronous operation of updating a Card. Performing this operation will generate an asynchronous response of type Card, on the response topic. Field Type Label Description card_id string The ID of the Card to update. This must be specified as part of the UpdateCardRequest, instead of as part of the Card message, since the Card ID is specified as \"Output Only\" (not considered during input). User must have proper access to the Card to call this endpoint. card Card A valid Card message. Refer to Card message for details.","title":"UpdateCardRequest"},{"location":"API-Specifications/corecard/#corecard_v1_transactiondetailsproto","text":"","title":"corecard_v1_transactiondetails.proto"},{"location":"API-Specifications/corecard/#api-specific-types_1","text":"","title":"API-specific types"},{"location":"API-Specifications/corecard/#transactiondetails","text":"TransactionDetails message contains details about a given transaction, relevant and specific to the Core-Card domain. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". merchant_type int32 The classification of the merchant\u2019s type of business product or service. This is the MCC (Merchant Category Code), and is extracted from Data Element DE-018 of the ISO-8583 messages. Refer to this github project for details on MCC values: https://github.com/greggles/mcc-codes card_acceptor_identification_code string This Data element denotes the Merchant ID as part of the tansaction In a Point of sale transaction i.e Maestro or debit MasterCard transaction, this data element type is an alphanumeric value card_acceptor_name_location string The name and location of the card acceptor (merchant), including the city name, state and country code. This is extracted from Data Element DE-043 from ISO-8583 messages. network_transaction_time google.protobuf.Timestamp The UTC timestamp for the point in time when the transaction took place from the payment network's standpoint Its value is extracted from the Data Element DE-007 of the ISO-8583 messages mti string The 4 digits representation of the originating message type (e.g. \"0100\", \"0400\", ... ). card_id string The identifier of the card involved in this card transaction.","title":"TransactionDetails"},{"location":"API-Specifications/corecard/#transactiondetailscreatedevent","text":"TransactionDetailsCreatedEvent event is raised by the Core-Card domain when transactions are created and Core-Card specific details are available. Note: There are no timestamps in this event message, since details field will contain the transaction timestamp. Field Type Label Description event_id string The unique event ID for this transaction. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. details TransactionDetails The transaction details for this event. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants.","title":"TransactionDetailsCreatedEvent"},{"location":"API-Specifications/corecard/#txsimulation_v1_cardpaymentsproto","text":"","title":"txsimulation_v1_cardpayments.proto"},{"location":"API-Specifications/corecard/#services_1","text":"","title":"Services"},{"location":"API-Specifications/corecard/#cardpaymentssimulationservice","text":"CardPaymentsSimulationService is a synchronous gRPC service for the simulation of card payments transactions","title":"CardPaymentsSimulationService"},{"location":"API-Specifications/corecard/#purchase","text":"rpc Purchase( PurchaseRequest ) PurchaseResponse Used to simulate a purchase made in one step. The transaction authorization and confirmation occurs in a single shot. At the end of the operation the committed balance of the underlying account will be reduced by the amount specified in the purchase request","title":"Purchase"},{"location":"API-Specifications/corecard/#authorizepurchase","text":"rpc AuthorizePurchase( AuthorizePurchaseRequest ) AuthorizePurchaseResponse Used to simulate a purchase made in two steps. The transaction authorization occurs during this step and it must be followed by a finalization call: ConfirmPurchase() or CancelPurchase() At the end of the operation the overall transaction ends up in an authorized status and will be open until the finalization operation is called for this transfer","title":"AuthorizePurchase"},{"location":"API-Specifications/corecard/#confirmpurchase","text":"rpc ConfirmPurchase( ConfirmPurchaseRequest ) ConfirmPurchaseResponse Used to simulate a purchase made in two steps. This is the second step of a successful 2-steps purchase, where the merchant confirms the transaction closing it and triggering the actual moving of funds in the underlying account","title":"ConfirmPurchase"},{"location":"API-Specifications/corecard/#cancelpurchase","text":"rpc CancelPurchase( CancelPurchaseRequest ) CancelPurchaseResponse Used to simulate a purchase made in two steps. This is the second step of a cancelled 2-steps purchase, where the merchant voids the purchase authorization closing it and triggering releasing any funds withheld by the authorization","title":"CancelPurchase"},{"location":"API-Specifications/corecard/#refund","text":"rpc Refund( RefundRequest ) RefundResponse Used to simulate a purchase refund. E.g. when the customer returns all or part of the merchandise to receive a total or partial refund or when the merchant needs to return part of the funds because some item ran out of stock after the order was completed and the payment completed. Notice that this operation is meant to be used for cases where the original payment already completed. in order to cancel an on-going payments, use CancelPurchase() instead.","title":"Refund"},{"location":"API-Specifications/corecard/#api-specific-types_2","text":"","title":"API-specific types"},{"location":"API-Specifications/corecard/#authorizepurchaserequest","text":"message AuthorizePurchaseRequest is the request model for the AuthorizePurchase() operation. Field Type Label Description payment PaymentDetails The identifier of the card that will be used for the purchase simulation","title":"AuthorizePurchaseRequest"},{"location":"API-Specifications/corecard/#authorizepurchaseresponse","text":"AuthorizePurchaseResponse is returned when the purchase authorization operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string an ISO 8583 response code describing the status of the card payment \"00\" means success other values indicate error e.g. \"51\" -> Insufficient funds id string Unique identifier that will be used to 'link' transactions for one purchase ( for example: auth, settlement is one purchase. Settlement, refund is another.. etc)","title":"AuthorizePurchaseResponse"},{"location":"API-Specifications/corecard/#cancelpurchaserequest","text":"CancelPurchaseRequest is the request model for the operation CancelPurchase(). Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). id string CancelPurchaseRequest is the second step of a cancelled 2-steps purchase and this field is used to specify which purchase should be cancelled. It is required. card_id string The identifier of the card that will be used for the purchase simulation","title":"CancelPurchaseRequest"},{"location":"API-Specifications/corecard/#cancelpurchaseresponse","text":"AuthorizePurchaseResponse is returned when the purchase authorization operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string an ISO 8583 response code describing the status of the card payment \"00\" means success other values indicate error e.g. \"51\" -> Insufficient funds","title":"CancelPurchaseResponse"},{"location":"API-Specifications/corecard/#confirmpurchaserequest","text":"ConfirmPurchaseRequest is the request model for the ConfirmPurchase() operation. Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). amount thebaasco.types.Amount Amount to be used for the authorization confirmation. Sometimes it can be a smaller than what was originally authorized e.g. for gas station transactions where there is an original authorization of 200$ but the confirmed amount depends on the actual gas the customer ended up buying id string Unique identifier that will be used to 'link' transactions for one purchase ( for example: auth, settlement is one purchase. Settlement, refund is another.. etc) card_id string The identifier of the card that will be used for the purchase simulation","title":"ConfirmPurchaseRequest"},{"location":"API-Specifications/corecard/#confirmpurchaseresponse","text":"ConfirmPurchaseResponse is returned when the purchase confirmation operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string an ISO 8583 response code describing the status of the card payment \"00\" means success other values indicate error e.g. \"51\" -> Insufficient funds","title":"ConfirmPurchaseResponse"},{"location":"API-Specifications/corecard/#paymentdetails","text":"PaymentDetails is a model that describes the detail of a card payment Field Type Label Description card_id string The identifier of the card that will be used for the purchase simulation amount thebaasco.types.Amount Amount to be paid in this transaction card_acceptor_name string This field contains the name of the merchant. An example: \"AMAZON.COM\". merchant_category_code string Category code of the merchant to use for the payment simulation For example values see: https://www.citibank.com/tts/solutions/commercial-cards/assets/docs/govt/Merchant-Category-Codes.pdf If left blank will get a default value assigned.","title":"PaymentDetails"},{"location":"API-Specifications/corecard/#purchaserequest","text":"PurchaseRequest is used when distribution partner wants to simulate a card transaction. Field Type Label Description payment PaymentDetails The identifier of the card that will be used for the purchase simulation","title":"PurchaseRequest"},{"location":"API-Specifications/corecard/#purchaseresponse","text":"PurchaseResponse is returned when the purchase operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string an ISO 8583 response code describing the status of the card payment \"00\" means success other values indicate error e.g. \"51\" -> Insufficient funds","title":"PurchaseResponse"},{"location":"API-Specifications/corecard/#refundrequest","text":"RefundRequest is the request model for the operation Refund() It is used to simulate that a customer is returning all or part of the merchandise he bought to obtain a total or partial refund Notice that this operation is expected to happen afther the original transaction had already been completed To reverse/cancel an on-going transaction before it is confirmed, use the CancelPurchase() operation instead Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). amount thebaasco.types.Amount Indicates the amount to be returned to the customer's account it could be the total value of the original purchase or it could be a smaller amount in case of partial refunds. card_id string The identifier of the card that will be used for the purchase simulation","title":"RefundRequest"},{"location":"API-Specifications/corecard/#refundresponse","text":"RefundResponse is returned when the purchase authorization operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string an ISO 8583 response code describing the status of the card payment \"00\" means success other values indicate error e.g. \"51\" -> Insufficient funds","title":"RefundResponse"},{"location":"API-Specifications/corecard/#shared-types","text":"TODO: write shared types here if they exist","title":"Shared types"},{"location":"API-Specifications/corecard/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/coretransaction/","text":"Core Transaction API \u00b6 coretransaction_v1_accounts.proto \u00b6 Services \u00b6 Accounts \u00b6 Accounts service exposes endpoints related to listing and retrieving Accounts. ListAccounts \u00b6 rpc ListAccounts( ListAccountsRequest ) ListAccountsResponse ListAccounts lists all accounts on which the current user is the owner, or an authorized user. This endpoint uses pagination to allow listing accounts in smaller, easy to manage, chunks. GetAccount \u00b6 rpc GetAccount( GetAccountRequest ) Account GetAccount retrieves an Account. The user must have proper access to the Account. ListAuthorizedUsers \u00b6 rpc ListAuthorizedUsers( ListAuthorizedUsersRequest ) ListAuthorizedUsersResponse ListAuthorizedUsers lists all authorized users of an account if the caller as the access rights. ListOwners \u00b6 rpc ListOwners( ListOwnersRequest ) ListOwnersResponse ListOwners lists all owners of an account if the caller as the access rights. API-specific types \u00b6 Account \u00b6 Account represents generic details about a given Account. This notion of Account is shared across all types of Accounts, from any domains ( e.g. Core-Banking, ... ). Field Type Label Description id string The unique ID of the Account. This ID can be used to retrieve the Account. This will always be a valid UUID. balance thebaasco.types.Balance The current balance of the Account. name string The display name of the Account. source_domain string The source domain which created the Account (eg: core-banking). owners string repeated The owners of the Account. This will always be a list of valid UUID. authorized_users string repeated The list authorized users of the Account. Each item in the list will be a valid UUID. AddAuthorizedUserRequest \u00b6 AddAuthorizedUserRequest is used to add an authorized user to the provided Account. Performing this operation will generate an asynchronous response of type AddAuthorizedUserResponse, on the response topic. Field Type Label Description account_id string The ID of the Account where the authorized is added. The value must be a valid UUID, and current user must be owner of the Account. authorized_user string The ID of the authorized user to add to the Account. The value must be a valid UUID, from an onboarded Customer. AddAuthorizedUserResponse \u00b6 AddAuthorizedUserResponse is the response to a AddAuthorizedUserRequest. It provides the Updated list of authorized users. Field Type Label Description authorized_users string repeated The resulting list of authorized users of the Account, including the newly added one. Each item in the list will be a valid UUID. AddOwnerRequest \u00b6 AddOwnerRequest is used to add an owner to the provided Account. Performing this operation will generate an asynchronous response of type AddOwnerResponse, on the response topic. Field Type Label Description account_id string The ID of the Account where the owner is added. The value must be a valid UUID, and current user must be owner of the Account. owner string The ID of the owner to add to the Account. The value must be a valid UUID, from an onboarded Customer. AddOwnerResponse \u00b6 AddOwnerResponse is the response to a AddOwnerRequest. It provides the Updated list of owners. Field Type Label Description owners string repeated The resulting list of owners of the Account, including the newly added one. Each item in the list will be a valid UUID. AuthorizedUserAddedEvent \u00b6 AuthorizedUserAddedEvent is an event raised when adding an authorized user to an account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_id string The ID of the Account where the authorized user was added. This will be a valid UUID. authorized_user_id string The ID of the authorized user added to the Account. This will be a valid UUID. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp at which the authorized user was added to the Account. AuthorizedUserRemovedEvent \u00b6 AuthorizedUserRemovedEvent is an event raised when removing an authorized user from an account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_id string The ID of the Account where the authorized user was added. This will be a valid UUID. authorized_user_id string The ID of the authorized user added to the Account. This will be a valid UUID. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp at which the authorized user was added to the Account. GetAccountRequest \u00b6 GetAccountRequest is a message passed as parameter to the GetAccount operation. Field Type Label Description account_id string The ID of the Account to retrieve. The value must be a valid UUID, and current user must have proper access. ListAccountsRequest \u00b6 ListAccountsRequest is a message passed as parameter to the ListAccounts operation. Field Type Label Description page_size int32 The maximum number of Accounts to retrieve as part of this request. This value needs to be superior, or equal to 1. page_token string When retrieving a page other than the initial page, the value for the page_token must be specified, and taken from the previous page's next_page_token value (see ListAccountsResponse). When no value is specified, then the initial page will be returned. ListAccountsResponse \u00b6 ListAccountsResponse is a message returned in response to the ListAccounts operation. Field Type Label Description accounts Account repeated The requested list of Accounts. next_page_token string The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see ListAccountsRequest). When no value is returned in this field, then no further data exists to be listed. ListAuthorizedUsersRequest \u00b6 ListAuthorizedUsersRequest is a message passed as parameter to the ListAuthorizedUsers operation. Field Type Label Description account_id string The ID of the Account for which the authorized users are to be listed. Must be a valid UUID. ListAuthorizedUsersResponse \u00b6 ListAuthorizedUsersResponse is a message returned in response to the ListAuthorizedUsers operation. Field Type Label Description authorized_users string repeated The requested list of authorized users ids. Each item in the list will be a valid UUID. ListOwnersRequest \u00b6 ListOwnersRequest is a message passed as parameter to the ListOwners operation. Field Type Label Description account_id string The ID of the Account for which the owners are to be listed. Must be a valid UUID. ListOwnersResponse \u00b6 ListOwnersResponse is a message returned in response to the ListOwners operation. Field Type Label Description owners string repeated The requested list of owners ids. Each item in the list will be a valid UUID. OwnerAddedEvent \u00b6 OwnerAddedEvent is an event raised when adding an owner to an account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_id string The ID of the Account where the owner was added. This will be a valid UUID. owner_id string The ID of the owner added to the Account. This will be a valid UUID. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp at which the owner was added to the Account. RemoveAuthorizedUserRequest \u00b6 RemoveAuthorizedUserRequest is used to remove an authorized user from the provided Account. Performing this operation will generate an asynchronous response of type RemoveAuthorizedUserResponse, on the response topic. Field Type Label Description account_id string The ID of the Account where the authorized is removed from. The value must be a valid UUID, and current user must be owner of the Account. The current user must have remove:authorized_user scope authorized_user string The ID of the authorized user to add to the Account. The value must be a valid UUID, from an onboarded Customer. RemoveAuthorizedUserResponse \u00b6 RemoveAuthorizedUserResponse is the response to a RemoveAuthorizedUserRequest. It provides the Updated list of authorized users. Field Type Label Description authorized_users string repeated The resulting list of authorized users of the Account. Each item in the list will be a valid UUID. coretransaction_v1_transactions.proto \u00b6 Services \u00b6 Transactions \u00b6 Transactions service exposes operations related to listing and retrieving details for Transactions. ListTransactions \u00b6 rpc ListTransactions( ListTransactionsRequest ) ListTransactionsResponse ListTransactions lists Transactions associated to the Account specified using pagination. The current user must be an authorized user of the Account to invoke this endpoint. Transactions are sorted in descending order of Transaction time. It is possible for this endpoint to return less than the number of items requested by the page_size field of the ListTransactionsRequest parameters ( including returning a page containing 0 items ). It is important that consumers of this API use the next_page_token field of the ListTransactionsResponse object to determine if more data is available or not, as such cases are not abnormal for this endpoint. API-specific types \u00b6 InternalAccountTransaction \u00b6 InternalAccountTransaction represents the elements common to any internal Transaction. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching Transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". internal_account_id string The UUID that correlates to the the Internal Account on which the Transaction occurred. transaction_time google.protobuf.Timestamp The UTC timestamp at which the Transaction occurred. amount thebaasco.types.Amount The amount of the Transaction. If the amount is negative, then the transaction is a debit. If the amount if positive, the transaction is a credit. initiating_domain string The name of the domain that can be queried for additional details regarding this Transaction (e.g. core-card, core-transfer or core-banking) InternalAccountTransactionCreatedEvent \u00b6 InternalAccountTransactionCreatedEvent is an event raised when a Transaction occurs on a given Internal Account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. transaction InternalAccountTransaction The InternalAccountTransaction that caused the event. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. ListTransactionsRequest \u00b6 ListTransactionsRequest is a message passed as parameter to the ListTransactions operation. Refer to ListTransactions operation for more details. Field Type Label Description account_id string The ID of the Account to list Transactions for. This value must be a valid UUID, and user must have proper access to the Account. from google.protobuf.Timestamp The UTC timestamp from which to list Transactions. to google.protobuf.Timestamp The UTC timestamp until which to list Transactions. page_size int32 The maximum number of Transactions to retrieve as part of this request. This value needs to be superior, or equal to 1. page_token string When retrieving page other than the initial page, the value for the page_token must be specified, and taken from the previous page's next_page_token value (see ListTransactionsResponse). When no value is specified, then the initial page will be returned. ListTransactionsResponse \u00b6 ListTransactionsResponse is a message returned in response to the ListTransactions operation. Field Type Label Description transactions Transaction repeated The requested list of Transactions. next_page_token string The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see ListTransactionsRequest). When no value is returned in this field, then no further data exists to be listed. Transaction \u00b6 Transaction represents the elements common to any Transaction. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching Transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". account_id string The ID of the Account on which the Transaction occurred. This will always be a valid UUID. transaction_time google.protobuf.Timestamp The UTC timestamp at which the Transaction was inserted to the postings ledger amount thebaasco.types.Amount The amount of the Transaction. If the amount is negative, then the transaction is a debit. If the amount if positive, the transaction is a credit. balance thebaasco.types.Balance The resulting Balance of the Account after the Transaction has been processed. Warning: This value does not reflect the current Balance of the Account, just the balance following the transaction (since more recent Transactions might have occurred that also impacted the Account's balance) account_domain string The name of the domain that can be queried for additional details regarding the Account of this transaction (e.g. core-banking) initiating_domain string The name of the domain that can be queried for additional details regarding this Transaction (e.g. core-card, core-transfer or core-banking) TransactionCreatedEvent \u00b6 TransactionCreatedEvent is an event raised when a Transaction occurs on a given Account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. transaction Transaction The Transaction that caused the event. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. Shared types \u00b6 Amount \u00b6 Global types / Amount Balance \u00b6 Global types / Balance Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Core Transaction API"},{"location":"API-Specifications/coretransaction/#core-transaction-api","text":"","title":"Core Transaction API"},{"location":"API-Specifications/coretransaction/#coretransaction_v1_accountsproto","text":"","title":"coretransaction_v1_accounts.proto"},{"location":"API-Specifications/coretransaction/#services","text":"","title":"Services"},{"location":"API-Specifications/coretransaction/#accounts","text":"Accounts service exposes endpoints related to listing and retrieving Accounts.","title":"Accounts"},{"location":"API-Specifications/coretransaction/#listaccounts","text":"rpc ListAccounts( ListAccountsRequest ) ListAccountsResponse ListAccounts lists all accounts on which the current user is the owner, or an authorized user. This endpoint uses pagination to allow listing accounts in smaller, easy to manage, chunks.","title":"ListAccounts"},{"location":"API-Specifications/coretransaction/#getaccount","text":"rpc GetAccount( GetAccountRequest ) Account GetAccount retrieves an Account. The user must have proper access to the Account.","title":"GetAccount"},{"location":"API-Specifications/coretransaction/#listauthorizedusers","text":"rpc ListAuthorizedUsers( ListAuthorizedUsersRequest ) ListAuthorizedUsersResponse ListAuthorizedUsers lists all authorized users of an account if the caller as the access rights.","title":"ListAuthorizedUsers"},{"location":"API-Specifications/coretransaction/#listowners","text":"rpc ListOwners( ListOwnersRequest ) ListOwnersResponse ListOwners lists all owners of an account if the caller as the access rights.","title":"ListOwners"},{"location":"API-Specifications/coretransaction/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/coretransaction/#account","text":"Account represents generic details about a given Account. This notion of Account is shared across all types of Accounts, from any domains ( e.g. Core-Banking, ... ). Field Type Label Description id string The unique ID of the Account. This ID can be used to retrieve the Account. This will always be a valid UUID. balance thebaasco.types.Balance The current balance of the Account. name string The display name of the Account. source_domain string The source domain which created the Account (eg: core-banking). owners string repeated The owners of the Account. This will always be a list of valid UUID. authorized_users string repeated The list authorized users of the Account. Each item in the list will be a valid UUID.","title":"Account"},{"location":"API-Specifications/coretransaction/#addauthorizeduserrequest","text":"AddAuthorizedUserRequest is used to add an authorized user to the provided Account. Performing this operation will generate an asynchronous response of type AddAuthorizedUserResponse, on the response topic. Field Type Label Description account_id string The ID of the Account where the authorized is added. The value must be a valid UUID, and current user must be owner of the Account. authorized_user string The ID of the authorized user to add to the Account. The value must be a valid UUID, from an onboarded Customer.","title":"AddAuthorizedUserRequest"},{"location":"API-Specifications/coretransaction/#addauthorizeduserresponse","text":"AddAuthorizedUserResponse is the response to a AddAuthorizedUserRequest. It provides the Updated list of authorized users. Field Type Label Description authorized_users string repeated The resulting list of authorized users of the Account, including the newly added one. Each item in the list will be a valid UUID.","title":"AddAuthorizedUserResponse"},{"location":"API-Specifications/coretransaction/#addownerrequest","text":"AddOwnerRequest is used to add an owner to the provided Account. Performing this operation will generate an asynchronous response of type AddOwnerResponse, on the response topic. Field Type Label Description account_id string The ID of the Account where the owner is added. The value must be a valid UUID, and current user must be owner of the Account. owner string The ID of the owner to add to the Account. The value must be a valid UUID, from an onboarded Customer.","title":"AddOwnerRequest"},{"location":"API-Specifications/coretransaction/#addownerresponse","text":"AddOwnerResponse is the response to a AddOwnerRequest. It provides the Updated list of owners. Field Type Label Description owners string repeated The resulting list of owners of the Account, including the newly added one. Each item in the list will be a valid UUID.","title":"AddOwnerResponse"},{"location":"API-Specifications/coretransaction/#authorizeduseraddedevent","text":"AuthorizedUserAddedEvent is an event raised when adding an authorized user to an account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_id string The ID of the Account where the authorized user was added. This will be a valid UUID. authorized_user_id string The ID of the authorized user added to the Account. This will be a valid UUID. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp at which the authorized user was added to the Account.","title":"AuthorizedUserAddedEvent"},{"location":"API-Specifications/coretransaction/#authorizeduserremovedevent","text":"AuthorizedUserRemovedEvent is an event raised when removing an authorized user from an account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_id string The ID of the Account where the authorized user was added. This will be a valid UUID. authorized_user_id string The ID of the authorized user added to the Account. This will be a valid UUID. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp at which the authorized user was added to the Account.","title":"AuthorizedUserRemovedEvent"},{"location":"API-Specifications/coretransaction/#getaccountrequest","text":"GetAccountRequest is a message passed as parameter to the GetAccount operation. Field Type Label Description account_id string The ID of the Account to retrieve. The value must be a valid UUID, and current user must have proper access.","title":"GetAccountRequest"},{"location":"API-Specifications/coretransaction/#listaccountsrequest","text":"ListAccountsRequest is a message passed as parameter to the ListAccounts operation. Field Type Label Description page_size int32 The maximum number of Accounts to retrieve as part of this request. This value needs to be superior, or equal to 1. page_token string When retrieving a page other than the initial page, the value for the page_token must be specified, and taken from the previous page's next_page_token value (see ListAccountsResponse). When no value is specified, then the initial page will be returned.","title":"ListAccountsRequest"},{"location":"API-Specifications/coretransaction/#listaccountsresponse","text":"ListAccountsResponse is a message returned in response to the ListAccounts operation. Field Type Label Description accounts Account repeated The requested list of Accounts. next_page_token string The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see ListAccountsRequest). When no value is returned in this field, then no further data exists to be listed.","title":"ListAccountsResponse"},{"location":"API-Specifications/coretransaction/#listauthorizedusersrequest","text":"ListAuthorizedUsersRequest is a message passed as parameter to the ListAuthorizedUsers operation. Field Type Label Description account_id string The ID of the Account for which the authorized users are to be listed. Must be a valid UUID.","title":"ListAuthorizedUsersRequest"},{"location":"API-Specifications/coretransaction/#listauthorizedusersresponse","text":"ListAuthorizedUsersResponse is a message returned in response to the ListAuthorizedUsers operation. Field Type Label Description authorized_users string repeated The requested list of authorized users ids. Each item in the list will be a valid UUID.","title":"ListAuthorizedUsersResponse"},{"location":"API-Specifications/coretransaction/#listownersrequest","text":"ListOwnersRequest is a message passed as parameter to the ListOwners operation. Field Type Label Description account_id string The ID of the Account for which the owners are to be listed. Must be a valid UUID.","title":"ListOwnersRequest"},{"location":"API-Specifications/coretransaction/#listownersresponse","text":"ListOwnersResponse is a message returned in response to the ListOwners operation. Field Type Label Description owners string repeated The requested list of owners ids. Each item in the list will be a valid UUID.","title":"ListOwnersResponse"},{"location":"API-Specifications/coretransaction/#owneraddedevent","text":"OwnerAddedEvent is an event raised when adding an owner to an account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_id string The ID of the Account where the owner was added. This will be a valid UUID. owner_id string The ID of the owner added to the Account. This will be a valid UUID. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp at which the owner was added to the Account.","title":"OwnerAddedEvent"},{"location":"API-Specifications/coretransaction/#removeauthorizeduserrequest","text":"RemoveAuthorizedUserRequest is used to remove an authorized user from the provided Account. Performing this operation will generate an asynchronous response of type RemoveAuthorizedUserResponse, on the response topic. Field Type Label Description account_id string The ID of the Account where the authorized is removed from. The value must be a valid UUID, and current user must be owner of the Account. The current user must have remove:authorized_user scope authorized_user string The ID of the authorized user to add to the Account. The value must be a valid UUID, from an onboarded Customer.","title":"RemoveAuthorizedUserRequest"},{"location":"API-Specifications/coretransaction/#removeauthorizeduserresponse","text":"RemoveAuthorizedUserResponse is the response to a RemoveAuthorizedUserRequest. It provides the Updated list of authorized users. Field Type Label Description authorized_users string repeated The resulting list of authorized users of the Account. Each item in the list will be a valid UUID.","title":"RemoveAuthorizedUserResponse"},{"location":"API-Specifications/coretransaction/#coretransaction_v1_transactionsproto","text":"","title":"coretransaction_v1_transactions.proto"},{"location":"API-Specifications/coretransaction/#services_1","text":"","title":"Services"},{"location":"API-Specifications/coretransaction/#transactions","text":"Transactions service exposes operations related to listing and retrieving details for Transactions.","title":"Transactions"},{"location":"API-Specifications/coretransaction/#listtransactions","text":"rpc ListTransactions( ListTransactionsRequest ) ListTransactionsResponse ListTransactions lists Transactions associated to the Account specified using pagination. The current user must be an authorized user of the Account to invoke this endpoint. Transactions are sorted in descending order of Transaction time. It is possible for this endpoint to return less than the number of items requested by the page_size field of the ListTransactionsRequest parameters ( including returning a page containing 0 items ). It is important that consumers of this API use the next_page_token field of the ListTransactionsResponse object to determine if more data is available or not, as such cases are not abnormal for this endpoint.","title":"ListTransactions"},{"location":"API-Specifications/coretransaction/#api-specific-types_1","text":"","title":"API-specific types"},{"location":"API-Specifications/coretransaction/#internalaccounttransaction","text":"InternalAccountTransaction represents the elements common to any internal Transaction. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching Transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". internal_account_id string The UUID that correlates to the the Internal Account on which the Transaction occurred. transaction_time google.protobuf.Timestamp The UTC timestamp at which the Transaction occurred. amount thebaasco.types.Amount The amount of the Transaction. If the amount is negative, then the transaction is a debit. If the amount if positive, the transaction is a credit. initiating_domain string The name of the domain that can be queried for additional details regarding this Transaction (e.g. core-card, core-transfer or core-banking)","title":"InternalAccountTransaction"},{"location":"API-Specifications/coretransaction/#internalaccounttransactioncreatedevent","text":"InternalAccountTransactionCreatedEvent is an event raised when a Transaction occurs on a given Internal Account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. transaction InternalAccountTransaction The InternalAccountTransaction that caused the event. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"InternalAccountTransactionCreatedEvent"},{"location":"API-Specifications/coretransaction/#listtransactionsrequest","text":"ListTransactionsRequest is a message passed as parameter to the ListTransactions operation. Refer to ListTransactions operation for more details. Field Type Label Description account_id string The ID of the Account to list Transactions for. This value must be a valid UUID, and user must have proper access to the Account. from google.protobuf.Timestamp The UTC timestamp from which to list Transactions. to google.protobuf.Timestamp The UTC timestamp until which to list Transactions. page_size int32 The maximum number of Transactions to retrieve as part of this request. This value needs to be superior, or equal to 1. page_token string When retrieving page other than the initial page, the value for the page_token must be specified, and taken from the previous page's next_page_token value (see ListTransactionsResponse). When no value is specified, then the initial page will be returned.","title":"ListTransactionsRequest"},{"location":"API-Specifications/coretransaction/#listtransactionsresponse","text":"ListTransactionsResponse is a message returned in response to the ListTransactions operation. Field Type Label Description transactions Transaction repeated The requested list of Transactions. next_page_token string The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see ListTransactionsRequest). When no value is returned in this field, then no further data exists to be listed.","title":"ListTransactionsResponse"},{"location":"API-Specifications/coretransaction/#transaction","text":"Transaction represents the elements common to any Transaction. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching Transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". account_id string The ID of the Account on which the Transaction occurred. This will always be a valid UUID. transaction_time google.protobuf.Timestamp The UTC timestamp at which the Transaction was inserted to the postings ledger amount thebaasco.types.Amount The amount of the Transaction. If the amount is negative, then the transaction is a debit. If the amount if positive, the transaction is a credit. balance thebaasco.types.Balance The resulting Balance of the Account after the Transaction has been processed. Warning: This value does not reflect the current Balance of the Account, just the balance following the transaction (since more recent Transactions might have occurred that also impacted the Account's balance) account_domain string The name of the domain that can be queried for additional details regarding the Account of this transaction (e.g. core-banking) initiating_domain string The name of the domain that can be queried for additional details regarding this Transaction (e.g. core-card, core-transfer or core-banking)","title":"Transaction"},{"location":"API-Specifications/coretransaction/#transactioncreatedevent","text":"TransactionCreatedEvent is an event raised when a Transaction occurs on a given Account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. transaction Transaction The Transaction that caused the event. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"TransactionCreatedEvent"},{"location":"API-Specifications/coretransaction/#shared-types","text":"","title":"Shared types"},{"location":"API-Specifications/coretransaction/#amount","text":"Global types / Amount","title":"Amount"},{"location":"API-Specifications/coretransaction/#balance","text":"Global types / Balance","title":"Balance"},{"location":"API-Specifications/coretransaction/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/coretransfer/","text":"Core Transfers API \u00b6 coretransfer_v1_interacregistration.proto \u00b6 Services \u00b6 AutodepositRegistrations \u00b6 AutodepositRegistrations service exposes synchronous endpoints used to list/retrieve Autodeposit Account Alias Registrations This service must be called with a valid user authentication Unauthenticated calls will generate an error with status code UNAUTHENTICATED ListAutodepositRegistrations \u00b6 rpc ListAutodepositRegistrations( ListAutodepositRegistrationsRequest ) ListAutodepositRegistrationsResponse ListRegistrations lists all Autodeposit Registrations for a given account enforcing that the authorized user has permissions to see them. For illustration purposes, users with permissions to see autodeposit registrations include the account owner and possibly the authorized users of that account The function returns an empty list if no registrations are found that match the conditions above Calls made with a non-existent account ID or unauthorized account ID, generate an error with status code INVALID_ARGUMENT desc: \"account number is invalid\" AutodepositRegistrationsCommands \u00b6 AutodepositRegistrationsCommands is a key component of Core Transfers API that exposes asynchronous operations that alter the state of a Interac autodeposit registrations. It is not directly accessible by consumers as a gRPC service, it instead uses Google PubSub as delivery mechanism for requests and responses. We include it in the documentation as a reference for a better understanding of the responsibilities and API surface of this domain CreateRegistration \u00b6 rpc CreateRegistration( CreateRegistrationRequest ) CreateRegistrationResponse CreateRegistration is an asynchronous function used to create a new Interac account alias registration. An account alias registration allows a customer to receive direct deposits to a selected account given an alias that can be an email or phone number. Performing this operation will generate an asynchronous response of type CreateRegistrationResponse, on the asynchronous command's response topic. When creating the account alias registration, the information contained in the Client-Profile domain for the current user will be used to populate customer profile information created at Interac, e.g. Legal name, address, etc. Different errors can arise when creating account alias registrations. For details see ErrorCodes DeleteRegistration \u00b6 rpc DeleteRegistration( DeleteRegistrationRequest ) DeleteRegistrationResponse DeleteRegistration is an asynchronous function used to initiate the deletion/deactivation of an existing Interac account alias registration. Performing this operation will generate an asynchronous response of type DeleteRegistrationResponse on the asynchronous command's response topic. Deleting an account alias registration will invalidate/inactivate the link between an account alias handle (email/phone) and an account, so that the account will no longer receive deposits automatically when sent using the given alias. At that moment, the customer is free to use the same alias handle to create a new registration pointing to the same or a different account. UpdateRegistration \u00b6 rpc UpdateRegistration( UpdateRegistrationRequest ) UpdateRegistrationResponse UpdateRegistration is an asynchronous function used to initiate the update of an existing Interac account alias registration. Performing this operation will generate an asynchronous response of type UpdateRegistrationResponse on the response topic. When updating the account alias registration, minimal changes are allowed, notably it is meant to change the target account linked to the alias. Notice that it is not possible to change the account alias handle itself (e.g. email/phone number). If more important changes are needed, the customer could always use the delete registration service and start a new account alias from scratch after that. Enums \u00b6 ErrorCodes \u00b6 A Domain-specific list of error codes (For Transfers/Interac) documenting the error situations that could arrive while consuming synchronous or asynchronous APIs In all cases these error codes will be communicated to the consumer in a structured manner within an instance of AppError that will be included within the error status response: status.Status.Details Name Number Description UNSPECIFIED 0 UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. TRANS_INTERAC_INVALID_ACCOUNT 1 TRANS_INTERAC_INVALID_ACCOUNT - Invalid Account. gRPC Code=InvalidArgument. Returned when an account ID passed as argument for a given operation does not resolve to an existing account or the account is not authorized for the caller (e.g. the customer does not own the account) TRANS_INTERAC_ALIAS_IN_USE 2 TRANS_INTERAC_ALIAS_IN_USE - Autodeposit alias in use. gRPC Code==InvalidArgument. Returned while creating an autodeposit registration with an alias (email or phone number) that is already in use by another active registration TRANS_INTERAC_REG_COUNT_EXCEEDED 3 TRANS_INTERAC_REG_COUNT_EXCEEDED - Maximum number of account-alias registrations threshold exceeded. gRPC Code==FailedPrecondition. Returned when the customer has reached the allowed limit for account alias registrations on Interac TRANS_INTERAC_INV_MOB_NUMBER 4 TRANS_INTERAC_INV_MOB_NUMBER - Invalid mobile phone number. gRPC Code==InvalidArgument. Returned during creation of an an account alias registration based on phone number, if Interac does not recognize the phone number as valid. TRANS_INTERAC_INV_MOB_AREACODE 5 TRANS_INTERAC_INV_MOB_AREACODE - Invalid mobile phone area code. gRPC Code==InvalidArgument. Returned during creation of an an account alias registration based on phone number, if Interac does not recognize the phone number area code as valid. API-specific types \u00b6 CreateRegistrationRequest \u00b6 CreateRegistrationRequest is message used to initiate the creation of a new Interac account alias registration. Performing this operation will generate an asynchronous response of type CreateRegistrationResponse, on the response topic. When creating the account alias registration, the information contained in the Client-Profile domain for the current user will be used to populate customer profile information created at Interac, e.g. Legal name, address, etc. Different errors can arise when creating account alias registrations. For details see ErrorCodes Field Type Label Description registration Registration CreateRegistrationResponse \u00b6 CreateRegistrationResponse is a wrapper model used to contain the result of a create account alias registration operation Field Type Label Description registration Registration Registration is the newly created registration, returned to the consumer for reference of the registration's current status and expiration date In case some feedback message needs to be presented to the user with that information DeleteRegistrationRequest \u00b6 DeleteRegistrationRequest is message used to initiate the deletion/deactivation of an existing Interac account alias registration. Performing this operation will generate an asynchronous response of type DeleteRegistrationResponse on the response topic. Deleting an account alias registration will invalidate/inactivate the link between an account alias handle (email/phone) and an account, so that the account will no longer receive deposits automatically when sent using the given alias. At that moment, the customer is free to use the same alias handle to create a new registration pointing to the same or a different account. Errors, for more details see ErrorCodes - AppError: code=TRANS_INTERAC_INVALID_ACCOUNT if the account ID passed as argument is not owned or authorized for the current user. - AppError: type=codes.Unauthorized if the registration ID passed as argument is not owned by the current user. - AppError: type codes.Internal, code=GEN_INTERNAL if there is an unexpected error while processing the request, e.g. the execution of the operation on Interac's systems returns an unexpected error. Field Type Label Description registration_id string DeleteRegistrationResponse \u00b6 DeleteRegistrationResponse is a wrapper model used to contain the result of a delete account alias registration operation Field Type Label Description registration Registration InteracRegistrationCompletedEvent \u00b6 Business event produced when an Interac account alias registration is created Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. registration_id string Identifier of the account alias registration created individual_party_id string Identifier of the customer for which this account alias was created expiry_date google.protobuf.Timestamp Expiration date of the account alias account_id string Account for which the alias was created alias_email string alias_phone_number PhoneNumber event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. ListAutodepositRegistrationsRequest \u00b6 ListRegistrationsRequest is a message passed as argument to the ListRegistrations operation. Field Type Label Description account_id string The Account ID for the Registrations that are to be listed. Must be a valid UUID. Must be an existing account owned by or authorized for the current user ListAutodepositRegistrationsResponse \u00b6 ListRegistrationsResponse is a message returned in response to the ListRegistrations operation. Field Type Label Description Registrations Registration repeated The requested list of Registrations. Will be empty if no registrations exist PhoneNumber \u00b6 Model that represents a valid phone number Field Type Label Description phone_number string Registration \u00b6 Model that contains the data of an Interac account alias registration Field Type Label Description registration_id string The unique identifier of this registration Output only. expiry_date google.protobuf.Timestamp UTC point in time after which this account alias registration expires No transfer will succeed if sent through the given alias (email/phone) past this date Output only. account_id string Unique identifier of the account whose alias this registration involves alias_email string alias_phone_number PhoneNumber UpdateRegistrationRequest \u00b6 UpdateRegistrationRequest is message used to initiate the update of an existing Interac account alias registration. Performing this operation will generate an asynchronous response of type UpdateRegistrationResponse on the response topic. When updating the account alias registration, minimal changes are allowed, notably it is meant to change the target account linked to the alias. Notice that it is not possible to change the account alias handle itself (e.g. email/phone number). If more important changes are needed, the customer could always use the delete registration service and start a new account alias from scratch after that. Errors, for more details see ErrorCodes - AppError: type=codes.InvalidArgument, code=TRANS_INTERAC_INVALID_ACCOUNT if the account ID passed as argument is not owned or authorized for the current user. - AppError: type=codes.Unauthorized if the registration ID passed as argument is not owned by the current user. - AppError: type codes.Internal, code=GEN_INTERNAL if there is an unexpected error while processing the request, e.g. the execution of the operation on Interac's systems returns an unexpected error. Field Type Label Description registration_id string account_id string UpdateRegistrationResponse \u00b6 UpdateRegistrationResponse is a wrapper model used to contain the result of an update account alias registration operation Field Type Label Description registration Registration coretransfer_v1_remittance.proto \u00b6 API-specific types \u00b6 RemittanceInformation \u00b6 RemittanceInformation includes additional information provided by the sender giving context for a transfer for instance, a transfer may be sent to a business by one of its clients in order to pay for a bill, the remittance data will include a reference to that bill payment Remittance data could be unstructured or structured or both. Unstructured remittance data is a free-format text of up to 420 characters, e.g. the notes that clients put on a regular Interac transfer Structured remittance data is packaged as a json payload which is a variant of the ISO20022 standard for remittance data (originally defined as XML) For illustration purposes, a sample structured payload looks like this: [ { \"referred_document_information\": [ { \"type\": { \"code_or_proprietary\": { \"code\": \"MSIN\" } }, \"number\": \"4U1LH53P0R68OFFL0PN0NT4QOCFW4QUVJVE\", \"related_date\": \"2021-08-19\" } ], \"referred_document_amount\": { ... }, \"creditor_reference_information\": { ... }, \"invoicer\": { ... }, \"invoicee\": { ... }, \"additional_remittance_information\": [ \"Deposit Req\" ] }, ] Field Type Label Description unstructured Unstructured structured Structured Structured \u00b6 StructuredRemittance is a container of an json version of an ISO20022 structured remittance data block The root of the object is an array that can contain up to 5 remittance document instances. TODO: Update with details of this structure once the documentation is available in our public site Field Type Label Description data string JSON content for this structured remittance data The max size has been estimated assuming 5 instances of remittance documents, each one filled with all possible fields set to test values with their max documented length Unstructured \u00b6 UnstructuredRemittance data is comprised of up to 3 sender-provided strings with no more than 140 characters per string. Field Type Label Description data string coretransfer_v1_incoming_interac_transfer.proto \u00b6 Services \u00b6 IncomingInteracTransfers \u00b6 IncomingInteracTransfers service exposes synchronous endpoints used to retrieve details of an incoming Q&A transfer and to authenticate the transfer This service must be called with a valid user authentication Unauthenticated calls will generate an error with status code UNAUTHENTICATED GetIncomingTransferDetails \u00b6 rpc GetIncomingTransferDetails( GetIncomingTransferDetailsRequest ) GetIncomingTransferDetailsResponse GetIncomingTransferDetails retrieves the details and state of an incoming Interac Q&A transfer An error with error code TRANS_INTERAC_INVALID_TRANSFER desc: \"payment number is invalid\" will be generated in the following scenarios: - calls made with a non-existent interac_payment_number An error with error code TRANS_INTERAC_INCONSISTENT_CUSTOMER desc: \"Transfer was previously authenticated with a different customer ID\" will be generated when: - calls made with a different customer than was previously authenticated Enums \u00b6 HashAlgorithm \u00b6 HashAlgorithm represents the algorithm that must be used when hashing a security answer Name Number Description HASH_ALGORITHM_UNSPECIFIED 0 INCOMING_TRANSFER_STATUS_UNSPECIFIED is reserved for error detection purposes. It should not be used directly. SHA256 1 SHA256 - The SHA-256 hash algorithm. IncomingTransferErrorCodes \u00b6 A Domain-specific list of error codes (For Transfers/Interac) documenting the error situations that could arrive while consuming synchronous or asynchronous APIs In all cases these error codes will be communicated to the consumer in a structured manner within an instance of AppError (see https://github.com/thebaasco/api-contracts/tree/master/proto/types/errordetails) that will be included within the error status response: status.Status.Details Name Number Description UNSPECIFIED 0 UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. TRANS_INTERAC_INVALID_TRANSFER 1 TRANS_INTERAC_INVALID_TRANSFER - Transfer does not exist. gRPC Code=InvalidArgument. Returned when an Interac payment number passed as argument for a given operation does not resolve to a transfer or, in the case of a complete transfer operation, the user does not have access to the target account. TRANS_INTERAC_ALREADY_CANCELLED 2 TRANS_INTERAC_ALREADY_CANCELLED - Operation cannot be performed due to state of the transfer. gRPC Code==FailedPrecondition. Returned when attempting to authenticate a transfer that has already been canceled. TRANS_INTERAC_ALREADY_ACCEPTED 3 TRANS_INTERAC_ALREADY_ACCEPTED - Operation cannot be performed due to the state of the transfer. gRPC Code==FailedPrecondition. Returned when attempting to authenticate a transfer that has already been accepted. TRANS_INTERAC_PREVIOUS_TRANSFER_IN_PROGRESS 4 TRANS_INTERAC_PREVIOUS_TRANSFER_IN_PROGRESS - A previous transaction between this sender and recipient has not been completed. gRPC Code==FailedPrecondition. Returned when there already exists a transfer between sender and recipient that has not been completed or canceled. TRANS_INTERAC_INCONSISTENT_CUSTOMER 5 TRANS_INTERAC_INCONSISTENT_CUSTOMER - Transfer was previously authenticated with a different customer ID. gRPC Code==InvalidArgument. Returned when performing any operation a transfer has been authenticated by different customer ID. TRANS_INTERAC_TRANSFER_LIMITS_EXCEEDED 6 TRANS_INTERAC_TRANSFER_LIMITS_EXCEEDED - Rolling or per-transaction limits exceeded . gRPC Code==FailedPrecondition. Returned when the current transfer exceeds the rolling or per-transaction limits configured in the Interac system TRANS_INTERAC_AUTHENTICATION_REQUIRED 7 TRANS_INTERAC_AUTHENTICATION_REQUIRED - Authentication required for transfer . gRPC Code==FailedPrecondition. Returned when attempting to complete an incoming Q&A transfer whose authentication step has not yet been completed successfully. E.g. the user has not provided the correct answer to the security question. IncomingTransferStatus \u00b6 IncomingTransferStatus represents the state of the transfer. Name Number Description INCOMING_TRANSFER_STATUS_UNSPECIFIED 0 INCOMING_TRANSFER_STATUS_UNSPECIFIED is reserved for error detection purposes. It should not be used directly. AVAILABLE 1 AVAILABLE represents that a transfer has not been processed and is in a valid state to be authorized. AUTHORIZED 2 AUTHORIZED represents that a transfer has been authorized and is in a valid state to be accepted or declined. ACCEPTED 3 ACCEPTED represents that a transfer has been accepted. The transfer is complete and deposited into the target account. CANCELED 4 CANCELED represents that a transfer is complete and not deposited to an account. Ways to achieve this state are: if the transfer is canceled by the sender, if the receiver declines the transfer, the transfer has expired, the receiver is unable to authenticate the transfer within the allotted attempts. API-specific types \u00b6 AuthenticateIncomingTransferRequest \u00b6 AuthenticateIncomingTransferRequest is a message used to authenticate an inbound Interac transfer. Performing this operation will generate an asynchronous response of type AuthenticateIncomingTransferResponse, on the response topic. Different errors can arise when completing an incoming transfer. For details see ErrorCodes Field Type Label Description interac_payment_number string The payment number, as provided by Interac, which this request authenticates security_answer string The answer to the security question (as provided by the customer) with the following algorithm performed: - leading and trailing whitespace removed - converted to upper case - appended with the hash salt specified in hash_salt received from GetIncomingTransferDetailsRequest - encoded to ISO-8859-1 - hashed with the algorithm specified in hash_algorithm received from GetIncomingTransferDetailsRequest AuthenticateIncomingTransferResponse \u00b6 AuthenticateIncomingTransferResponse is a wrapper model used to contain the result of a authenticate incoming transfer operation Field Type Label Description interac_payment_number string The payment number, as provided by Interac, which this authentication response pertains to success bool Indicates if the provided response was correct retry_allowed bool In case of an incorrect response (success=false), indicates if the user can try again providing a new answer. CompleteIncomingTransferRequest \u00b6 CompleteIncomingTransferRequest is a message used to complete the deposit of an inbound Interac transfer. Performing this operation will generate an asynchronous response of type CompleteIncomingTransferResponse, on the response topic. When completing the deposit, information contained in the Client-Profile domain for the current user will be used to enrich information sent to Interac to complete the transfer. Different errors can arise when completing an incoming transfer. For details see ErrorCodes Field Type Label Description interac_payment_number string The payment number, as provided by Interac, for which the deposit is being completed target_account_id string Unique identifier that represents the target account ID: - Current customer needs to be the owner or authorized user of the target account. - Target account must be a deposit account. recipient_memo string An optional memo provided by the recipient. This memo will be sent to the sender CompleteIncomingTransferResponse \u00b6 CompleteIncomingTransferResponse is a wrapper model used to contain the result of a complete incoming transfer operation Field Type Label Description interac_payment_number string The payment number, as provided by Interac, for which the transfer is being completed transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). DeclineIncomingTransferRequest \u00b6 DeclineIncomingTransferRequest is a message used to decline the deposit of an inbound Interac transfer. Performing this operation will generate an asynchronous response of type DeclineIncomingTransferResponse, on the response topic. Different errors can arise when declining an incoming transfer. For details see ErrorCodes Field Type Label Description interac_payment_number string The payment number, as provided by Interac, for which the transfer is being declined recipient_memo string An optional memo provided by the recipient. This memo will be sent to the sender DeclineIncomingTransferResponse \u00b6 DeclineIncomingTransferResponse is a wrapper model used to contain the result of a decline incoming transfer operation Field Type Label Description interac_payment_number string The payment number, as provided by Interac, for which the transfer is being declined GetIncomingTransferDetailsRequest \u00b6 GetIncomingTransferDetailsRequest is a message passed as argument to the GetIncomingTransferDetails operation. Field Type Label Description interac_payment_number string The payment number, as provided by Interac, for which to return the details of the transfer GetIncomingTransferDetailsResponse \u00b6 GetIncomingTransferDetailsResponse is a message returned in response to the GetIncomingTransferDetails operation. Field Type Label Description transfer_details IncomingTransferDetails Details of the current state of an incoming transfer IncomingTransferDetails \u00b6 IncomingTransferDetails message contains details about a given inbound Interac transfer. Field Type Label Description interac_payment_number string The payment number, as provided by Interac, which the details of the transfer will be returned for transfer_status IncomingTransferStatus The current status of the transfer transfer_amount thebaasco.types.Amount The amount of the transfer. The amount should be always positive. expiry_date google.protobuf.Timestamp The UTC timestamp when this transfer will expire. initiator_name string The name of who initiated the transfer authentication_required bool Indicates if this transfer requires that the recipient provide a security answer before depositing the transfer into the account security_question string If authentication_required is true, the field contains the security question that the user must provide the answer to in order to deposit the transfer sender_memo string An optional memo provided by the sender hash_salt string The salt which will be appended in Authentication. Will be provided only if authentication_required = true. hash_algorithm HashAlgorithm The algorithm which must be used when hashing the security answer for Authentication. Will be provided only if authentication_required = true. coretransfer_v1_routinginformation.proto \u00b6 Services \u00b6 Routing \u00b6 Routing service provides ability to retrieve the AccountRouting information mapped to an account GetAccountRouting \u00b6 rpc GetAccountRouting( GetAccountRoutingRequest ) AccountRouting GetAccountRouting retrieves the AccountRouting information linked to the account specified. If no AccountRouting is linked to the account, then this operation will return an error with code NOT_FOUND. API-specific types \u00b6 AccountRouting \u00b6 AccountRouting message contains the routing details that is mapped to an account. It corresponds to the Canadian bank routing information, as well as account number. Field Type Label Description transit_number string Transit number is a 5 digits number representing the \"branch\" for traditional banks. In our case, since we are a fully digital financial institution, this number is arbitrary and does not represent branches, or any other partitioning. institution_number string Institution number is a 3 digits number representing the financial institution. account_number string Account number is a 12 digits number that uniquely represents the account for the associated transit and institution numbers. The 12th digit is a checksum number, following the Luhn algorithm, that can be used to validate during data entry if a number was typed properly. The checksum must be calculated by concatenating all digits of the AccountRouting in the TRANSIT-INSTITUTION-ACCOUNT order i.e. for account routing 11111-222-333333333334, the check digit 4 must be calculated using number 1111122233333333333. AccountRoutingLinkedEvent \u00b6 AccountRoutingLinkedEvent is an event raised when AccountRouting information is linked to an Account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_id string The ID of the Account on which the AccountRouting information was linked. This will be a valid UUID. account_routing AccountRouting The AccountRouting information that was linked to the Account. Refer to AccountRouting message for details. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. account_routing_linked_time google.protobuf.Timestamp The UTC timestamp at which the AccountRouting information was linked to the Account. CreateAccountRoutingRequest \u00b6 CreateAccountRoutingRequest is a message used to perform linking of the provided Account to new AccountRouting information. Performing this operation will generate an asynchronous response of type CreateAccountRoutingResponse, on the response topic. Field Type Label Description account_id string The ID of the Account for which to link new AccountRouting information. This must be a valid UUID, and user must have proper access to the Account. CreateAccountRoutingResponse \u00b6 CreateAccountRoutingResponse is the response to a CreateAccountRoutingRequest. It provides the created AccountRouting information for the requested Account. Field Type Label Description account_id string The ID of the Account on which the AccountRouting information was linked. This will be a valid UUID. account_routing AccountRouting The AccountRouting information that was linked to the Account. Refer to AccountRouting message for details. GetAccountRoutingRequest \u00b6 GetAccountRoutingRequest is a message passed as parameter to the GetAccountRouting operation. Field Type Label Description account_id string The ID of the Account for which to retrieve AccountRouting information. This must be a valid UUID, and user must have proper access to the Account. coretransfer_v1_transaction.proto \u00b6 Services \u00b6 Transfers \u00b6 Transfers service exposes generic synchronous endpoints related to the retrieval of transfers data The same contract will be implemented by subdomains that perform different transfer types e.g. Interac E-transfers, Internal transfers, International transfers etc. In all cases, the concrete service must be called with a valid user authentication Unauthenticated calls will generate an error with status code UNAUTHENTICATED GetTransferDetails \u00b6 rpc GetTransferDetails( GetTransferDetailsRequest ) TransferTransactionDetails GetTransferDetails returns the latest state of a transfer by a given transaction ID. Errors: TransferErrorCodes.TRANS_INVALID_TRANSACTION - If a transaction ID is provided that is not found or resolves to an unauthorized account GenericErrorCodes.GEN_INTERNAL_ERROR - If an unexpected error occurs while processing the request. The error will include a RefNumber which Finaptic can use to investigate the cause. Enums \u00b6 CustomerRole \u00b6 CustomerRole enumeration indicates the role played by the customer. Name Number Description CUSTOMER_ROLE_UNSPECIFIED 0 CUSTOMER_ROLE_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. RECIPIENT 1 RECIPIENT indicates that the customer is the recipient of the transfer operation. INITIATOR 2 INITIATOR indicates that the customer is the initiator of the transfer operation. TransferErrorCodes \u00b6 A Domain-specific list of error codes (For Transfers/Interac) documenting the error situations that could arrive while consuming synchronous or asynchronous APIs In all cases these error codes will be communicated to the consumer in a structured manner within an instance of AppError that will be included within the error status response: status.Status.Details Name Number Description TRANS_ERROR_CODE_UNSPECIFIED 0 UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. TRANS_INVALID_TRANSACTION 1 TRANS_INVALID_TRANSACTION - Invalid Transaction. gRPC Code=InvalidArgument. Returned when a transaction ID passed as argument for a given operation does not resolve to an existing transaction or the account associated with the transaction is not authorized for the caller (e.g. the customer does not own the account) TransferStatus \u00b6 TransferStatus enumeration indicates the processing status of a transaction. Name Number Description TRANSFER_STATUS_UNSPECIFIED 0 TRANSFER_STATUS_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. DECLINED 1 DECLINED indicates that the transfer has been declined and rollback has been performed. When transfer_type is INTERNAL_ACCOUNT_TO_ACCOUNT, this could be due to insufficient funds to initiate the transfer. COMPLETED 2 COMPLETED indicates that the transfer has been successfully completed. PENDING 3 PENDING indicates that the transfer is in an intermediate stage before completion. depending on the type of transfer, for instance, it is used for two-steps transfers to indicate the the initial step(authorization) has taken place but the second step(completion) has not finished yet. TransferType \u00b6 TransferType enumeration indicates the mechanism of transfer used for a transaction. Name Number Description TRANSFER_TYPE_UNSPECIFIED 0 TRANSFER_TYPE_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. INTERNAL_ACCOUNT_TO_ACCOUNT 1 INTERNAL_ACCOUNT_TO_ACCOUNT indicates that the transfer was an Account to Account transfer that did not transit through external systems ( stayed within the institution ). INTERAC_AUTODEPOSIT 2 INTERAC_AUTODEPOSIT indicates that the transfer came through Interac systems, and used the Interac Autodeposit mechanism. API-specific types \u00b6 Counterparty \u00b6 Counterparty contains details about the person/entity on the other side of the transfer. Field Type Label Description legal_name string Legal name of the person/entity on the other side of the transfer. GetTransferDetailsRequest \u00b6 GetTransferDetailsRequest is a message passed as argument to the GetTransferDetails operation. Field Type Label Description transaction_id string The ID of the transaction to get details for. Must be a valid UUID. Must be an existing transaction and the associated account must be owned by or authorized for the user In the case of Interac transfers that happen in two steps (authorization+confirmation), this field could be the transaction ID generated for one of those. Meaning that passing the transaction ID of the authorization step or the confirmation step, will return the corresponding transfer. InitiateTransferRequest \u00b6 InitiateTransferRequest create a transfer fund request between accounts owned by current customer Field Type Label Description source_account_id string Unique identifier that represents the source account ID: - Current customer needs to be owner or authorized user of the source account. - Source account needs to have sufficient available balance and actual balance to be able to initiate the transfer. destination_account_id string Unique identifier that represents the destination account ID: - Current customer needs to be owner or authorized user of the destination account. fund_transfer thebaasco.types.Amount The amount of the fund transfer. The amount should be always positive. InitiateTransferResponse \u00b6 InitiateTransferResponse is the response to InitiateTransferRequest. It contains the details of the transfer. Field Type Label Description details TransferTransactionDetails Details of the transaction with its status (whether the transaction is COMPLETED or DECLINED. See TransferTransactionDetails for more details reason string Empty when status is COMPLETED. Reason why transfer is declined. TransferTransactionDetails \u00b6 TransferTransactionDetails message contains details about a given transaction, relevant and specific to the Core-Transfer domain. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". status TransferStatus The current status of the transfer. See TransferStatus enumeration for details on possible statuses. customer_role CustomerRole The role played by our customer in this transaction. See CustomerRole for details on possible roles. When transfer_type is INTERNAL_ACCOUNT_TO_ACCOUNT, this will always be INITATOR. transfer_type TransferType The type of transfer for this transaction. See TransferType for details on possible types. counterparty Counterparty When transfer_type is INTERAC_AUTODEPOSIT, this will contain the details about the person/entity on the other side of this transfer. When transfer_type is INTERNAL_ACCOUNT_TO_ACCOUNT, this will contain the details of the owner of the destination account. clearing_system_ref_number string Unique identifier assigned to the transaction by the external payment/transfer clearing system When transfer_type is INTERAC_AUTODEPOSIT, it will be set to interac payment number. When transfer_type is INTERNAL_ACCOUNT_TO_ACCOUNT, it will be set to the transaction ID. remittance RemittanceInformation Includes remittance data from this transfer if it contains any TransferTransactionDetailsCreatedEvent \u00b6 TransferTransactionDetailsCreatedEvent event is raised by the Core-Transfer domain when transactions are created and Core-Transfer specific details are available. Field Type Label Description event_id string The unique event ID for this transaction. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. details TransferTransactionDetails The transaction details for this event. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. Shared types \u00b6 Amount \u00b6 Global types / Amount AppError \u00b6 Global types / AppError Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Core Transfers API"},{"location":"API-Specifications/coretransfer/#core-transfers-api","text":"","title":"Core Transfers API"},{"location":"API-Specifications/coretransfer/#coretransfer_v1_interacregistrationproto","text":"","title":"coretransfer_v1_interacregistration.proto"},{"location":"API-Specifications/coretransfer/#services","text":"","title":"Services"},{"location":"API-Specifications/coretransfer/#autodepositregistrations","text":"AutodepositRegistrations service exposes synchronous endpoints used to list/retrieve Autodeposit Account Alias Registrations This service must be called with a valid user authentication Unauthenticated calls will generate an error with status code UNAUTHENTICATED","title":"AutodepositRegistrations"},{"location":"API-Specifications/coretransfer/#listautodepositregistrations","text":"rpc ListAutodepositRegistrations( ListAutodepositRegistrationsRequest ) ListAutodepositRegistrationsResponse ListRegistrations lists all Autodeposit Registrations for a given account enforcing that the authorized user has permissions to see them. For illustration purposes, users with permissions to see autodeposit registrations include the account owner and possibly the authorized users of that account The function returns an empty list if no registrations are found that match the conditions above Calls made with a non-existent account ID or unauthorized account ID, generate an error with status code INVALID_ARGUMENT desc: \"account number is invalid\"","title":"ListAutodepositRegistrations"},{"location":"API-Specifications/coretransfer/#autodepositregistrationscommands","text":"AutodepositRegistrationsCommands is a key component of Core Transfers API that exposes asynchronous operations that alter the state of a Interac autodeposit registrations. It is not directly accessible by consumers as a gRPC service, it instead uses Google PubSub as delivery mechanism for requests and responses. We include it in the documentation as a reference for a better understanding of the responsibilities and API surface of this domain","title":"AutodepositRegistrationsCommands"},{"location":"API-Specifications/coretransfer/#createregistration","text":"rpc CreateRegistration( CreateRegistrationRequest ) CreateRegistrationResponse CreateRegistration is an asynchronous function used to create a new Interac account alias registration. An account alias registration allows a customer to receive direct deposits to a selected account given an alias that can be an email or phone number. Performing this operation will generate an asynchronous response of type CreateRegistrationResponse, on the asynchronous command's response topic. When creating the account alias registration, the information contained in the Client-Profile domain for the current user will be used to populate customer profile information created at Interac, e.g. Legal name, address, etc. Different errors can arise when creating account alias registrations. For details see ErrorCodes","title":"CreateRegistration"},{"location":"API-Specifications/coretransfer/#deleteregistration","text":"rpc DeleteRegistration( DeleteRegistrationRequest ) DeleteRegistrationResponse DeleteRegistration is an asynchronous function used to initiate the deletion/deactivation of an existing Interac account alias registration. Performing this operation will generate an asynchronous response of type DeleteRegistrationResponse on the asynchronous command's response topic. Deleting an account alias registration will invalidate/inactivate the link between an account alias handle (email/phone) and an account, so that the account will no longer receive deposits automatically when sent using the given alias. At that moment, the customer is free to use the same alias handle to create a new registration pointing to the same or a different account.","title":"DeleteRegistration"},{"location":"API-Specifications/coretransfer/#updateregistration","text":"rpc UpdateRegistration( UpdateRegistrationRequest ) UpdateRegistrationResponse UpdateRegistration is an asynchronous function used to initiate the update of an existing Interac account alias registration. Performing this operation will generate an asynchronous response of type UpdateRegistrationResponse on the response topic. When updating the account alias registration, minimal changes are allowed, notably it is meant to change the target account linked to the alias. Notice that it is not possible to change the account alias handle itself (e.g. email/phone number). If more important changes are needed, the customer could always use the delete registration service and start a new account alias from scratch after that.","title":"UpdateRegistration"},{"location":"API-Specifications/coretransfer/#enums","text":"","title":"Enums"},{"location":"API-Specifications/coretransfer/#errorcodes","text":"A Domain-specific list of error codes (For Transfers/Interac) documenting the error situations that could arrive while consuming synchronous or asynchronous APIs In all cases these error codes will be communicated to the consumer in a structured manner within an instance of AppError that will be included within the error status response: status.Status.Details Name Number Description UNSPECIFIED 0 UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. TRANS_INTERAC_INVALID_ACCOUNT 1 TRANS_INTERAC_INVALID_ACCOUNT - Invalid Account. gRPC Code=InvalidArgument. Returned when an account ID passed as argument for a given operation does not resolve to an existing account or the account is not authorized for the caller (e.g. the customer does not own the account) TRANS_INTERAC_ALIAS_IN_USE 2 TRANS_INTERAC_ALIAS_IN_USE - Autodeposit alias in use. gRPC Code==InvalidArgument. Returned while creating an autodeposit registration with an alias (email or phone number) that is already in use by another active registration TRANS_INTERAC_REG_COUNT_EXCEEDED 3 TRANS_INTERAC_REG_COUNT_EXCEEDED - Maximum number of account-alias registrations threshold exceeded. gRPC Code==FailedPrecondition. Returned when the customer has reached the allowed limit for account alias registrations on Interac TRANS_INTERAC_INV_MOB_NUMBER 4 TRANS_INTERAC_INV_MOB_NUMBER - Invalid mobile phone number. gRPC Code==InvalidArgument. Returned during creation of an an account alias registration based on phone number, if Interac does not recognize the phone number as valid. TRANS_INTERAC_INV_MOB_AREACODE 5 TRANS_INTERAC_INV_MOB_AREACODE - Invalid mobile phone area code. gRPC Code==InvalidArgument. Returned during creation of an an account alias registration based on phone number, if Interac does not recognize the phone number area code as valid.","title":"ErrorCodes"},{"location":"API-Specifications/coretransfer/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/coretransfer/#createregistrationrequest","text":"CreateRegistrationRequest is message used to initiate the creation of a new Interac account alias registration. Performing this operation will generate an asynchronous response of type CreateRegistrationResponse, on the response topic. When creating the account alias registration, the information contained in the Client-Profile domain for the current user will be used to populate customer profile information created at Interac, e.g. Legal name, address, etc. Different errors can arise when creating account alias registrations. For details see ErrorCodes Field Type Label Description registration Registration","title":"CreateRegistrationRequest"},{"location":"API-Specifications/coretransfer/#createregistrationresponse","text":"CreateRegistrationResponse is a wrapper model used to contain the result of a create account alias registration operation Field Type Label Description registration Registration Registration is the newly created registration, returned to the consumer for reference of the registration's current status and expiration date In case some feedback message needs to be presented to the user with that information","title":"CreateRegistrationResponse"},{"location":"API-Specifications/coretransfer/#deleteregistrationrequest","text":"DeleteRegistrationRequest is message used to initiate the deletion/deactivation of an existing Interac account alias registration. Performing this operation will generate an asynchronous response of type DeleteRegistrationResponse on the response topic. Deleting an account alias registration will invalidate/inactivate the link between an account alias handle (email/phone) and an account, so that the account will no longer receive deposits automatically when sent using the given alias. At that moment, the customer is free to use the same alias handle to create a new registration pointing to the same or a different account. Errors, for more details see ErrorCodes - AppError: code=TRANS_INTERAC_INVALID_ACCOUNT if the account ID passed as argument is not owned or authorized for the current user. - AppError: type=codes.Unauthorized if the registration ID passed as argument is not owned by the current user. - AppError: type codes.Internal, code=GEN_INTERNAL if there is an unexpected error while processing the request, e.g. the execution of the operation on Interac's systems returns an unexpected error. Field Type Label Description registration_id string","title":"DeleteRegistrationRequest"},{"location":"API-Specifications/coretransfer/#deleteregistrationresponse","text":"DeleteRegistrationResponse is a wrapper model used to contain the result of a delete account alias registration operation Field Type Label Description registration Registration","title":"DeleteRegistrationResponse"},{"location":"API-Specifications/coretransfer/#interacregistrationcompletedevent","text":"Business event produced when an Interac account alias registration is created Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. registration_id string Identifier of the account alias registration created individual_party_id string Identifier of the customer for which this account alias was created expiry_date google.protobuf.Timestamp Expiration date of the account alias account_id string Account for which the alias was created alias_email string alias_phone_number PhoneNumber event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"InteracRegistrationCompletedEvent"},{"location":"API-Specifications/coretransfer/#listautodepositregistrationsrequest","text":"ListRegistrationsRequest is a message passed as argument to the ListRegistrations operation. Field Type Label Description account_id string The Account ID for the Registrations that are to be listed. Must be a valid UUID. Must be an existing account owned by or authorized for the current user","title":"ListAutodepositRegistrationsRequest"},{"location":"API-Specifications/coretransfer/#listautodepositregistrationsresponse","text":"ListRegistrationsResponse is a message returned in response to the ListRegistrations operation. Field Type Label Description Registrations Registration repeated The requested list of Registrations. Will be empty if no registrations exist","title":"ListAutodepositRegistrationsResponse"},{"location":"API-Specifications/coretransfer/#phonenumber","text":"Model that represents a valid phone number Field Type Label Description phone_number string","title":"PhoneNumber"},{"location":"API-Specifications/coretransfer/#registration","text":"Model that contains the data of an Interac account alias registration Field Type Label Description registration_id string The unique identifier of this registration Output only. expiry_date google.protobuf.Timestamp UTC point in time after which this account alias registration expires No transfer will succeed if sent through the given alias (email/phone) past this date Output only. account_id string Unique identifier of the account whose alias this registration involves alias_email string alias_phone_number PhoneNumber","title":"Registration"},{"location":"API-Specifications/coretransfer/#updateregistrationrequest","text":"UpdateRegistrationRequest is message used to initiate the update of an existing Interac account alias registration. Performing this operation will generate an asynchronous response of type UpdateRegistrationResponse on the response topic. When updating the account alias registration, minimal changes are allowed, notably it is meant to change the target account linked to the alias. Notice that it is not possible to change the account alias handle itself (e.g. email/phone number). If more important changes are needed, the customer could always use the delete registration service and start a new account alias from scratch after that. Errors, for more details see ErrorCodes - AppError: type=codes.InvalidArgument, code=TRANS_INTERAC_INVALID_ACCOUNT if the account ID passed as argument is not owned or authorized for the current user. - AppError: type=codes.Unauthorized if the registration ID passed as argument is not owned by the current user. - AppError: type codes.Internal, code=GEN_INTERNAL if there is an unexpected error while processing the request, e.g. the execution of the operation on Interac's systems returns an unexpected error. Field Type Label Description registration_id string account_id string","title":"UpdateRegistrationRequest"},{"location":"API-Specifications/coretransfer/#updateregistrationresponse","text":"UpdateRegistrationResponse is a wrapper model used to contain the result of an update account alias registration operation Field Type Label Description registration Registration","title":"UpdateRegistrationResponse"},{"location":"API-Specifications/coretransfer/#coretransfer_v1_remittanceproto","text":"","title":"coretransfer_v1_remittance.proto"},{"location":"API-Specifications/coretransfer/#api-specific-types_1","text":"","title":"API-specific types"},{"location":"API-Specifications/coretransfer/#remittanceinformation","text":"RemittanceInformation includes additional information provided by the sender giving context for a transfer for instance, a transfer may be sent to a business by one of its clients in order to pay for a bill, the remittance data will include a reference to that bill payment Remittance data could be unstructured or structured or both. Unstructured remittance data is a free-format text of up to 420 characters, e.g. the notes that clients put on a regular Interac transfer Structured remittance data is packaged as a json payload which is a variant of the ISO20022 standard for remittance data (originally defined as XML) For illustration purposes, a sample structured payload looks like this: [ { \"referred_document_information\": [ { \"type\": { \"code_or_proprietary\": { \"code\": \"MSIN\" } }, \"number\": \"4U1LH53P0R68OFFL0PN0NT4QOCFW4QUVJVE\", \"related_date\": \"2021-08-19\" } ], \"referred_document_amount\": { ... }, \"creditor_reference_information\": { ... }, \"invoicer\": { ... }, \"invoicee\": { ... }, \"additional_remittance_information\": [ \"Deposit Req\" ] }, ] Field Type Label Description unstructured Unstructured structured Structured","title":"RemittanceInformation"},{"location":"API-Specifications/coretransfer/#structured","text":"StructuredRemittance is a container of an json version of an ISO20022 structured remittance data block The root of the object is an array that can contain up to 5 remittance document instances. TODO: Update with details of this structure once the documentation is available in our public site Field Type Label Description data string JSON content for this structured remittance data The max size has been estimated assuming 5 instances of remittance documents, each one filled with all possible fields set to test values with their max documented length","title":"Structured"},{"location":"API-Specifications/coretransfer/#unstructured","text":"UnstructuredRemittance data is comprised of up to 3 sender-provided strings with no more than 140 characters per string. Field Type Label Description data string","title":"Unstructured"},{"location":"API-Specifications/coretransfer/#coretransfer_v1_incoming_interac_transferproto","text":"","title":"coretransfer_v1_incoming_interac_transfer.proto"},{"location":"API-Specifications/coretransfer/#services_1","text":"","title":"Services"},{"location":"API-Specifications/coretransfer/#incominginteractransfers","text":"IncomingInteracTransfers service exposes synchronous endpoints used to retrieve details of an incoming Q&A transfer and to authenticate the transfer This service must be called with a valid user authentication Unauthenticated calls will generate an error with status code UNAUTHENTICATED","title":"IncomingInteracTransfers"},{"location":"API-Specifications/coretransfer/#getincomingtransferdetails","text":"rpc GetIncomingTransferDetails( GetIncomingTransferDetailsRequest ) GetIncomingTransferDetailsResponse GetIncomingTransferDetails retrieves the details and state of an incoming Interac Q&A transfer An error with error code TRANS_INTERAC_INVALID_TRANSFER desc: \"payment number is invalid\" will be generated in the following scenarios: - calls made with a non-existent interac_payment_number An error with error code TRANS_INTERAC_INCONSISTENT_CUSTOMER desc: \"Transfer was previously authenticated with a different customer ID\" will be generated when: - calls made with a different customer than was previously authenticated","title":"GetIncomingTransferDetails"},{"location":"API-Specifications/coretransfer/#enums_1","text":"","title":"Enums"},{"location":"API-Specifications/coretransfer/#hashalgorithm","text":"HashAlgorithm represents the algorithm that must be used when hashing a security answer Name Number Description HASH_ALGORITHM_UNSPECIFIED 0 INCOMING_TRANSFER_STATUS_UNSPECIFIED is reserved for error detection purposes. It should not be used directly. SHA256 1 SHA256 - The SHA-256 hash algorithm.","title":"HashAlgorithm"},{"location":"API-Specifications/coretransfer/#incomingtransfererrorcodes","text":"A Domain-specific list of error codes (For Transfers/Interac) documenting the error situations that could arrive while consuming synchronous or asynchronous APIs In all cases these error codes will be communicated to the consumer in a structured manner within an instance of AppError (see https://github.com/thebaasco/api-contracts/tree/master/proto/types/errordetails) that will be included within the error status response: status.Status.Details Name Number Description UNSPECIFIED 0 UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. TRANS_INTERAC_INVALID_TRANSFER 1 TRANS_INTERAC_INVALID_TRANSFER - Transfer does not exist. gRPC Code=InvalidArgument. Returned when an Interac payment number passed as argument for a given operation does not resolve to a transfer or, in the case of a complete transfer operation, the user does not have access to the target account. TRANS_INTERAC_ALREADY_CANCELLED 2 TRANS_INTERAC_ALREADY_CANCELLED - Operation cannot be performed due to state of the transfer. gRPC Code==FailedPrecondition. Returned when attempting to authenticate a transfer that has already been canceled. TRANS_INTERAC_ALREADY_ACCEPTED 3 TRANS_INTERAC_ALREADY_ACCEPTED - Operation cannot be performed due to the state of the transfer. gRPC Code==FailedPrecondition. Returned when attempting to authenticate a transfer that has already been accepted. TRANS_INTERAC_PREVIOUS_TRANSFER_IN_PROGRESS 4 TRANS_INTERAC_PREVIOUS_TRANSFER_IN_PROGRESS - A previous transaction between this sender and recipient has not been completed. gRPC Code==FailedPrecondition. Returned when there already exists a transfer between sender and recipient that has not been completed or canceled. TRANS_INTERAC_INCONSISTENT_CUSTOMER 5 TRANS_INTERAC_INCONSISTENT_CUSTOMER - Transfer was previously authenticated with a different customer ID. gRPC Code==InvalidArgument. Returned when performing any operation a transfer has been authenticated by different customer ID. TRANS_INTERAC_TRANSFER_LIMITS_EXCEEDED 6 TRANS_INTERAC_TRANSFER_LIMITS_EXCEEDED - Rolling or per-transaction limits exceeded . gRPC Code==FailedPrecondition. Returned when the current transfer exceeds the rolling or per-transaction limits configured in the Interac system TRANS_INTERAC_AUTHENTICATION_REQUIRED 7 TRANS_INTERAC_AUTHENTICATION_REQUIRED - Authentication required for transfer . gRPC Code==FailedPrecondition. Returned when attempting to complete an incoming Q&A transfer whose authentication step has not yet been completed successfully. E.g. the user has not provided the correct answer to the security question.","title":"IncomingTransferErrorCodes"},{"location":"API-Specifications/coretransfer/#incomingtransferstatus","text":"IncomingTransferStatus represents the state of the transfer. Name Number Description INCOMING_TRANSFER_STATUS_UNSPECIFIED 0 INCOMING_TRANSFER_STATUS_UNSPECIFIED is reserved for error detection purposes. It should not be used directly. AVAILABLE 1 AVAILABLE represents that a transfer has not been processed and is in a valid state to be authorized. AUTHORIZED 2 AUTHORIZED represents that a transfer has been authorized and is in a valid state to be accepted or declined. ACCEPTED 3 ACCEPTED represents that a transfer has been accepted. The transfer is complete and deposited into the target account. CANCELED 4 CANCELED represents that a transfer is complete and not deposited to an account. Ways to achieve this state are: if the transfer is canceled by the sender, if the receiver declines the transfer, the transfer has expired, the receiver is unable to authenticate the transfer within the allotted attempts.","title":"IncomingTransferStatus"},{"location":"API-Specifications/coretransfer/#api-specific-types_2","text":"","title":"API-specific types"},{"location":"API-Specifications/coretransfer/#authenticateincomingtransferrequest","text":"AuthenticateIncomingTransferRequest is a message used to authenticate an inbound Interac transfer. Performing this operation will generate an asynchronous response of type AuthenticateIncomingTransferResponse, on the response topic. Different errors can arise when completing an incoming transfer. For details see ErrorCodes Field Type Label Description interac_payment_number string The payment number, as provided by Interac, which this request authenticates security_answer string The answer to the security question (as provided by the customer) with the following algorithm performed: - leading and trailing whitespace removed - converted to upper case - appended with the hash salt specified in hash_salt received from GetIncomingTransferDetailsRequest - encoded to ISO-8859-1 - hashed with the algorithm specified in hash_algorithm received from GetIncomingTransferDetailsRequest","title":"AuthenticateIncomingTransferRequest"},{"location":"API-Specifications/coretransfer/#authenticateincomingtransferresponse","text":"AuthenticateIncomingTransferResponse is a wrapper model used to contain the result of a authenticate incoming transfer operation Field Type Label Description interac_payment_number string The payment number, as provided by Interac, which this authentication response pertains to success bool Indicates if the provided response was correct retry_allowed bool In case of an incorrect response (success=false), indicates if the user can try again providing a new answer.","title":"AuthenticateIncomingTransferResponse"},{"location":"API-Specifications/coretransfer/#completeincomingtransferrequest","text":"CompleteIncomingTransferRequest is a message used to complete the deposit of an inbound Interac transfer. Performing this operation will generate an asynchronous response of type CompleteIncomingTransferResponse, on the response topic. When completing the deposit, information contained in the Client-Profile domain for the current user will be used to enrich information sent to Interac to complete the transfer. Different errors can arise when completing an incoming transfer. For details see ErrorCodes Field Type Label Description interac_payment_number string The payment number, as provided by Interac, for which the deposit is being completed target_account_id string Unique identifier that represents the target account ID: - Current customer needs to be the owner or authorized user of the target account. - Target account must be a deposit account. recipient_memo string An optional memo provided by the recipient. This memo will be sent to the sender","title":"CompleteIncomingTransferRequest"},{"location":"API-Specifications/coretransfer/#completeincomingtransferresponse","text":"CompleteIncomingTransferResponse is a wrapper model used to contain the result of a complete incoming transfer operation Field Type Label Description interac_payment_number string The payment number, as provided by Interac, for which the transfer is being completed transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...).","title":"CompleteIncomingTransferResponse"},{"location":"API-Specifications/coretransfer/#declineincomingtransferrequest","text":"DeclineIncomingTransferRequest is a message used to decline the deposit of an inbound Interac transfer. Performing this operation will generate an asynchronous response of type DeclineIncomingTransferResponse, on the response topic. Different errors can arise when declining an incoming transfer. For details see ErrorCodes Field Type Label Description interac_payment_number string The payment number, as provided by Interac, for which the transfer is being declined recipient_memo string An optional memo provided by the recipient. This memo will be sent to the sender","title":"DeclineIncomingTransferRequest"},{"location":"API-Specifications/coretransfer/#declineincomingtransferresponse","text":"DeclineIncomingTransferResponse is a wrapper model used to contain the result of a decline incoming transfer operation Field Type Label Description interac_payment_number string The payment number, as provided by Interac, for which the transfer is being declined","title":"DeclineIncomingTransferResponse"},{"location":"API-Specifications/coretransfer/#getincomingtransferdetailsrequest","text":"GetIncomingTransferDetailsRequest is a message passed as argument to the GetIncomingTransferDetails operation. Field Type Label Description interac_payment_number string The payment number, as provided by Interac, for which to return the details of the transfer","title":"GetIncomingTransferDetailsRequest"},{"location":"API-Specifications/coretransfer/#getincomingtransferdetailsresponse","text":"GetIncomingTransferDetailsResponse is a message returned in response to the GetIncomingTransferDetails operation. Field Type Label Description transfer_details IncomingTransferDetails Details of the current state of an incoming transfer","title":"GetIncomingTransferDetailsResponse"},{"location":"API-Specifications/coretransfer/#incomingtransferdetails","text":"IncomingTransferDetails message contains details about a given inbound Interac transfer. Field Type Label Description interac_payment_number string The payment number, as provided by Interac, which the details of the transfer will be returned for transfer_status IncomingTransferStatus The current status of the transfer transfer_amount thebaasco.types.Amount The amount of the transfer. The amount should be always positive. expiry_date google.protobuf.Timestamp The UTC timestamp when this transfer will expire. initiator_name string The name of who initiated the transfer authentication_required bool Indicates if this transfer requires that the recipient provide a security answer before depositing the transfer into the account security_question string If authentication_required is true, the field contains the security question that the user must provide the answer to in order to deposit the transfer sender_memo string An optional memo provided by the sender hash_salt string The salt which will be appended in Authentication. Will be provided only if authentication_required = true. hash_algorithm HashAlgorithm The algorithm which must be used when hashing the security answer for Authentication. Will be provided only if authentication_required = true.","title":"IncomingTransferDetails"},{"location":"API-Specifications/coretransfer/#coretransfer_v1_routinginformationproto","text":"","title":"coretransfer_v1_routinginformation.proto"},{"location":"API-Specifications/coretransfer/#services_2","text":"","title":"Services"},{"location":"API-Specifications/coretransfer/#routing","text":"Routing service provides ability to retrieve the AccountRouting information mapped to an account","title":"Routing"},{"location":"API-Specifications/coretransfer/#getaccountrouting","text":"rpc GetAccountRouting( GetAccountRoutingRequest ) AccountRouting GetAccountRouting retrieves the AccountRouting information linked to the account specified. If no AccountRouting is linked to the account, then this operation will return an error with code NOT_FOUND.","title":"GetAccountRouting"},{"location":"API-Specifications/coretransfer/#api-specific-types_3","text":"","title":"API-specific types"},{"location":"API-Specifications/coretransfer/#accountrouting","text":"AccountRouting message contains the routing details that is mapped to an account. It corresponds to the Canadian bank routing information, as well as account number. Field Type Label Description transit_number string Transit number is a 5 digits number representing the \"branch\" for traditional banks. In our case, since we are a fully digital financial institution, this number is arbitrary and does not represent branches, or any other partitioning. institution_number string Institution number is a 3 digits number representing the financial institution. account_number string Account number is a 12 digits number that uniquely represents the account for the associated transit and institution numbers. The 12th digit is a checksum number, following the Luhn algorithm, that can be used to validate during data entry if a number was typed properly. The checksum must be calculated by concatenating all digits of the AccountRouting in the TRANSIT-INSTITUTION-ACCOUNT order i.e. for account routing 11111-222-333333333334, the check digit 4 must be calculated using number 1111122233333333333.","title":"AccountRouting"},{"location":"API-Specifications/coretransfer/#accountroutinglinkedevent","text":"AccountRoutingLinkedEvent is an event raised when AccountRouting information is linked to an Account. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. account_id string The ID of the Account on which the AccountRouting information was linked. This will be a valid UUID. account_routing AccountRouting The AccountRouting information that was linked to the Account. Refer to AccountRouting message for details. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. account_routing_linked_time google.protobuf.Timestamp The UTC timestamp at which the AccountRouting information was linked to the Account.","title":"AccountRoutingLinkedEvent"},{"location":"API-Specifications/coretransfer/#createaccountroutingrequest","text":"CreateAccountRoutingRequest is a message used to perform linking of the provided Account to new AccountRouting information. Performing this operation will generate an asynchronous response of type CreateAccountRoutingResponse, on the response topic. Field Type Label Description account_id string The ID of the Account for which to link new AccountRouting information. This must be a valid UUID, and user must have proper access to the Account.","title":"CreateAccountRoutingRequest"},{"location":"API-Specifications/coretransfer/#createaccountroutingresponse","text":"CreateAccountRoutingResponse is the response to a CreateAccountRoutingRequest. It provides the created AccountRouting information for the requested Account. Field Type Label Description account_id string The ID of the Account on which the AccountRouting information was linked. This will be a valid UUID. account_routing AccountRouting The AccountRouting information that was linked to the Account. Refer to AccountRouting message for details.","title":"CreateAccountRoutingResponse"},{"location":"API-Specifications/coretransfer/#getaccountroutingrequest","text":"GetAccountRoutingRequest is a message passed as parameter to the GetAccountRouting operation. Field Type Label Description account_id string The ID of the Account for which to retrieve AccountRouting information. This must be a valid UUID, and user must have proper access to the Account.","title":"GetAccountRoutingRequest"},{"location":"API-Specifications/coretransfer/#coretransfer_v1_transactionproto","text":"","title":"coretransfer_v1_transaction.proto"},{"location":"API-Specifications/coretransfer/#services_3","text":"","title":"Services"},{"location":"API-Specifications/coretransfer/#transfers","text":"Transfers service exposes generic synchronous endpoints related to the retrieval of transfers data The same contract will be implemented by subdomains that perform different transfer types e.g. Interac E-transfers, Internal transfers, International transfers etc. In all cases, the concrete service must be called with a valid user authentication Unauthenticated calls will generate an error with status code UNAUTHENTICATED","title":"Transfers"},{"location":"API-Specifications/coretransfer/#gettransferdetails","text":"rpc GetTransferDetails( GetTransferDetailsRequest ) TransferTransactionDetails GetTransferDetails returns the latest state of a transfer by a given transaction ID. Errors: TransferErrorCodes.TRANS_INVALID_TRANSACTION - If a transaction ID is provided that is not found or resolves to an unauthorized account GenericErrorCodes.GEN_INTERNAL_ERROR - If an unexpected error occurs while processing the request. The error will include a RefNumber which Finaptic can use to investigate the cause.","title":"GetTransferDetails"},{"location":"API-Specifications/coretransfer/#enums_2","text":"","title":"Enums"},{"location":"API-Specifications/coretransfer/#customerrole","text":"CustomerRole enumeration indicates the role played by the customer. Name Number Description CUSTOMER_ROLE_UNSPECIFIED 0 CUSTOMER_ROLE_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. RECIPIENT 1 RECIPIENT indicates that the customer is the recipient of the transfer operation. INITIATOR 2 INITIATOR indicates that the customer is the initiator of the transfer operation.","title":"CustomerRole"},{"location":"API-Specifications/coretransfer/#transfererrorcodes","text":"A Domain-specific list of error codes (For Transfers/Interac) documenting the error situations that could arrive while consuming synchronous or asynchronous APIs In all cases these error codes will be communicated to the consumer in a structured manner within an instance of AppError that will be included within the error status response: status.Status.Details Name Number Description TRANS_ERROR_CODE_UNSPECIFIED 0 UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. TRANS_INVALID_TRANSACTION 1 TRANS_INVALID_TRANSACTION - Invalid Transaction. gRPC Code=InvalidArgument. Returned when a transaction ID passed as argument for a given operation does not resolve to an existing transaction or the account associated with the transaction is not authorized for the caller (e.g. the customer does not own the account)","title":"TransferErrorCodes"},{"location":"API-Specifications/coretransfer/#transferstatus","text":"TransferStatus enumeration indicates the processing status of a transaction. Name Number Description TRANSFER_STATUS_UNSPECIFIED 0 TRANSFER_STATUS_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. DECLINED 1 DECLINED indicates that the transfer has been declined and rollback has been performed. When transfer_type is INTERNAL_ACCOUNT_TO_ACCOUNT, this could be due to insufficient funds to initiate the transfer. COMPLETED 2 COMPLETED indicates that the transfer has been successfully completed. PENDING 3 PENDING indicates that the transfer is in an intermediate stage before completion. depending on the type of transfer, for instance, it is used for two-steps transfers to indicate the the initial step(authorization) has taken place but the second step(completion) has not finished yet.","title":"TransferStatus"},{"location":"API-Specifications/coretransfer/#transfertype","text":"TransferType enumeration indicates the mechanism of transfer used for a transaction. Name Number Description TRANSFER_TYPE_UNSPECIFIED 0 TRANSFER_TYPE_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. INTERNAL_ACCOUNT_TO_ACCOUNT 1 INTERNAL_ACCOUNT_TO_ACCOUNT indicates that the transfer was an Account to Account transfer that did not transit through external systems ( stayed within the institution ). INTERAC_AUTODEPOSIT 2 INTERAC_AUTODEPOSIT indicates that the transfer came through Interac systems, and used the Interac Autodeposit mechanism.","title":"TransferType"},{"location":"API-Specifications/coretransfer/#api-specific-types_4","text":"","title":"API-specific types"},{"location":"API-Specifications/coretransfer/#counterparty","text":"Counterparty contains details about the person/entity on the other side of the transfer. Field Type Label Description legal_name string Legal name of the person/entity on the other side of the transfer.","title":"Counterparty"},{"location":"API-Specifications/coretransfer/#gettransferdetailsrequest","text":"GetTransferDetailsRequest is a message passed as argument to the GetTransferDetails operation. Field Type Label Description transaction_id string The ID of the transaction to get details for. Must be a valid UUID. Must be an existing transaction and the associated account must be owned by or authorized for the user In the case of Interac transfers that happen in two steps (authorization+confirmation), this field could be the transaction ID generated for one of those. Meaning that passing the transaction ID of the authorization step or the confirmation step, will return the corresponding transfer.","title":"GetTransferDetailsRequest"},{"location":"API-Specifications/coretransfer/#initiatetransferrequest","text":"InitiateTransferRequest create a transfer fund request between accounts owned by current customer Field Type Label Description source_account_id string Unique identifier that represents the source account ID: - Current customer needs to be owner or authorized user of the source account. - Source account needs to have sufficient available balance and actual balance to be able to initiate the transfer. destination_account_id string Unique identifier that represents the destination account ID: - Current customer needs to be owner or authorized user of the destination account. fund_transfer thebaasco.types.Amount The amount of the fund transfer. The amount should be always positive.","title":"InitiateTransferRequest"},{"location":"API-Specifications/coretransfer/#initiatetransferresponse","text":"InitiateTransferResponse is the response to InitiateTransferRequest. It contains the details of the transfer. Field Type Label Description details TransferTransactionDetails Details of the transaction with its status (whether the transaction is COMPLETED or DECLINED. See TransferTransactionDetails for more details reason string Empty when status is COMPLETED. Reason why transfer is declined.","title":"InitiateTransferResponse"},{"location":"API-Specifications/coretransfer/#transfertransactiondetails","text":"TransferTransactionDetails message contains details about a given transaction, relevant and specific to the Core-Transfer domain. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". status TransferStatus The current status of the transfer. See TransferStatus enumeration for details on possible statuses. customer_role CustomerRole The role played by our customer in this transaction. See CustomerRole for details on possible roles. When transfer_type is INTERNAL_ACCOUNT_TO_ACCOUNT, this will always be INITATOR. transfer_type TransferType The type of transfer for this transaction. See TransferType for details on possible types. counterparty Counterparty When transfer_type is INTERAC_AUTODEPOSIT, this will contain the details about the person/entity on the other side of this transfer. When transfer_type is INTERNAL_ACCOUNT_TO_ACCOUNT, this will contain the details of the owner of the destination account. clearing_system_ref_number string Unique identifier assigned to the transaction by the external payment/transfer clearing system When transfer_type is INTERAC_AUTODEPOSIT, it will be set to interac payment number. When transfer_type is INTERNAL_ACCOUNT_TO_ACCOUNT, it will be set to the transaction ID. remittance RemittanceInformation Includes remittance data from this transfer if it contains any","title":"TransferTransactionDetails"},{"location":"API-Specifications/coretransfer/#transfertransactiondetailscreatedevent","text":"TransferTransactionDetailsCreatedEvent event is raised by the Core-Transfer domain when transactions are created and Core-Transfer specific details are available. Field Type Label Description event_id string The unique event ID for this transaction. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. details TransferTransactionDetails The transaction details for this event. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"TransferTransactionDetailsCreatedEvent"},{"location":"API-Specifications/coretransfer/#shared-types","text":"","title":"Shared types"},{"location":"API-Specifications/coretransfer/#amount","text":"Global types / Amount","title":"Amount"},{"location":"API-Specifications/coretransfer/#apperror","text":"Global types / AppError","title":"AppError"},{"location":"API-Specifications/coretransfer/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/distribution/","text":"Distribution API \u00b6 notifications_v1.proto \u00b6 Services \u00b6 PushNotifications \u00b6 PushNotifications service exposes operations for push notification of a customer. RegisterChannel \u00b6 rpc RegisterChannel( RegisterPushNotificationChannelRequest ) .google.protobuf.Empty RegisterChannel registers a push notification channel for the specified device. API-specific types \u00b6 RegisterPushNotificationChannelRequest \u00b6 RegisterPushNotificationChannelRequest is a message passed as parameter to the RegisterChannel operation. Field Type Label Description device_id string The device ID for which to register the push notification channel. This can be a unique ID provided by the device vendor or an anonymous sandboxed ID that uniquely represents the device. registration_id string The registration ID for the respective device. This is the registration token generated by the application client. See Firebase documentation for more information (https://firebase.google.com/docs/cloud-messaging/android/client#retrieve-the-current-registration-token). and size recommendations from here https://stackoverflow.com/questions/39959417/what-is-the-maximum-length-of-an-fcm-registration-id-token Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Distribution API"},{"location":"API-Specifications/distribution/#distribution-api","text":"","title":"Distribution API"},{"location":"API-Specifications/distribution/#notifications_v1proto","text":"","title":"notifications_v1.proto"},{"location":"API-Specifications/distribution/#services","text":"","title":"Services"},{"location":"API-Specifications/distribution/#pushnotifications","text":"PushNotifications service exposes operations for push notification of a customer.","title":"PushNotifications"},{"location":"API-Specifications/distribution/#registerchannel","text":"rpc RegisterChannel( RegisterPushNotificationChannelRequest ) .google.protobuf.Empty RegisterChannel registers a push notification channel for the specified device.","title":"RegisterChannel"},{"location":"API-Specifications/distribution/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/distribution/#registerpushnotificationchannelrequest","text":"RegisterPushNotificationChannelRequest is a message passed as parameter to the RegisterChannel operation. Field Type Label Description device_id string The device ID for which to register the push notification channel. This can be a unique ID provided by the device vendor or an anonymous sandboxed ID that uniquely represents the device. registration_id string The registration ID for the respective device. This is the registration token generated by the application client. See Firebase documentation for more information (https://firebase.google.com/docs/cloud-messaging/android/client#retrieve-the-current-registration-token). and size recommendations from here https://stackoverflow.com/questions/39959417/what-is-the-maximum-length-of-an-fcm-registration-id-token","title":"RegisterPushNotificationChannelRequest"},{"location":"API-Specifications/distribution/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/onboarding/","text":"Onboarding API \u00b6 authorizedusers_v1.proto \u00b6 Services \u00b6 AuthorizedUsers \u00b6 AuthorizedUsers service provides a way to retrieve information on invitations sent or received to join an account as an authorized user. GetInvitations \u00b6 rpc GetInvitations( GetAuthorizedUserInvitationsRequest ) GetAuthorizedUserInvitationsResponse GetInvitations returns the list of invitations for the current user. This will include invitations issued by the current user, as well as invitations where the current user is the invited customer. This operation always return all invitations, including invitations that are pending, expired, have been accepted, declined, require confirmation or that have already been completed. Refer to GetAuthorizedUserInvitationsRequest and GetAuthorizedUserInvitationsResponse for details. Enums \u00b6 AuthorizedUserInvitationStatus \u00b6 AuthorizedUserInvitationStatus represents the state of the invitation for a customer to join an account as an Authorized User. Name Number Description AUTHORIZED_USER_INVITATION_STATUS_UNSPECIFIED 0 AUTHORIZED_USER_INVITATION_STATUS_UNSPECIFIED is reserved for error detection purposes. It should not be used directly. PENDING 1 PENDING represents an invitation that is waiting for an accept or decline response from the invited user. ACCEPTED 2 ACCEPTED represents an invitation that was accepted by the invited user, and pending completion by the issuer of the invitation. DECLINED 3 DECLINED represents an invitation that was declined by the invited user. A declined invitation cannot be completed. COMPLETED 4 COMPLETED represents an invitation that was successfully completed by the issuer of the invitation. In this status, the invited customer has successfully joined the account as an Authorized User. EXPIRED 5 EXPIRED represents an invitation that wasn't accepted or declined within the allotted time. An expired invitation cannot be accepted or declined. API-specific types \u00b6 AcceptAuthorizedUserInvitationRequest \u00b6 AcceptAuthorizedUserInvitationRequest is used to perform the asynchronous operation of accepting an invitation issued to the user to join an account as an authorized user. Performing this operation will generate an asynchronous response type of AcceptAuthorizedUserInvitationResponse on the response topic. Errors: - If the current user is not the user the invitation was issued to, then the operation will fail with a PERMISSION_DENIED status code, and provide a message indicating the reason for the conflict. - If the invitation is not in the Pending status, the operation will fail with a FAILED_PRECONDITION status code, and provide a message indicating that status was invalid. - If the invitation has expired, the operation will also fail with a FAILED_PRECONDITION status code, and provide a message indicating that invitation has expired. Field Type Label Description invitation_id string The ID of the invitation to accept. This must be a valid UUID, and represent a valid invitation that was issued to the current user. invitation_metadata AcceptAuthorizedUserInvitationRequest.InvitationMetadataEntry repeated Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter before confirming the invitation. AcceptAuthorizedUserInvitationRequest.InvitationMetadataEntry \u00b6 Field Type Label Description key string value string AcceptAuthorizedUserInvitationResponse \u00b6 AcceptAuthorizedUserInvitationResponse is the response message for AcceptAuthorizedUserInvitationRequest. See AcceptAuthorizedUserInvitationRequest for details. Message intentionally left without fields. AuthorizedUserInvitation \u00b6 AuthorizedUserInvitation is the message that provides information on invitations issued, or received by users. Field Type Label Description invitation_id string The unique identifier of the invitation. This value is required to Accept, Decline, or Confirm invitations. This will always be a valid UUID. issuer_customer_id string The customer ID of the person that issued the invitation. This will always be a valid UUID. invited_customer_id string The customer ID of the person that was invited to join the account as an authorized user. This will always be a valid UUID. In the scenario where the identifier passed in the InviteAuthorizedUserRequest does not map to an existing customer ID, the value of this field will be generated randomly, and verified to not exist in system, as to prevent inferring that the identifier was invalid. account_id string The account ID for which an invitation was sent. This will always be a valid UUID. status AuthorizedUserInvitationStatus The current status of the invitation. Refer to AuthorizedUserInvitationStatus enumeration for details on statuses and meaning. creation_time google.protobuf.Timestamp The time at which the invitation was issued. expiration_time google.protobuf.Timestamp ExpirationTime is the time at which it will no longer be possible for the invited customer to Accept the invitation. invitation_metadata AuthorizedUserInvitation.InvitationMetadataEntry repeated Additional metadata that has been attached to the invitation. This will contain the metadata specified by the last operation on the invitation. AuthorizedUserInvitation.InvitationMetadataEntry \u00b6 Field Type Label Description key string value string AuthorizedUserInvitationAcceptedOrDeclinedEvent \u00b6 AuthorizedUserInvitationAcceptedOrDeclinedEvent is the async event message sent when an authorized user invitation is accepted or declined by the invited customer. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. invitation AuthorizedUserInvitation The details of the invitation that has been accepted or declined. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. AuthorizedUserInvitationConfirmedEvent \u00b6 AuthorizedUserInvitationConfirmedEvent is the async event message sent when an authorized user invitation is confirmed by the issuer. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. invitation AuthorizedUserInvitation The details of the invitation that has been confirmed. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. AuthorizedUserInvitationIssuedEvent \u00b6 AuthorizedUserInvitationIssuedEvent is the async event message sent when an authorized user invitation is issued to a customer. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. invitation AuthorizedUserInvitation The details of the invitation that has been issued. invited_user_id_spoofed bool A flag indicating if the InvitedCustomerId was spoofed as to prevent attacks to determine who are users of our system. If the value is true, then the InvitedCustomerId as part of the Invitation field can be ignored. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. ConfirmAuthorizedUserInvitationRequest \u00b6 ConfirmAuthorizedUserInvitationRequest is used to perform the asynchronous operation of confirming an invitation that was accepted by the invited customer. This operation will result in the invited customer obtaining access to the account as an authorized user. Performing this operation will generate an asynchronous response type of ConfirmAuthorizedUserInvitationResponse on the response topic. Errors: - If the current user is not the issuer of the invitation, then the operation will fail with a PERMISSION_DENIED status code, and provide a message indicating the reason for the conflict. - If the invitation is not in the Accepted status, the operation will fail with a FAILED_PRECONDITION status code, and provide a message indicating that status was invalid. Field Type Label Description invitation_id string The ID of the invitation to confirm. This must be a valid UUID, and represent a valid invitation that was issued by the current user. ConfirmAuthorizedUserInvitationResponse \u00b6 ConfirmAuthorizedUserInvitationResponse is the response message for ConfirmAuthorizedUserInvitationRequest. See ConfirmAuthorizedUserInvitationRequest for details. Message intentionally left without fields. DeclineAuthorizedUserInvitationRequest \u00b6 DeclineAuthorizedUserInvitationRequest is used to perform the asynchronous operation of declining an invitation issued to the user to join an account as an authorized user. Performing this operation will generate an asynchronous response type of DeclineAuthorizedUserInvitationResponse on the response topic. Errors: - If the current user is not the user the invitation was issued to, then the operation will fail with a PERMISSION_DENIED status code, and provide a message indicating the reason for the conflict. - If the invitation is not in the Pending status, the operation will fail with a FAILED_PRECONDITION status code, and provide a message indicating that status was invalid. - If the invitation has expired, the operation will also fail with a FAILED_PRECONDITION status code, and provide a message indicating that invitation has expired. Field Type Label Description invitation_id string The ID of the invitation to decline. This must be a valid UUID, and represent a valid invitation that was issued to the current user. invitation_metadata DeclineAuthorizedUserInvitationRequest.InvitationMetadataEntry repeated Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter when reviewing invitation status. DeclineAuthorizedUserInvitationRequest.InvitationMetadataEntry \u00b6 Field Type Label Description key string value string DeclineAuthorizedUserInvitationResponse \u00b6 DeclineAuthorizedUserInvitationResponse is the response message for DeclineAuthorizedUserInvitationRequest. See DeclineAuthorizedUserInvitationRequest for details. Message intentionally left without fields. GetAuthorizedUserInvitationsRequest \u00b6 GetAuthorizedUserInvitationsRequest has been created to allow expanding the functionalities of the GetInvitations() operation in the future, without introducing breaking change. At this moment, there are no configurable options for this operation. Voluntarily left empty. This structure will be expanded as new features and capabilities are added to the GetInvitations() operation. GetAuthorizedUserInvitationsResponse \u00b6 GetAuthorizedUserInvitationsResponse is the response for the GetInvitations() operation. It will contain all invitations for the current user, independently of their status. This will include invitations for which the current user is the issuer, as well as invitations for which the current user is the invited customer. If there are no invitations for the current user, then the response will contain zero items. Field Type Label Description invitations AuthorizedUserInvitation repeated The list of invitations for the current user. InviteAuthorizedUserRequest \u00b6 InviteAuthorizedUserRequest is used to perform the asynchronous operation of inviting a user to join an account as an authorized user. Performing this operation will generate an asynchronous response type of InviteAuthorizedUserResponse on the response topic. Errors: - If the customer mapping to this identifier is already an Owner or an Authorized User for the account, then the operation will fail with a ALREADY_EXISTS status code, and provide a message indicating the reason for the conflict. - If there is already an invitation that was issued for this account, for the invited user, the operation will fail with an ALREADY_EXISTS status code, and provide a message indicating the reason for the conflict. - If the customer issuing the request isn't an Owner, then the operation will fail with a PERMISSION_DENIED status code, and provide a message indicating the reason. - If there is already an invitation that was issued for this account, for the invited customer, the operation will fail with a ALREADY_EXISTS status code, and provide a message indicating the reason for the conflict. Field Type Label Description invited_customer_identifier string The identifier to be used to lookup for the invited customer. This can either the username, or the email address of the customer to invite. If the identifier does not map to any known user, the operation will succeed, if this occurs the invitation will expire automatically after a period of time, without having been accepted or declined. account_id string The ID of the account on which an authorized user is to be added. This must be a valid UUID, and represent an existing account. In addition, the customer issuing the request must be an Owner for the account. invitation_metadata InviteAuthorizedUserRequest.InvitationMetadataEntry repeated Optional. Additional metadata to attach to the invitation, to be consumed by the invited user before accepting the invitation. InviteAuthorizedUserRequest.InvitationMetadataEntry \u00b6 Field Type Label Description key string value string InviteAuthorizedUserResponse \u00b6 InviteAuthorizedUserResponse is the response message for InviteAuthorizedUserRequest. See InviteAuthorizedUserRequest for details. Field Type Label Description invitation AuthorizedUserInvitation The resulting invitation created by the InviteAuthorizedUserRequest. See AuthorizedUserInvitation for details. onboarding_v1.proto \u00b6 Services \u00b6 Onboarding \u00b6 Onboarding provides a way to upload documents and check the status of an onboarding application. GetApplicationStatus \u00b6 rpc GetApplicationStatus( GetApplicationStatusRequest ) GetApplicationStatusResponse GetApplicationStatus gets the current status of a given onboarding application. It provides a way to handle non-authenticated users' interrupted sessions. See GetApplicationStatusRequest for details. CreateFileUploadURL \u00b6 rpc CreateFileUploadURL( CreateFileUploadUrlRequest ) CreateFileUploadUrlResponse CreateFileUploadUrl is used as an initial step for the upload of a customer KYC document. 1. The UI will call this operation to generate upload-ready url for each file needed. 2. The UI will perform the upload of each file. 3. The UI will call UploadValidateDocument including file_name of each document along with its corresponding meta-data The filename will be used to match the document's meta-data with the uploaded content in step 2 API-specific types \u00b6 AcceptApplicationRequest \u00b6 AcceptApplicationRequest is used to perform the asynchronous operation of accepting the onboarding application received from the customer. Performing this operation will generate an asynchronous response type of AcceptApplicationResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to accept. AcceptApplicationResponse \u00b6 AcceptApplicationResponse is the response message for AcceptApplicationRequest. See AcceptApplicationRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. AccountUsageDetails \u00b6 AccountUsageDetails is a message for providing the source of funds and purpose for applying for an Account. Field Type Label Description account_purpose string The intended purpose of the Account. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'ACCOUNT_PURPOSE'. e.g. 'ACCOUNT_PURPOSE_EVERYDAY_TRANSACTIONS' or 'ACCOUNT_PURPOSE_TRAVELLING' primary_source_of_funds string repeated A collection of the primary sources of funds for the Account. At least one value is required. The values stored here are a collection of the code values retrieved from the ReferenceDataService with data_type set to 'SOURCE_OF_FUNDS'. e.g. 'PRIMARY_SOURCE_OF_FUNDS_LOANS' or 'PRIMARY_SOURCE_OF_FUNDS_GIFTS' authorized_third_party_usage bool Indicates wether or not the account will be used on behalf of third parties not otherwise identified as owners or authorized users. True means that account will be used on behalf of third parties while false means that account will not be used on behalf of third parties. Address \u00b6 Address is a message for providing a given Address for a customer. Field Type Label Description type string The type of Address being represented. Must be either 'HOME' or 'WORK' (required). This field is validated based on the message this Address is used in. See OnboardingApplication and Employment for required values. organization string The organization name associated with this Address. It is optional and has a maximum of 300 characters. line_1 string The first line of the Address. This value is required and has a maximum of 300 characters. line_2 string The second line of the Address. This value is optional, and has a maximum of 300 characters. line_3 string The third line of the Address. This value is optional, and has a maximum of 300 characters. line_4 string The fourth line of the Address. This value is optional, and has a maximum of 300 characters. line_5 string The fifth line of the Address. This value is optional, and has a maximum of 300 characters. line_6 string The sixth line of the Address. This value is optional, and has a maximum of 300 characters. line_7 string The seventh line of the Address. This value is optional, and has a maximum of 300 characters. line_8 string The eighth line of the Address. This value is optional, and has a maximum of 300 characters. locality string The local sub administrative area such as the municipality or community name. In Canadian and US addresses, this corresponds to the city or town name. This value is optional and has a maximum of 150 characters. e.g. Toronto, Orlando. dependent_locality string The municipality or community name of the major postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. double_dependent_locality string The municipality or community name of the local postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. administrative_area string The name of the first level administrative area. This value is optional and has a maximum of 150 characters. e.g. For US this would be 'State' and Canada this would be 'Province' sub_administrative_area string The name of the second level administrative area. This value is optional and has a maximum of 150 characters. e.g. For a city use 'City', county use 'County', etc. area string The name of country first level administrative subdivision area in the address. For Canada, this is name of the province and for the US this is the name of the State. This field is required and has a maximum of 150 characters. e.g. 'Ontario' or 'New York'. postal_code string The local postal code for routing mail to the address and should contain the ZIP code for US addresses. This field is required and has a maximum of 150 characters. country string The name of the country for the Address. This value is required and has a maximum of 50 characters. CancelApplicationRequest \u00b6 CancelApplicationRequest is used to perform the asynchronous operation of canceling the onboarding application. Performing this operation will generate an asynchronous response type of CancelApplicationResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to create a customer for. CancelApplicationResponse \u00b6 CancelApplicationResponse is the response message for CancelApplicationRequest. See CancelApplicationRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. CommunicationPreferenceDetails \u00b6 CommunicationDetails is a message for providing communication preference details for a customer. Field Type Label Description customer_communication_language string The language in which the customer prefers receiving his communications. The value stored here is one of the values retrieved from the ReferenceDataService with data_type set to 'LANGUAGE'. e.g. 'LANGUAGE_FR_CA' customer_communication_pref string The preferred communication method chosen by the customer. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'COMMUNICATION_PREFERENCE'. e.g. 'COMMUNICATION_PREFERENCES_MOBILE' or 'COMMUNICATION_PREFERENCES_EMAIL' Consent \u00b6 Consent is a message indicating the receipt of a requested customer Consent. Field Type Label Description consent_type string The type of Consent received from the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'CONSENT_TYPE'. e.g. \u2018CONSENT_TYPE_TERMS_OF_USE_OF_APP\u2019 consent_timestamp google.protobuf.Timestamp The UTC timestamp when Consent was received from the customer. document_name_and_version string The name and version of the document in URL format that the customer consented to. view_timestamp google.protobuf.Timestamp The UTC timestamp when the customer viewed the document. ContactDetails \u00b6 ContactDetails is a message for providing the contact details for a customer. Field Type Label Description phone_number string Deprecated. The contact phone number. Deprecated in favor of ContactPhoneNumber. If both are specified in a request, preference will be given to ContactPhoneNumber. In responses and events, if only PhoneNumber was specified, ContactPhoneNumber will assume SMS compatible to be false. customer_email string The contact email address. This value is required and must be in a valid email address format. contact_phone_number thebaasco.types.PhoneNumber The contact phone number. See PhoneNumber type for more details. CreateFileUploadUrlRequest \u00b6 CreateFileUploadUrlRequest is the parameter to pass when calling CreateFileUploadURL. Field Type Label Description onboarding_application_id string The UUID representing the onboarding application that requested a file upload URL. CreateFileUploadUrlResponse \u00b6 CreateFileUploadUrlResponse is the response returned by the CreateFileUploadURL Field Type Label Description filename string The generated name for the file to upload. upload_url string The URL to use to upload the file. CustomerResidency \u00b6 CustomerResidency contains the residency status details of the customer. Field Type Label Description is_canadian_tax_resident bool The Canadian residency status. This is true if the customer is a Canadian resident, false otherwise. other_residences OtherResidence repeated A collection of other countries where the customer has residence. At least one is required if not a Canadian resident. sin_token string A tokenized UUID representation of the customer SIN number. citizenship string The primary or current citizenship of the customer. The format is an ISO 3166 Country alpha-2 code (e.g. US, CA, FR). Disclosure \u00b6 Disclosure is a message indicating customer receipt of a documented Disclosure. Field Type Label Description disclosure_type string The type of Disclosure sent to the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'DISCLOSURE_TYPE'. e.g. 'DISCLOSURE_TYPE_DISCLOSURES_DURING_ISSUANCE_OF_PREPAID_CARD' timestamp google.protobuf.Timestamp The UTC timestamp when the customer viewed the document. document_name_and_version string Name and version of the disclosure document in URL format that the customer viewed. DocumentInfo \u00b6 DocumentInfo is a message containing the details of an onboarding document collected from the customer to prove identity. Field Type Label Description document_type string The type of document used for identification. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'DOCUMENT_TYPE'. e.g. 'DOCUMENT_TYPE_CANADIAN_DRIVERS_LICENSE' or 'DOCUMENT_TYPE_CANADIAN_PASSPORT' document_country string The country the document was issued for. front_image_file_name string The cloud storage file nme of the image taken of the front of the document. (required, file size <4MB) back_image_file_name string The cloud storage file nme of the image taken of the back of the document. (file size <4MB) document_state string The state issuing the document used to identify the applicant. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'STATE_' concatenate with country code retrieved from data_type set to 'COUNTRY'. e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...) Employment \u00b6 Employment defines the details of Employment for the customer being onboarded. Field Type Label Description employment_status string The status of Employment for this entry. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'EMPLOYMENT_STATUS'. e.g. EMPLOYMENT_STATUS_EMPLOYED or EMPLOYMENT_STATUS_RETIRED. employer_name string The full employer name. The value is required and has a maximum of 50 characters. industry string The industry code the Employment is in. This value is required and has a maximum of 50 characters. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'INDUSTRY'. e.g. '236110' for Residential Construction. occupation string The roles and duties the customer performs for the employer. This value is optional and has a maximum of 50 characters. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'OCCUPATION'. If the employment status is 'EMPLOYMENT_STATUS_UNEMPLOYED', 'EMPLOYMENT_STATUS_RETIRED', 'EMPLOYMENT_STATUS_STUDENT_UNEMPLOYED', or 'EMPLOYMENT_STATUS_HOMEMAKER' then the Occupation field must be left empty. e.g. 'OCCUPATION_8255_CONTRACTOR_AND_SUPERVISOR_LANDSCAPING' startDate google.type.Date The month and year the customer started this position. endDate google.type.Date The month and year the customer no longer held this position. work_address Address The Address of the employer. The 'type' field must be set to 'WORK'. Required. work_phone_number string Deprecated. The phone number of the employer. Deprecated in favor of PhoneNumber. If both are specified in a request, preference will be given to PhoneNumber. In responses and events, if only WorkPhoneNumber was specified, PhoneNumber will assume SMS compatible to be false. phone_number thebaasco.types.PhoneNumber The phone number of the employer. See PhoneNumber for more details. FinalizeApplicationCreateCustomerRequest \u00b6 FinalizeApplicationCreateCustomerRequest is used to perform the asynchronous operation of creating the customer for the onboarding application. Performing this operation will generate an asynchronous response type of FinalizeApplicationCreateCustomerResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to create a customer for. FinalizeApplicationCreateCustomerResponse \u00b6 FinalizeApplicationCreateCustomerResponse is the response message for FinalizeApplicationCreateCustomerRequest. See FinalizeApplicationCreateCustomerRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. customer_id string The UUID representing the newly created customer. FinalizeApplicationCreateProductRequest \u00b6 FinalizeApplicationCreateProductRequest is used to perform the asynchronous operation of creating the product for the onboarding application. Performing this operation will generate an asynchronous response type of FinalizeApplicationCreateProductResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to create the product for. FinalizeApplicationCreateProductResponse \u00b6 FinalizeApplicationCreateProductResponse is the response message for FinalizeApplicationCreateProductRequest. See FinalizeApplicationCreateProductRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. products OnboardedProduct repeated The collection of products created. See OnboardedProduct. list of products will be empty for onboarding application without product associated GetApplicationStatusRequest \u00b6 GetApplicationStatusRequest is used to retrieve the current status of the onboarding application. Field Type Label Description application_id string The UUID of the onboarding application to get the status of. GetApplicationStatusResponse \u00b6 GetApplicationStatusResponse is the response message for GetApplicationStatusRequest. See GetApplicationStatusRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. IdentificationDocument \u00b6 IdentificationDocument contains information about the ID document provided during application process. Field Type Label Description id_number thebaasco.types.ProtectedString The number of the document used to identify the applicant, tokenized before being produced. expiry_date thebaasco.types.ProtectedDate The expiry date of the document used to identify the applicant, tokenized before being produced. If expiration date could not be retrieved from the provided ID document, this field will be absent. document_type string The type of document used for identification. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'DOCUMENT_TYPE'. e.g. 'DOCUMENT_TYPE_CANADIAN_DRIVERS_LICENSE' or 'DOCUMENT_TYPE_CANADIAN_PASSPORT' document_country string The country issuing the document used to identify the applicant. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'COUNTRY'. e.g. 'CA' document_state string The state issuing the document used to identify the applicant. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'STATE_' concatenate with country code retrieved from data_type set to 'COUNTRY'. e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...) InitiateApplicationRequest \u00b6 InitiateApplicationRequest is used to perform the asynchronous operation of starting the onboarding application. Performing this operation will generate an asynchronous response type of InitiateApplicationResponse on the response topic. Field Type Label Description bundle_id string The unique identifier of the bundle being applied for. InitiateApplicationResponse \u00b6 InitiateApplicationResponse is the response message for InitiateApplicationRequest. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. is_kyc_needed bool Deprecated. If true validation of customer data (KYC) is needed as part of this onboarding application. If false, customer data has already been validated, and needs to be bypassed ( go straight to AcceptApplicationRequest). Deprecated, use OnboardingOperationResponseDetails.verification_needed instead OnboardedProduct \u00b6 OnboardedProduct is the message representing a single product in the onboarding application. Field Type Label Description product_id string The UUID of the onboarded product. source_domain string The source domain of the onboarded product (eg: core-banking). OnboardingApplication \u00b6 OnboardingApplication is the message containing all of the onboarding details collected from a customer required to apply for a product. Field Type Label Description application_id string The UUID representing a given application. customer_id string The UUID representing the onboarding customer. bundle_id string The unique identifier of the bundled products being applied for. status string The application status. The value here is one of the following. \"UNDEFINED\" is reserved for error detection purposes. It should not be used directly. \"New Application\" describes an Application that has just been created. \"Data Collection\" describes an Application that has successfully performed an Update call or failed a ValidateSelfieRequest or a ValidateDocumentsRequest. \"KYC In Progress\" describes an Application that has successfully performed a ValidateSelfieRequest or ValidateDocumentsRequest. \"KYC Success\" describes an Application that has successfully performed KYC checks as a result of a ValidateApplicationRequest. \"KYC Failed\" describes an Application that has failed KYC as a result of a ValidateApplicationRequest. \"KYC Rejected\" describes an Application that has no remaining KYC attempts. \"Application Accepted\" describes an application that has successfully completed an AcceptApplicationRequest. \"Application Processed\" describes an application that has been successfully completed. \"Application Cancelled\" describes an application that has been cancelled by the customer. \"Application Rejected\" describes an application that has been rejected and cannot be continued. This is used when a more descriptive rejection status is not available. customer_personal_details PersonalDetails The personal details about the customer. See PersonalDetails. customer_contact_details ContactDetails The contact details about the customer. See ContactDetails. account_details AccountUsageDetails The Account usage intentions of the customer. See AccountUsageDetails. customer_employment Employment repeated The employment history for the customer. See Employment. customer_residency CustomerResidency The residency status of the customer. See CustomerResidency. consents Consent repeated The collection of consents received from the customer. See Consent. disclosures Disclosure repeated The collection of disclosures received from the customer. See Disclosure. customer_residence_address Address repeated The collection of resident addresses owned/occupied by the customer. See Address. customer_identification_documents DocumentInfo repeated The collection of documents collected to identify the customer in the KYC process. customer_communication_preference CommunicationPreferenceDetails The communication preference details about the customer. See CommunicationPreferenceDetails. OnboardingApplicationCanceledEvent \u00b6 OnboardingApplicationCanceledEvent is the async event message sent when a customer canceled the onboarding application before completion of the application. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. application_id string The UUID of the onboarding application connected to this event. OnboardingApplicationCustomerOnboardedEvent \u00b6 OnboardingApplicationCustomerOnboardedEvent is an event raised when a customer is created. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. application_id string The UUID of the onboarding application connected to this event. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. OnboardingApplicationDataConfirmedEvent \u00b6 OnboardingApplicationDataConfirmedEvent is the async event message sent when a new customer is onboarded. As part of PB-3330, this event will also occur when onboarding a new product for an existing customer. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. application OnboardingApplication The complete onboarding application for the onboarded customer. See OnboardingApplication. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. id_document IdentificationDocument repeated The de-identified information about the provided ID document if the application has one OnboardingApplicationKYCFailedEvent \u00b6 OnboardingApplicationKYCFailedEvent event is raised when a customer fails KYC validation. The event is published once for each failed validation until exceeding the remaining KYC retries allowed. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. application_id string The UUID of the onboarding application. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. failed_status_codes string repeated The reasons of KYC failure. The values stored here are a collection of the code values retrieved from the ReferenceDataService with data_type set to 'FAILURE_CODE'. image_selfie thebaasco.types.ProtectedBlob Selfie, tokenized before being produced. This field is only populated if applicant is part of a sanctions list document_image_front thebaasco.types.ProtectedBlob Front document image, tokenized before being produced. This field is only populated if applicant is part of a sanctions list document_image_back thebaasco.types.ProtectedBlob Back document image, tokenized before being produced. This field is only populated if applicant is part of a sanctions list OnboardingApplicationProductOnboardedEvent \u00b6 OnboardingApplicationProductOnboardedEvent is the async event message sent when a product is created with the FinalizeApplicationCreateProductRequest. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. application_id string The UUID of the onboarding application connected to this event. products OnboardedProduct repeated The collection of products onboarded. See OnboardedProduct. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. OnboardingApplicationRejectedEvent \u00b6 OnboardingApplicationRejectedEvent event is raised when an application is fully rejected. The event is published one time when the application exceed the remaining KYC retries allowed. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. application_id string The UUID of the onboarding application. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. rejection_status_codes string repeated The reasons of KYC rejection. The values stored here are a collection of the code values retrieved from the ReferenceDataService with data_type set to 'FAILURE_CODE'. image_selfie thebaasco.types.ProtectedBlob Selfie, tokenized before being produced. This field is only populated if applicant is part of a sanctions list document_image_front thebaasco.types.ProtectedBlob Front document image, tokenized before being produced. This field is only populated if applicant is part of a sanctions list document_image_back thebaasco.types.ProtectedBlob Back document image, tokenized before being produced. This field is only populated if applicant is part of a sanctions list OnboardingOperationResponseDetails \u00b6 OnboardingOperationResponseDetails are the common response fields for an onboarding application create or update message. Field Type Label Description application_id string The UUID of the application the response is for. onboarding_application_status string The updated application status. The value here is one of the following. \"UNDEFINED\" is reserved for error detection purposes. It should not be used directly. \"New Application\" describes an Application that has just been created. \"Data Collection\" describes an Application that has successfully performed an Update call or failed a ValidateSelfieRequest or a ValidateDocumentsRequest. \"KYC In Progress\" describes an Application that has successfully performed a ValidateSelfieRequest or ValidateDocumentsRequest. \"KYC Success\" describes an Application that has successfully performed KYC checks as a result of a ValidateApplicationRequest. \"KYC Failed\" describes an Application that has failed KYC as a result of a ValidateApplicationRequest. \"KYC Rejected\" describes an Application that has no remaining KYC attempts. \"Application Accepted\" describes an application that has successfully completed an AcceptApplicationRequest. \"Application Processed\" describes an application that has been successfully completed. \"Application Cancelled\" describes an application that has been cancelled by the customer. \"Application Rejected\" describes an application that has been rejected and cannot be continued. This is used when a more descriptive rejection status is not available. request_status string The success status of the request. request_status_reason string Deprecated. The detailed reason for the request status. Deprecated: Use request_reason_codes instead. is_retry_operation_restricted bool This is for internal use only. Do not use. remaining_allowed_retries int64 The remaining KYC retries allowed. failure_status_codes string repeated The list of codes explaining the reason of the request outcome. This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". The list will otherwise be empty. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'FAILURE_STATUS'. verification_needed OnboardingVerification repeated The array of verifications that will be needed be performed in order to complete the application. Consents TermsAndConditions repeated The list of Consents required as part of this onboarding application. Requirement will be enforced as part of a future release. Disclosures TermsAndConditions repeated The list of Disclosures required as part of this onboarding application Requirement will be enforced as part of a future release. OnboardingVerification \u00b6 OnboardingVerification is a Verification needed for an onboarding application Field Type Label Description name string The name of the OnboardingVerification 'KYC' means this application will perform KYC validation during the validate phase ( ValidateDocumentsRequest, ValidateSelfieRequest and ValidateApplicationRequest) before being able to complete onboarding application. 'ProfileCreation' means that this application requires input of basic customer information, without doing full KYC, before being able to complete onboarding application. 'AccountUsage' means that this application needs to collect Account Usage information using UpdateAccountDetailsRequest before being able to complete onboarding application. required_updates string repeated The list of all Update request that are required as part of this verification (eg : [UpdateAccountDetailsRequest, UpdateConsentsRequest]) OtherResidence \u00b6 OtherResidence is a message for providing alternate countries and places of residence. Field Type Label Description other_residence_country string The country code of the other country of residence. The format is an ISO 3166 Country alpha-2 code (e.g. US, CA, FR). tin_token string A tokenized UUID representation of the unique TIN for the country of residence. Optional. citizenship string The citizenship status in the country of residence. Required if residence country is US or Canada. PersonalDetails \u00b6 PersonalDetails defines a message containing the customer's personal details. Field Type Label Description first_name string The customer first name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. middle_name string The customer middle name. This value is optional and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. last_name string The customer last name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. date_of_birth google.type.Date The customer's date of birth. alias string The customer alias. This value is optional and has a maximum of 20 characters. Accepts alphanumeric input without special characters. TermsAndConditions \u00b6 TermsAndConditions is either a consent or a disclosure. Field Type Label Description document_type string The type of the terms and conditions. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'CONSENT_TYPE' or DISCLOSURE_TYPE . document_name_and_version string The URL of the versioned terms and conditions document the customer needs to review and accept. needed_before_validation bool Whether or not the terms and conditions need to be accepted before calling any of the validate requests. UpdateAccountDetailsRequest \u00b6 UpdateAccountDetailsRequest is used to perform the asynchronous operation of updating the customer account details in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateAccountDetailsResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. account_details AccountUsageDetails The updated account usage details. See AccountUsageDetails. UpdateAccountDetailsResponse \u00b6 UpdateAccountDetailsResponse is the response message for UpdateAccountDetailsRequest. See UpdateAccountDetailsRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. UpdateAddressesRequest \u00b6 UpdateAddressesRequest is used to perform the asynchronous operation of updating the addresses occupied by the customer in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateAddressesResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. addresses Address repeated The collection of addresses occupied by the customer. The address(es) provided cannot be that of a P.O. Box, military base, hospital, or prison. See Address. UpdateAddressesResponse \u00b6 UpdateAddressesResponse is the response message for UpdateAddressesRequest. See UpdateAddressesRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. UpdateCommunicationPreferencesRequest \u00b6 UpdateCommunicationPreferencesRequest is used to perform the asynchronous operation of updating the communication preferences of the customer in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateCommunicationPreferencesResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. customer_communication_pref string The customer communication preference. See CommunicationPrefenceDetails. customer_communication_language string The customer communication language. See CommunicationPrefenceDetails. UpdateCommunicationPreferencesResponse \u00b6 UpdateCommunicationPreferencesResponse is the response message for UpdateCommunicationPreferencesRequest. See UpdateCommunicationPreferencesRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. UpdateConsentsRequest \u00b6 UpdateConsentsRequest is used to perform the asynchronous operation of updating the consents received from the customer for the onboarding application. Performing this operation will generate an asynchronous response type of UpdateConsentsResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. consents Consent repeated The updated collection of consents. See Consent. UpdateConsentsResponse \u00b6 UpdateConsentsResponse is the response message for UpdateConsentsRequest. See UpdateConsentsRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. UpdateContactDetailsRequest \u00b6 UpdateContactDetailsRequest is used to perform the asynchronous operation of updating the customer contact details in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateContactDetailsResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. customer_contact_details ContactDetails The updated contact details. See ContactDetails. UpdateContactDetailsResponse \u00b6 UpdateContactDetailsResponse is the response message for UpdateContactDetailsRequest. See UpdateContactDetailsRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. UpdateCustomerResidencyRequest \u00b6 UpdateCustomerResidencyRequest is used to perform the asynchronous operation of updating the customer residency status in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateCustomerResidencyResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. residency CustomerResidency The customer residency status. See CustomerResidency. UpdateCustomerResidencyResponse \u00b6 UpdateCustomerResidencyResponse is the response message for UpdateCustomerResidencyRequest. See UpdateCustomerResidencyRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. UpdateDisclosuresRequest \u00b6 UpdateDisclosuresRequest is used to perform the asynchronous operation of updating the disclosures received by the customer in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateDisclosuresResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. disclosures Disclosure repeated The updated collection of disclosures. See Disclosure. UpdateDisclosuresResponse \u00b6 UpdateDisclosuresResponse is the response message for UpdateDisclosuresRequest. See UpdateDisclosuresRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. UpdateEmploymentRequest \u00b6 UpdateEmploymentRequest is used to perform the asynchronous operation of updating the customer employment information in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateEmploymentResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. employment_info Employment The updated employment information. See Employment. UpdateEmploymentResponse \u00b6 UpdateEmploymentResponse is the response message for UpdateEmploymentRequest. See UpdateEmploymentRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. UpdatePersonalDetailsRequest \u00b6 UpdatePersonalDetailsRequest is used to perform the asynchronous operation of updating the customer personal details in the onboarding application. Performing this operation will generate an asynchronous response type of UpdatePersonalDetailsResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. customer_personal_details PersonalDetails The updated personal details. UpdatePersonalDetailsResponse \u00b6 UpdatePersonalDetailsResponse is the response message for UpdatePersonalDetailsRequest. See UpdatePersonalDetailsRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. ValidateApplicationRequest \u00b6 ValidateApplicationRequest is used to perform the asynchronous operation of validating the entire onboarding application and all documents received from the customer. Performing this operation will generate an asynchronous response type of ValidateApplicationResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to validate. document_details DocumentInfo repeated If documents are specified in this request and a previous ValidateDocumentsRequest was issued, then the values from this request are taken, and previous request values are ignored. selfie_file_name string If SelfieFileName is not empty and a previous ValidateSelfieRequest was issued, then the value from this request is taken, and previous request value is ignored. ValidateApplicationResponse \u00b6 ValidateApplicationResponse is the response message for ValidateApplicationRequest. See ValidateApplicationRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. ValidateDocumentsRequest \u00b6 ValidateDocumentsRequest is used to perform the asynchronous operation of validating the identification documents received from the customer in the onboarding application. Performing this operation will generate an asynchronous response type of ValidateDocumentsResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to validate. document_details DocumentInfo repeated The collection of documents to validate. See DocumentInfo. ValidateDocumentsResponse \u00b6 ValidateDocumentsResponse is the response message for ValidateDocumentsRequest. See ValidateDocumentsRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. ValidateSelfieRequest \u00b6 ValidateSelfieRequest is used to perform the asynchronous operation of validating the selfie pictures received from the customer in the onboarding application. Performing this operation will generate an asynchronous response type of ValidateSelfieResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to validate. file_name string The name of the selfie file to validate. See OnboardingApplication. ValidateSelfieResponse \u00b6 ValidateSelfieResponse is the response message for ValidateSelfieRequest. See ValidateSelfieRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. Shared types \u00b6 ProtectedBlob \u00b6 Global types / Protected Blob ProtectedDate \u00b6 Global types / Protected Date ProtectedString \u00b6 Global types / Protected String PhoneNumber \u00b6 Global types / Phone Number Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Onboarding API"},{"location":"API-Specifications/onboarding/#onboarding-api","text":"","title":"Onboarding API"},{"location":"API-Specifications/onboarding/#authorizedusers_v1proto","text":"","title":"authorizedusers_v1.proto"},{"location":"API-Specifications/onboarding/#services","text":"","title":"Services"},{"location":"API-Specifications/onboarding/#authorizedusers","text":"AuthorizedUsers service provides a way to retrieve information on invitations sent or received to join an account as an authorized user.","title":"AuthorizedUsers"},{"location":"API-Specifications/onboarding/#getinvitations","text":"rpc GetInvitations( GetAuthorizedUserInvitationsRequest ) GetAuthorizedUserInvitationsResponse GetInvitations returns the list of invitations for the current user. This will include invitations issued by the current user, as well as invitations where the current user is the invited customer. This operation always return all invitations, including invitations that are pending, expired, have been accepted, declined, require confirmation or that have already been completed. Refer to GetAuthorizedUserInvitationsRequest and GetAuthorizedUserInvitationsResponse for details.","title":"GetInvitations"},{"location":"API-Specifications/onboarding/#enums","text":"","title":"Enums"},{"location":"API-Specifications/onboarding/#authorizeduserinvitationstatus","text":"AuthorizedUserInvitationStatus represents the state of the invitation for a customer to join an account as an Authorized User. Name Number Description AUTHORIZED_USER_INVITATION_STATUS_UNSPECIFIED 0 AUTHORIZED_USER_INVITATION_STATUS_UNSPECIFIED is reserved for error detection purposes. It should not be used directly. PENDING 1 PENDING represents an invitation that is waiting for an accept or decline response from the invited user. ACCEPTED 2 ACCEPTED represents an invitation that was accepted by the invited user, and pending completion by the issuer of the invitation. DECLINED 3 DECLINED represents an invitation that was declined by the invited user. A declined invitation cannot be completed. COMPLETED 4 COMPLETED represents an invitation that was successfully completed by the issuer of the invitation. In this status, the invited customer has successfully joined the account as an Authorized User. EXPIRED 5 EXPIRED represents an invitation that wasn't accepted or declined within the allotted time. An expired invitation cannot be accepted or declined.","title":"AuthorizedUserInvitationStatus"},{"location":"API-Specifications/onboarding/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/onboarding/#acceptauthorizeduserinvitationrequest","text":"AcceptAuthorizedUserInvitationRequest is used to perform the asynchronous operation of accepting an invitation issued to the user to join an account as an authorized user. Performing this operation will generate an asynchronous response type of AcceptAuthorizedUserInvitationResponse on the response topic. Errors: - If the current user is not the user the invitation was issued to, then the operation will fail with a PERMISSION_DENIED status code, and provide a message indicating the reason for the conflict. - If the invitation is not in the Pending status, the operation will fail with a FAILED_PRECONDITION status code, and provide a message indicating that status was invalid. - If the invitation has expired, the operation will also fail with a FAILED_PRECONDITION status code, and provide a message indicating that invitation has expired. Field Type Label Description invitation_id string The ID of the invitation to accept. This must be a valid UUID, and represent a valid invitation that was issued to the current user. invitation_metadata AcceptAuthorizedUserInvitationRequest.InvitationMetadataEntry repeated Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter before confirming the invitation.","title":"AcceptAuthorizedUserInvitationRequest"},{"location":"API-Specifications/onboarding/#acceptauthorizeduserinvitationrequestinvitationmetadataentry","text":"Field Type Label Description key string value string","title":"AcceptAuthorizedUserInvitationRequest.InvitationMetadataEntry"},{"location":"API-Specifications/onboarding/#acceptauthorizeduserinvitationresponse","text":"AcceptAuthorizedUserInvitationResponse is the response message for AcceptAuthorizedUserInvitationRequest. See AcceptAuthorizedUserInvitationRequest for details. Message intentionally left without fields.","title":"AcceptAuthorizedUserInvitationResponse"},{"location":"API-Specifications/onboarding/#authorizeduserinvitation","text":"AuthorizedUserInvitation is the message that provides information on invitations issued, or received by users. Field Type Label Description invitation_id string The unique identifier of the invitation. This value is required to Accept, Decline, or Confirm invitations. This will always be a valid UUID. issuer_customer_id string The customer ID of the person that issued the invitation. This will always be a valid UUID. invited_customer_id string The customer ID of the person that was invited to join the account as an authorized user. This will always be a valid UUID. In the scenario where the identifier passed in the InviteAuthorizedUserRequest does not map to an existing customer ID, the value of this field will be generated randomly, and verified to not exist in system, as to prevent inferring that the identifier was invalid. account_id string The account ID for which an invitation was sent. This will always be a valid UUID. status AuthorizedUserInvitationStatus The current status of the invitation. Refer to AuthorizedUserInvitationStatus enumeration for details on statuses and meaning. creation_time google.protobuf.Timestamp The time at which the invitation was issued. expiration_time google.protobuf.Timestamp ExpirationTime is the time at which it will no longer be possible for the invited customer to Accept the invitation. invitation_metadata AuthorizedUserInvitation.InvitationMetadataEntry repeated Additional metadata that has been attached to the invitation. This will contain the metadata specified by the last operation on the invitation.","title":"AuthorizedUserInvitation"},{"location":"API-Specifications/onboarding/#authorizeduserinvitationinvitationmetadataentry","text":"Field Type Label Description key string value string","title":"AuthorizedUserInvitation.InvitationMetadataEntry"},{"location":"API-Specifications/onboarding/#authorizeduserinvitationacceptedordeclinedevent","text":"AuthorizedUserInvitationAcceptedOrDeclinedEvent is the async event message sent when an authorized user invitation is accepted or declined by the invited customer. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. invitation AuthorizedUserInvitation The details of the invitation that has been accepted or declined. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"AuthorizedUserInvitationAcceptedOrDeclinedEvent"},{"location":"API-Specifications/onboarding/#authorizeduserinvitationconfirmedevent","text":"AuthorizedUserInvitationConfirmedEvent is the async event message sent when an authorized user invitation is confirmed by the issuer. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. invitation AuthorizedUserInvitation The details of the invitation that has been confirmed. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"AuthorizedUserInvitationConfirmedEvent"},{"location":"API-Specifications/onboarding/#authorizeduserinvitationissuedevent","text":"AuthorizedUserInvitationIssuedEvent is the async event message sent when an authorized user invitation is issued to a customer. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. invitation AuthorizedUserInvitation The details of the invitation that has been issued. invited_user_id_spoofed bool A flag indicating if the InvitedCustomerId was spoofed as to prevent attacks to determine who are users of our system. If the value is true, then the InvitedCustomerId as part of the Invitation field can be ignored. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"AuthorizedUserInvitationIssuedEvent"},{"location":"API-Specifications/onboarding/#confirmauthorizeduserinvitationrequest","text":"ConfirmAuthorizedUserInvitationRequest is used to perform the asynchronous operation of confirming an invitation that was accepted by the invited customer. This operation will result in the invited customer obtaining access to the account as an authorized user. Performing this operation will generate an asynchronous response type of ConfirmAuthorizedUserInvitationResponse on the response topic. Errors: - If the current user is not the issuer of the invitation, then the operation will fail with a PERMISSION_DENIED status code, and provide a message indicating the reason for the conflict. - If the invitation is not in the Accepted status, the operation will fail with a FAILED_PRECONDITION status code, and provide a message indicating that status was invalid. Field Type Label Description invitation_id string The ID of the invitation to confirm. This must be a valid UUID, and represent a valid invitation that was issued by the current user.","title":"ConfirmAuthorizedUserInvitationRequest"},{"location":"API-Specifications/onboarding/#confirmauthorizeduserinvitationresponse","text":"ConfirmAuthorizedUserInvitationResponse is the response message for ConfirmAuthorizedUserInvitationRequest. See ConfirmAuthorizedUserInvitationRequest for details. Message intentionally left without fields.","title":"ConfirmAuthorizedUserInvitationResponse"},{"location":"API-Specifications/onboarding/#declineauthorizeduserinvitationrequest","text":"DeclineAuthorizedUserInvitationRequest is used to perform the asynchronous operation of declining an invitation issued to the user to join an account as an authorized user. Performing this operation will generate an asynchronous response type of DeclineAuthorizedUserInvitationResponse on the response topic. Errors: - If the current user is not the user the invitation was issued to, then the operation will fail with a PERMISSION_DENIED status code, and provide a message indicating the reason for the conflict. - If the invitation is not in the Pending status, the operation will fail with a FAILED_PRECONDITION status code, and provide a message indicating that status was invalid. - If the invitation has expired, the operation will also fail with a FAILED_PRECONDITION status code, and provide a message indicating that invitation has expired. Field Type Label Description invitation_id string The ID of the invitation to decline. This must be a valid UUID, and represent a valid invitation that was issued to the current user. invitation_metadata DeclineAuthorizedUserInvitationRequest.InvitationMetadataEntry repeated Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter when reviewing invitation status.","title":"DeclineAuthorizedUserInvitationRequest"},{"location":"API-Specifications/onboarding/#declineauthorizeduserinvitationrequestinvitationmetadataentry","text":"Field Type Label Description key string value string","title":"DeclineAuthorizedUserInvitationRequest.InvitationMetadataEntry"},{"location":"API-Specifications/onboarding/#declineauthorizeduserinvitationresponse","text":"DeclineAuthorizedUserInvitationResponse is the response message for DeclineAuthorizedUserInvitationRequest. See DeclineAuthorizedUserInvitationRequest for details. Message intentionally left without fields.","title":"DeclineAuthorizedUserInvitationResponse"},{"location":"API-Specifications/onboarding/#getauthorizeduserinvitationsrequest","text":"GetAuthorizedUserInvitationsRequest has been created to allow expanding the functionalities of the GetInvitations() operation in the future, without introducing breaking change. At this moment, there are no configurable options for this operation. Voluntarily left empty. This structure will be expanded as new features and capabilities are added to the GetInvitations() operation.","title":"GetAuthorizedUserInvitationsRequest"},{"location":"API-Specifications/onboarding/#getauthorizeduserinvitationsresponse","text":"GetAuthorizedUserInvitationsResponse is the response for the GetInvitations() operation. It will contain all invitations for the current user, independently of their status. This will include invitations for which the current user is the issuer, as well as invitations for which the current user is the invited customer. If there are no invitations for the current user, then the response will contain zero items. Field Type Label Description invitations AuthorizedUserInvitation repeated The list of invitations for the current user.","title":"GetAuthorizedUserInvitationsResponse"},{"location":"API-Specifications/onboarding/#inviteauthorizeduserrequest","text":"InviteAuthorizedUserRequest is used to perform the asynchronous operation of inviting a user to join an account as an authorized user. Performing this operation will generate an asynchronous response type of InviteAuthorizedUserResponse on the response topic. Errors: - If the customer mapping to this identifier is already an Owner or an Authorized User for the account, then the operation will fail with a ALREADY_EXISTS status code, and provide a message indicating the reason for the conflict. - If there is already an invitation that was issued for this account, for the invited user, the operation will fail with an ALREADY_EXISTS status code, and provide a message indicating the reason for the conflict. - If the customer issuing the request isn't an Owner, then the operation will fail with a PERMISSION_DENIED status code, and provide a message indicating the reason. - If there is already an invitation that was issued for this account, for the invited customer, the operation will fail with a ALREADY_EXISTS status code, and provide a message indicating the reason for the conflict. Field Type Label Description invited_customer_identifier string The identifier to be used to lookup for the invited customer. This can either the username, or the email address of the customer to invite. If the identifier does not map to any known user, the operation will succeed, if this occurs the invitation will expire automatically after a period of time, without having been accepted or declined. account_id string The ID of the account on which an authorized user is to be added. This must be a valid UUID, and represent an existing account. In addition, the customer issuing the request must be an Owner for the account. invitation_metadata InviteAuthorizedUserRequest.InvitationMetadataEntry repeated Optional. Additional metadata to attach to the invitation, to be consumed by the invited user before accepting the invitation.","title":"InviteAuthorizedUserRequest"},{"location":"API-Specifications/onboarding/#inviteauthorizeduserrequestinvitationmetadataentry","text":"Field Type Label Description key string value string","title":"InviteAuthorizedUserRequest.InvitationMetadataEntry"},{"location":"API-Specifications/onboarding/#inviteauthorizeduserresponse","text":"InviteAuthorizedUserResponse is the response message for InviteAuthorizedUserRequest. See InviteAuthorizedUserRequest for details. Field Type Label Description invitation AuthorizedUserInvitation The resulting invitation created by the InviteAuthorizedUserRequest. See AuthorizedUserInvitation for details.","title":"InviteAuthorizedUserResponse"},{"location":"API-Specifications/onboarding/#onboarding_v1proto","text":"","title":"onboarding_v1.proto"},{"location":"API-Specifications/onboarding/#services_1","text":"","title":"Services"},{"location":"API-Specifications/onboarding/#onboarding","text":"Onboarding provides a way to upload documents and check the status of an onboarding application.","title":"Onboarding"},{"location":"API-Specifications/onboarding/#getapplicationstatus","text":"rpc GetApplicationStatus( GetApplicationStatusRequest ) GetApplicationStatusResponse GetApplicationStatus gets the current status of a given onboarding application. It provides a way to handle non-authenticated users' interrupted sessions. See GetApplicationStatusRequest for details.","title":"GetApplicationStatus"},{"location":"API-Specifications/onboarding/#createfileuploadurl","text":"rpc CreateFileUploadURL( CreateFileUploadUrlRequest ) CreateFileUploadUrlResponse CreateFileUploadUrl is used as an initial step for the upload of a customer KYC document. 1. The UI will call this operation to generate upload-ready url for each file needed. 2. The UI will perform the upload of each file. 3. The UI will call UploadValidateDocument including file_name of each document along with its corresponding meta-data The filename will be used to match the document's meta-data with the uploaded content in step 2","title":"CreateFileUploadURL"},{"location":"API-Specifications/onboarding/#api-specific-types_1","text":"","title":"API-specific types"},{"location":"API-Specifications/onboarding/#acceptapplicationrequest","text":"AcceptApplicationRequest is used to perform the asynchronous operation of accepting the onboarding application received from the customer. Performing this operation will generate an asynchronous response type of AcceptApplicationResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to accept.","title":"AcceptApplicationRequest"},{"location":"API-Specifications/onboarding/#acceptapplicationresponse","text":"AcceptApplicationResponse is the response message for AcceptApplicationRequest. See AcceptApplicationRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"AcceptApplicationResponse"},{"location":"API-Specifications/onboarding/#accountusagedetails","text":"AccountUsageDetails is a message for providing the source of funds and purpose for applying for an Account. Field Type Label Description account_purpose string The intended purpose of the Account. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'ACCOUNT_PURPOSE'. e.g. 'ACCOUNT_PURPOSE_EVERYDAY_TRANSACTIONS' or 'ACCOUNT_PURPOSE_TRAVELLING' primary_source_of_funds string repeated A collection of the primary sources of funds for the Account. At least one value is required. The values stored here are a collection of the code values retrieved from the ReferenceDataService with data_type set to 'SOURCE_OF_FUNDS'. e.g. 'PRIMARY_SOURCE_OF_FUNDS_LOANS' or 'PRIMARY_SOURCE_OF_FUNDS_GIFTS' authorized_third_party_usage bool Indicates wether or not the account will be used on behalf of third parties not otherwise identified as owners or authorized users. True means that account will be used on behalf of third parties while false means that account will not be used on behalf of third parties.","title":"AccountUsageDetails"},{"location":"API-Specifications/onboarding/#address","text":"Address is a message for providing a given Address for a customer. Field Type Label Description type string The type of Address being represented. Must be either 'HOME' or 'WORK' (required). This field is validated based on the message this Address is used in. See OnboardingApplication and Employment for required values. organization string The organization name associated with this Address. It is optional and has a maximum of 300 characters. line_1 string The first line of the Address. This value is required and has a maximum of 300 characters. line_2 string The second line of the Address. This value is optional, and has a maximum of 300 characters. line_3 string The third line of the Address. This value is optional, and has a maximum of 300 characters. line_4 string The fourth line of the Address. This value is optional, and has a maximum of 300 characters. line_5 string The fifth line of the Address. This value is optional, and has a maximum of 300 characters. line_6 string The sixth line of the Address. This value is optional, and has a maximum of 300 characters. line_7 string The seventh line of the Address. This value is optional, and has a maximum of 300 characters. line_8 string The eighth line of the Address. This value is optional, and has a maximum of 300 characters. locality string The local sub administrative area such as the municipality or community name. In Canadian and US addresses, this corresponds to the city or town name. This value is optional and has a maximum of 150 characters. e.g. Toronto, Orlando. dependent_locality string The municipality or community name of the major postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. double_dependent_locality string The municipality or community name of the local postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. administrative_area string The name of the first level administrative area. This value is optional and has a maximum of 150 characters. e.g. For US this would be 'State' and Canada this would be 'Province' sub_administrative_area string The name of the second level administrative area. This value is optional and has a maximum of 150 characters. e.g. For a city use 'City', county use 'County', etc. area string The name of country first level administrative subdivision area in the address. For Canada, this is name of the province and for the US this is the name of the State. This field is required and has a maximum of 150 characters. e.g. 'Ontario' or 'New York'. postal_code string The local postal code for routing mail to the address and should contain the ZIP code for US addresses. This field is required and has a maximum of 150 characters. country string The name of the country for the Address. This value is required and has a maximum of 50 characters.","title":"Address"},{"location":"API-Specifications/onboarding/#cancelapplicationrequest","text":"CancelApplicationRequest is used to perform the asynchronous operation of canceling the onboarding application. Performing this operation will generate an asynchronous response type of CancelApplicationResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to create a customer for.","title":"CancelApplicationRequest"},{"location":"API-Specifications/onboarding/#cancelapplicationresponse","text":"CancelApplicationResponse is the response message for CancelApplicationRequest. See CancelApplicationRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"CancelApplicationResponse"},{"location":"API-Specifications/onboarding/#communicationpreferencedetails","text":"CommunicationDetails is a message for providing communication preference details for a customer. Field Type Label Description customer_communication_language string The language in which the customer prefers receiving his communications. The value stored here is one of the values retrieved from the ReferenceDataService with data_type set to 'LANGUAGE'. e.g. 'LANGUAGE_FR_CA' customer_communication_pref string The preferred communication method chosen by the customer. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'COMMUNICATION_PREFERENCE'. e.g. 'COMMUNICATION_PREFERENCES_MOBILE' or 'COMMUNICATION_PREFERENCES_EMAIL'","title":"CommunicationPreferenceDetails"},{"location":"API-Specifications/onboarding/#consent","text":"Consent is a message indicating the receipt of a requested customer Consent. Field Type Label Description consent_type string The type of Consent received from the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'CONSENT_TYPE'. e.g. \u2018CONSENT_TYPE_TERMS_OF_USE_OF_APP\u2019 consent_timestamp google.protobuf.Timestamp The UTC timestamp when Consent was received from the customer. document_name_and_version string The name and version of the document in URL format that the customer consented to. view_timestamp google.protobuf.Timestamp The UTC timestamp when the customer viewed the document.","title":"Consent"},{"location":"API-Specifications/onboarding/#contactdetails","text":"ContactDetails is a message for providing the contact details for a customer. Field Type Label Description phone_number string Deprecated. The contact phone number. Deprecated in favor of ContactPhoneNumber. If both are specified in a request, preference will be given to ContactPhoneNumber. In responses and events, if only PhoneNumber was specified, ContactPhoneNumber will assume SMS compatible to be false. customer_email string The contact email address. This value is required and must be in a valid email address format. contact_phone_number thebaasco.types.PhoneNumber The contact phone number. See PhoneNumber type for more details.","title":"ContactDetails"},{"location":"API-Specifications/onboarding/#createfileuploadurlrequest","text":"CreateFileUploadUrlRequest is the parameter to pass when calling CreateFileUploadURL. Field Type Label Description onboarding_application_id string The UUID representing the onboarding application that requested a file upload URL.","title":"CreateFileUploadUrlRequest"},{"location":"API-Specifications/onboarding/#createfileuploadurlresponse","text":"CreateFileUploadUrlResponse is the response returned by the CreateFileUploadURL Field Type Label Description filename string The generated name for the file to upload. upload_url string The URL to use to upload the file.","title":"CreateFileUploadUrlResponse"},{"location":"API-Specifications/onboarding/#customerresidency","text":"CustomerResidency contains the residency status details of the customer. Field Type Label Description is_canadian_tax_resident bool The Canadian residency status. This is true if the customer is a Canadian resident, false otherwise. other_residences OtherResidence repeated A collection of other countries where the customer has residence. At least one is required if not a Canadian resident. sin_token string A tokenized UUID representation of the customer SIN number. citizenship string The primary or current citizenship of the customer. The format is an ISO 3166 Country alpha-2 code (e.g. US, CA, FR).","title":"CustomerResidency"},{"location":"API-Specifications/onboarding/#disclosure","text":"Disclosure is a message indicating customer receipt of a documented Disclosure. Field Type Label Description disclosure_type string The type of Disclosure sent to the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'DISCLOSURE_TYPE'. e.g. 'DISCLOSURE_TYPE_DISCLOSURES_DURING_ISSUANCE_OF_PREPAID_CARD' timestamp google.protobuf.Timestamp The UTC timestamp when the customer viewed the document. document_name_and_version string Name and version of the disclosure document in URL format that the customer viewed.","title":"Disclosure"},{"location":"API-Specifications/onboarding/#documentinfo","text":"DocumentInfo is a message containing the details of an onboarding document collected from the customer to prove identity. Field Type Label Description document_type string The type of document used for identification. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'DOCUMENT_TYPE'. e.g. 'DOCUMENT_TYPE_CANADIAN_DRIVERS_LICENSE' or 'DOCUMENT_TYPE_CANADIAN_PASSPORT' document_country string The country the document was issued for. front_image_file_name string The cloud storage file nme of the image taken of the front of the document. (required, file size <4MB) back_image_file_name string The cloud storage file nme of the image taken of the back of the document. (file size <4MB) document_state string The state issuing the document used to identify the applicant. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'STATE_' concatenate with country code retrieved from data_type set to 'COUNTRY'. e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...)","title":"DocumentInfo"},{"location":"API-Specifications/onboarding/#employment","text":"Employment defines the details of Employment for the customer being onboarded. Field Type Label Description employment_status string The status of Employment for this entry. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'EMPLOYMENT_STATUS'. e.g. EMPLOYMENT_STATUS_EMPLOYED or EMPLOYMENT_STATUS_RETIRED. employer_name string The full employer name. The value is required and has a maximum of 50 characters. industry string The industry code the Employment is in. This value is required and has a maximum of 50 characters. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'INDUSTRY'. e.g. '236110' for Residential Construction. occupation string The roles and duties the customer performs for the employer. This value is optional and has a maximum of 50 characters. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'OCCUPATION'. If the employment status is 'EMPLOYMENT_STATUS_UNEMPLOYED', 'EMPLOYMENT_STATUS_RETIRED', 'EMPLOYMENT_STATUS_STUDENT_UNEMPLOYED', or 'EMPLOYMENT_STATUS_HOMEMAKER' then the Occupation field must be left empty. e.g. 'OCCUPATION_8255_CONTRACTOR_AND_SUPERVISOR_LANDSCAPING' startDate google.type.Date The month and year the customer started this position. endDate google.type.Date The month and year the customer no longer held this position. work_address Address The Address of the employer. The 'type' field must be set to 'WORK'. Required. work_phone_number string Deprecated. The phone number of the employer. Deprecated in favor of PhoneNumber. If both are specified in a request, preference will be given to PhoneNumber. In responses and events, if only WorkPhoneNumber was specified, PhoneNumber will assume SMS compatible to be false. phone_number thebaasco.types.PhoneNumber The phone number of the employer. See PhoneNumber for more details.","title":"Employment"},{"location":"API-Specifications/onboarding/#finalizeapplicationcreatecustomerrequest","text":"FinalizeApplicationCreateCustomerRequest is used to perform the asynchronous operation of creating the customer for the onboarding application. Performing this operation will generate an asynchronous response type of FinalizeApplicationCreateCustomerResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to create a customer for.","title":"FinalizeApplicationCreateCustomerRequest"},{"location":"API-Specifications/onboarding/#finalizeapplicationcreatecustomerresponse","text":"FinalizeApplicationCreateCustomerResponse is the response message for FinalizeApplicationCreateCustomerRequest. See FinalizeApplicationCreateCustomerRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. customer_id string The UUID representing the newly created customer.","title":"FinalizeApplicationCreateCustomerResponse"},{"location":"API-Specifications/onboarding/#finalizeapplicationcreateproductrequest","text":"FinalizeApplicationCreateProductRequest is used to perform the asynchronous operation of creating the product for the onboarding application. Performing this operation will generate an asynchronous response type of FinalizeApplicationCreateProductResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to create the product for.","title":"FinalizeApplicationCreateProductRequest"},{"location":"API-Specifications/onboarding/#finalizeapplicationcreateproductresponse","text":"FinalizeApplicationCreateProductResponse is the response message for FinalizeApplicationCreateProductRequest. See FinalizeApplicationCreateProductRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. products OnboardedProduct repeated The collection of products created. See OnboardedProduct. list of products will be empty for onboarding application without product associated","title":"FinalizeApplicationCreateProductResponse"},{"location":"API-Specifications/onboarding/#getapplicationstatusrequest","text":"GetApplicationStatusRequest is used to retrieve the current status of the onboarding application. Field Type Label Description application_id string The UUID of the onboarding application to get the status of.","title":"GetApplicationStatusRequest"},{"location":"API-Specifications/onboarding/#getapplicationstatusresponse","text":"GetApplicationStatusResponse is the response message for GetApplicationStatusRequest. See GetApplicationStatusRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"GetApplicationStatusResponse"},{"location":"API-Specifications/onboarding/#identificationdocument","text":"IdentificationDocument contains information about the ID document provided during application process. Field Type Label Description id_number thebaasco.types.ProtectedString The number of the document used to identify the applicant, tokenized before being produced. expiry_date thebaasco.types.ProtectedDate The expiry date of the document used to identify the applicant, tokenized before being produced. If expiration date could not be retrieved from the provided ID document, this field will be absent. document_type string The type of document used for identification. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'DOCUMENT_TYPE'. e.g. 'DOCUMENT_TYPE_CANADIAN_DRIVERS_LICENSE' or 'DOCUMENT_TYPE_CANADIAN_PASSPORT' document_country string The country issuing the document used to identify the applicant. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'COUNTRY'. e.g. 'CA' document_state string The state issuing the document used to identify the applicant. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'STATE_' concatenate with country code retrieved from data_type set to 'COUNTRY'. e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...)","title":"IdentificationDocument"},{"location":"API-Specifications/onboarding/#initiateapplicationrequest","text":"InitiateApplicationRequest is used to perform the asynchronous operation of starting the onboarding application. Performing this operation will generate an asynchronous response type of InitiateApplicationResponse on the response topic. Field Type Label Description bundle_id string The unique identifier of the bundle being applied for.","title":"InitiateApplicationRequest"},{"location":"API-Specifications/onboarding/#initiateapplicationresponse","text":"InitiateApplicationResponse is the response message for InitiateApplicationRequest. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails. is_kyc_needed bool Deprecated. If true validation of customer data (KYC) is needed as part of this onboarding application. If false, customer data has already been validated, and needs to be bypassed ( go straight to AcceptApplicationRequest). Deprecated, use OnboardingOperationResponseDetails.verification_needed instead","title":"InitiateApplicationResponse"},{"location":"API-Specifications/onboarding/#onboardedproduct","text":"OnboardedProduct is the message representing a single product in the onboarding application. Field Type Label Description product_id string The UUID of the onboarded product. source_domain string The source domain of the onboarded product (eg: core-banking).","title":"OnboardedProduct"},{"location":"API-Specifications/onboarding/#onboardingapplication","text":"OnboardingApplication is the message containing all of the onboarding details collected from a customer required to apply for a product. Field Type Label Description application_id string The UUID representing a given application. customer_id string The UUID representing the onboarding customer. bundle_id string The unique identifier of the bundled products being applied for. status string The application status. The value here is one of the following. \"UNDEFINED\" is reserved for error detection purposes. It should not be used directly. \"New Application\" describes an Application that has just been created. \"Data Collection\" describes an Application that has successfully performed an Update call or failed a ValidateSelfieRequest or a ValidateDocumentsRequest. \"KYC In Progress\" describes an Application that has successfully performed a ValidateSelfieRequest or ValidateDocumentsRequest. \"KYC Success\" describes an Application that has successfully performed KYC checks as a result of a ValidateApplicationRequest. \"KYC Failed\" describes an Application that has failed KYC as a result of a ValidateApplicationRequest. \"KYC Rejected\" describes an Application that has no remaining KYC attempts. \"Application Accepted\" describes an application that has successfully completed an AcceptApplicationRequest. \"Application Processed\" describes an application that has been successfully completed. \"Application Cancelled\" describes an application that has been cancelled by the customer. \"Application Rejected\" describes an application that has been rejected and cannot be continued. This is used when a more descriptive rejection status is not available. customer_personal_details PersonalDetails The personal details about the customer. See PersonalDetails. customer_contact_details ContactDetails The contact details about the customer. See ContactDetails. account_details AccountUsageDetails The Account usage intentions of the customer. See AccountUsageDetails. customer_employment Employment repeated The employment history for the customer. See Employment. customer_residency CustomerResidency The residency status of the customer. See CustomerResidency. consents Consent repeated The collection of consents received from the customer. See Consent. disclosures Disclosure repeated The collection of disclosures received from the customer. See Disclosure. customer_residence_address Address repeated The collection of resident addresses owned/occupied by the customer. See Address. customer_identification_documents DocumentInfo repeated The collection of documents collected to identify the customer in the KYC process. customer_communication_preference CommunicationPreferenceDetails The communication preference details about the customer. See CommunicationPreferenceDetails.","title":"OnboardingApplication"},{"location":"API-Specifications/onboarding/#onboardingapplicationcanceledevent","text":"OnboardingApplicationCanceledEvent is the async event message sent when a customer canceled the onboarding application before completion of the application. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. application_id string The UUID of the onboarding application connected to this event.","title":"OnboardingApplicationCanceledEvent"},{"location":"API-Specifications/onboarding/#onboardingapplicationcustomeronboardedevent","text":"OnboardingApplicationCustomerOnboardedEvent is an event raised when a customer is created. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. application_id string The UUID of the onboarding application connected to this event. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"OnboardingApplicationCustomerOnboardedEvent"},{"location":"API-Specifications/onboarding/#onboardingapplicationdataconfirmedevent","text":"OnboardingApplicationDataConfirmedEvent is the async event message sent when a new customer is onboarded. As part of PB-3330, this event will also occur when onboarding a new product for an existing customer. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. application OnboardingApplication The complete onboarding application for the onboarded customer. See OnboardingApplication. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. id_document IdentificationDocument repeated The de-identified information about the provided ID document if the application has one","title":"OnboardingApplicationDataConfirmedEvent"},{"location":"API-Specifications/onboarding/#onboardingapplicationkycfailedevent","text":"OnboardingApplicationKYCFailedEvent event is raised when a customer fails KYC validation. The event is published once for each failed validation until exceeding the remaining KYC retries allowed. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. application_id string The UUID of the onboarding application. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. failed_status_codes string repeated The reasons of KYC failure. The values stored here are a collection of the code values retrieved from the ReferenceDataService with data_type set to 'FAILURE_CODE'. image_selfie thebaasco.types.ProtectedBlob Selfie, tokenized before being produced. This field is only populated if applicant is part of a sanctions list document_image_front thebaasco.types.ProtectedBlob Front document image, tokenized before being produced. This field is only populated if applicant is part of a sanctions list document_image_back thebaasco.types.ProtectedBlob Back document image, tokenized before being produced. This field is only populated if applicant is part of a sanctions list","title":"OnboardingApplicationKYCFailedEvent"},{"location":"API-Specifications/onboarding/#onboardingapplicationproductonboardedevent","text":"OnboardingApplicationProductOnboardedEvent is the async event message sent when a product is created with the FinalizeApplicationCreateProductRequest. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. application_id string The UUID of the onboarding application connected to this event. products OnboardedProduct repeated The collection of products onboarded. See OnboardedProduct. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"OnboardingApplicationProductOnboardedEvent"},{"location":"API-Specifications/onboarding/#onboardingapplicationrejectedevent","text":"OnboardingApplicationRejectedEvent event is raised when an application is fully rejected. The event is published one time when the application exceed the remaining KYC retries allowed. Field Type Label Description event_id string The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. application_id string The UUID of the onboarding application. tenant_id int32 The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. rejection_status_codes string repeated The reasons of KYC rejection. The values stored here are a collection of the code values retrieved from the ReferenceDataService with data_type set to 'FAILURE_CODE'. image_selfie thebaasco.types.ProtectedBlob Selfie, tokenized before being produced. This field is only populated if applicant is part of a sanctions list document_image_front thebaasco.types.ProtectedBlob Front document image, tokenized before being produced. This field is only populated if applicant is part of a sanctions list document_image_back thebaasco.types.ProtectedBlob Back document image, tokenized before being produced. This field is only populated if applicant is part of a sanctions list","title":"OnboardingApplicationRejectedEvent"},{"location":"API-Specifications/onboarding/#onboardingoperationresponsedetails","text":"OnboardingOperationResponseDetails are the common response fields for an onboarding application create or update message. Field Type Label Description application_id string The UUID of the application the response is for. onboarding_application_status string The updated application status. The value here is one of the following. \"UNDEFINED\" is reserved for error detection purposes. It should not be used directly. \"New Application\" describes an Application that has just been created. \"Data Collection\" describes an Application that has successfully performed an Update call or failed a ValidateSelfieRequest or a ValidateDocumentsRequest. \"KYC In Progress\" describes an Application that has successfully performed a ValidateSelfieRequest or ValidateDocumentsRequest. \"KYC Success\" describes an Application that has successfully performed KYC checks as a result of a ValidateApplicationRequest. \"KYC Failed\" describes an Application that has failed KYC as a result of a ValidateApplicationRequest. \"KYC Rejected\" describes an Application that has no remaining KYC attempts. \"Application Accepted\" describes an application that has successfully completed an AcceptApplicationRequest. \"Application Processed\" describes an application that has been successfully completed. \"Application Cancelled\" describes an application that has been cancelled by the customer. \"Application Rejected\" describes an application that has been rejected and cannot be continued. This is used when a more descriptive rejection status is not available. request_status string The success status of the request. request_status_reason string Deprecated. The detailed reason for the request status. Deprecated: Use request_reason_codes instead. is_retry_operation_restricted bool This is for internal use only. Do not use. remaining_allowed_retries int64 The remaining KYC retries allowed. failure_status_codes string repeated The list of codes explaining the reason of the request outcome. This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". The list will otherwise be empty. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'FAILURE_STATUS'. verification_needed OnboardingVerification repeated The array of verifications that will be needed be performed in order to complete the application. Consents TermsAndConditions repeated The list of Consents required as part of this onboarding application. Requirement will be enforced as part of a future release. Disclosures TermsAndConditions repeated The list of Disclosures required as part of this onboarding application Requirement will be enforced as part of a future release.","title":"OnboardingOperationResponseDetails"},{"location":"API-Specifications/onboarding/#onboardingverification","text":"OnboardingVerification is a Verification needed for an onboarding application Field Type Label Description name string The name of the OnboardingVerification 'KYC' means this application will perform KYC validation during the validate phase ( ValidateDocumentsRequest, ValidateSelfieRequest and ValidateApplicationRequest) before being able to complete onboarding application. 'ProfileCreation' means that this application requires input of basic customer information, without doing full KYC, before being able to complete onboarding application. 'AccountUsage' means that this application needs to collect Account Usage information using UpdateAccountDetailsRequest before being able to complete onboarding application. required_updates string repeated The list of all Update request that are required as part of this verification (eg : [UpdateAccountDetailsRequest, UpdateConsentsRequest])","title":"OnboardingVerification"},{"location":"API-Specifications/onboarding/#otherresidence","text":"OtherResidence is a message for providing alternate countries and places of residence. Field Type Label Description other_residence_country string The country code of the other country of residence. The format is an ISO 3166 Country alpha-2 code (e.g. US, CA, FR). tin_token string A tokenized UUID representation of the unique TIN for the country of residence. Optional. citizenship string The citizenship status in the country of residence. Required if residence country is US or Canada.","title":"OtherResidence"},{"location":"API-Specifications/onboarding/#personaldetails","text":"PersonalDetails defines a message containing the customer's personal details. Field Type Label Description first_name string The customer first name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. middle_name string The customer middle name. This value is optional and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. last_name string The customer last name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. date_of_birth google.type.Date The customer's date of birth. alias string The customer alias. This value is optional and has a maximum of 20 characters. Accepts alphanumeric input without special characters.","title":"PersonalDetails"},{"location":"API-Specifications/onboarding/#termsandconditions","text":"TermsAndConditions is either a consent or a disclosure. Field Type Label Description document_type string The type of the terms and conditions. The value stored here is one of the code values retrieved from the ReferenceDataService with data_type set to 'CONSENT_TYPE' or DISCLOSURE_TYPE . document_name_and_version string The URL of the versioned terms and conditions document the customer needs to review and accept. needed_before_validation bool Whether or not the terms and conditions need to be accepted before calling any of the validate requests.","title":"TermsAndConditions"},{"location":"API-Specifications/onboarding/#updateaccountdetailsrequest","text":"UpdateAccountDetailsRequest is used to perform the asynchronous operation of updating the customer account details in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateAccountDetailsResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. account_details AccountUsageDetails The updated account usage details. See AccountUsageDetails.","title":"UpdateAccountDetailsRequest"},{"location":"API-Specifications/onboarding/#updateaccountdetailsresponse","text":"UpdateAccountDetailsResponse is the response message for UpdateAccountDetailsRequest. See UpdateAccountDetailsRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"UpdateAccountDetailsResponse"},{"location":"API-Specifications/onboarding/#updateaddressesrequest","text":"UpdateAddressesRequest is used to perform the asynchronous operation of updating the addresses occupied by the customer in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateAddressesResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. addresses Address repeated The collection of addresses occupied by the customer. The address(es) provided cannot be that of a P.O. Box, military base, hospital, or prison. See Address.","title":"UpdateAddressesRequest"},{"location":"API-Specifications/onboarding/#updateaddressesresponse","text":"UpdateAddressesResponse is the response message for UpdateAddressesRequest. See UpdateAddressesRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"UpdateAddressesResponse"},{"location":"API-Specifications/onboarding/#updatecommunicationpreferencesrequest","text":"UpdateCommunicationPreferencesRequest is used to perform the asynchronous operation of updating the communication preferences of the customer in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateCommunicationPreferencesResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. customer_communication_pref string The customer communication preference. See CommunicationPrefenceDetails. customer_communication_language string The customer communication language. See CommunicationPrefenceDetails.","title":"UpdateCommunicationPreferencesRequest"},{"location":"API-Specifications/onboarding/#updatecommunicationpreferencesresponse","text":"UpdateCommunicationPreferencesResponse is the response message for UpdateCommunicationPreferencesRequest. See UpdateCommunicationPreferencesRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"UpdateCommunicationPreferencesResponse"},{"location":"API-Specifications/onboarding/#updateconsentsrequest","text":"UpdateConsentsRequest is used to perform the asynchronous operation of updating the consents received from the customer for the onboarding application. Performing this operation will generate an asynchronous response type of UpdateConsentsResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. consents Consent repeated The updated collection of consents. See Consent.","title":"UpdateConsentsRequest"},{"location":"API-Specifications/onboarding/#updateconsentsresponse","text":"UpdateConsentsResponse is the response message for UpdateConsentsRequest. See UpdateConsentsRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"UpdateConsentsResponse"},{"location":"API-Specifications/onboarding/#updatecontactdetailsrequest","text":"UpdateContactDetailsRequest is used to perform the asynchronous operation of updating the customer contact details in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateContactDetailsResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. customer_contact_details ContactDetails The updated contact details. See ContactDetails.","title":"UpdateContactDetailsRequest"},{"location":"API-Specifications/onboarding/#updatecontactdetailsresponse","text":"UpdateContactDetailsResponse is the response message for UpdateContactDetailsRequest. See UpdateContactDetailsRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"UpdateContactDetailsResponse"},{"location":"API-Specifications/onboarding/#updatecustomerresidencyrequest","text":"UpdateCustomerResidencyRequest is used to perform the asynchronous operation of updating the customer residency status in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateCustomerResidencyResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. residency CustomerResidency The customer residency status. See CustomerResidency.","title":"UpdateCustomerResidencyRequest"},{"location":"API-Specifications/onboarding/#updatecustomerresidencyresponse","text":"UpdateCustomerResidencyResponse is the response message for UpdateCustomerResidencyRequest. See UpdateCustomerResidencyRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"UpdateCustomerResidencyResponse"},{"location":"API-Specifications/onboarding/#updatedisclosuresrequest","text":"UpdateDisclosuresRequest is used to perform the asynchronous operation of updating the disclosures received by the customer in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateDisclosuresResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. disclosures Disclosure repeated The updated collection of disclosures. See Disclosure.","title":"UpdateDisclosuresRequest"},{"location":"API-Specifications/onboarding/#updatedisclosuresresponse","text":"UpdateDisclosuresResponse is the response message for UpdateDisclosuresRequest. See UpdateDisclosuresRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"UpdateDisclosuresResponse"},{"location":"API-Specifications/onboarding/#updateemploymentrequest","text":"UpdateEmploymentRequest is used to perform the asynchronous operation of updating the customer employment information in the onboarding application. Performing this operation will generate an asynchronous response type of UpdateEmploymentResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. employment_info Employment The updated employment information. See Employment.","title":"UpdateEmploymentRequest"},{"location":"API-Specifications/onboarding/#updateemploymentresponse","text":"UpdateEmploymentResponse is the response message for UpdateEmploymentRequest. See UpdateEmploymentRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"UpdateEmploymentResponse"},{"location":"API-Specifications/onboarding/#updatepersonaldetailsrequest","text":"UpdatePersonalDetailsRequest is used to perform the asynchronous operation of updating the customer personal details in the onboarding application. Performing this operation will generate an asynchronous response type of UpdatePersonalDetailsResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to update. customer_personal_details PersonalDetails The updated personal details.","title":"UpdatePersonalDetailsRequest"},{"location":"API-Specifications/onboarding/#updatepersonaldetailsresponse","text":"UpdatePersonalDetailsResponse is the response message for UpdatePersonalDetailsRequest. See UpdatePersonalDetailsRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"UpdatePersonalDetailsResponse"},{"location":"API-Specifications/onboarding/#validateapplicationrequest","text":"ValidateApplicationRequest is used to perform the asynchronous operation of validating the entire onboarding application and all documents received from the customer. Performing this operation will generate an asynchronous response type of ValidateApplicationResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to validate. document_details DocumentInfo repeated If documents are specified in this request and a previous ValidateDocumentsRequest was issued, then the values from this request are taken, and previous request values are ignored. selfie_file_name string If SelfieFileName is not empty and a previous ValidateSelfieRequest was issued, then the value from this request is taken, and previous request value is ignored.","title":"ValidateApplicationRequest"},{"location":"API-Specifications/onboarding/#validateapplicationresponse","text":"ValidateApplicationResponse is the response message for ValidateApplicationRequest. See ValidateApplicationRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"ValidateApplicationResponse"},{"location":"API-Specifications/onboarding/#validatedocumentsrequest","text":"ValidateDocumentsRequest is used to perform the asynchronous operation of validating the identification documents received from the customer in the onboarding application. Performing this operation will generate an asynchronous response type of ValidateDocumentsResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to validate. document_details DocumentInfo repeated The collection of documents to validate. See DocumentInfo.","title":"ValidateDocumentsRequest"},{"location":"API-Specifications/onboarding/#validatedocumentsresponse","text":"ValidateDocumentsResponse is the response message for ValidateDocumentsRequest. See ValidateDocumentsRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"ValidateDocumentsResponse"},{"location":"API-Specifications/onboarding/#validateselfierequest","text":"ValidateSelfieRequest is used to perform the asynchronous operation of validating the selfie pictures received from the customer in the onboarding application. Performing this operation will generate an asynchronous response type of ValidateSelfieResponse on the response topic. Field Type Label Description onboarding_application_id string The UUID of the onboarding application to validate. file_name string The name of the selfie file to validate. See OnboardingApplication.","title":"ValidateSelfieRequest"},{"location":"API-Specifications/onboarding/#validateselfieresponse","text":"ValidateSelfieResponse is the response message for ValidateSelfieRequest. See ValidateSelfieRequest for details. Field Type Label Description basic_details OnboardingOperationResponseDetails The basic details of the onboarding application response. See OnboardingOperationResponseDetails.","title":"ValidateSelfieResponse"},{"location":"API-Specifications/onboarding/#shared-types","text":"","title":"Shared types"},{"location":"API-Specifications/onboarding/#protectedblob","text":"Global types / Protected Blob","title":"ProtectedBlob"},{"location":"API-Specifications/onboarding/#protecteddate","text":"Global types / Protected Date","title":"ProtectedDate"},{"location":"API-Specifications/onboarding/#protectedstring","text":"Global types / Protected String","title":"ProtectedString"},{"location":"API-Specifications/onboarding/#phonenumber","text":"Global types / Phone Number","title":"PhoneNumber"},{"location":"API-Specifications/onboarding/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/payments/","text":"Payments API (Experimental) \u00b6 b2cpayments_v1_transactions.proto \u00b6 Experimental do not try to use this API in any PROD use case Services \u00b6 B2CPaymentsService \u00b6 B2CPaymentsService is a synchronous gRPC service for the execution of different payment types between the Business represented by the distribution partner and its end customers whose banking products are serviced by Finaptic SubmitPayment \u00b6 rpc SubmitPayment( SubmitPaymentRequest ) SubmitPaymentResponse Generic service for a distribution partner to initiate a payment towards a customer's card/account API-specific types \u00b6 B2CTransactionDetailsCreatedEvent \u00b6 B2CTransactionDetailsCreatedEvent event is raised by the Payments domain when transactions are created and Payment-specific details are available. Field Type Label Description event_id string The unique event ID for this transaction. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. details TransactionDetails The transaction details for this event. PaymentInstructionDetails \u00b6 PaymentDetails is a model that describes the detail of a payment Field Type Label Description card_id string The identifier of the card whose balance will be affected by this payment amount thebaasco.types.Amount Amount to be paid in this transaction If the amount is negative the payment instruction is outbound (takes money out of the customer's account) If the amount is positive the payment instruction is inbound (puts money into the customer's account) payment_ref_number string Identifier of this payment in the source system (e.g. the distribution partner's payments engine or loyalty platform) payment_time google.protobuf.Timestamp The UTC timestamp when this payment/operation took place on the source system (e.g. when the user made a purchase). description string Short description/memo describing this payment for visualization to customers tags Tag repeated Collection of metadata with additional details describing this payment SubmitPaymentRequest \u00b6 PurchaseRequest is used when distribution partner wants to simulate a card transaction. Field Type Label Description request_id string Used as an idempotency key to uniquely identify this request and avoid duplicating its side effects in case of a retry payment PaymentInstructionDetails The identifier of the card that will be used for the purchase simulation SubmitPaymentResponse \u00b6 PurchaseResponse is returned when the purchase operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string Outcome of the transaction Success/Failure TODO will need to decide the best way to communicate this, see if it can be made an enum response_code_reason string Describes the reason for the returned response code. Applicable in cases of unsuccessful response codes. Tag \u00b6 Used as a mechanism to add meta-data for categorization of a payment according to the source system Field Type Label Description key string To identify the value category been described/set by the corresponding value value string The actual value of the category been described TransactionDetails \u00b6 TransactionDetails message contains details about a given transaction, relevant and specific to the B2C Payments domain. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". card_id string The identifier of the card involved in this B2C payment transaction. payment_instruction PaymentInstructionDetails Details of the payment instruction that originated this transaction response_code string Outcome of the transaction Success/Failure TODO will need to decide the best way to communicate this, see if it can be made an enum response_code_reason string Describes the reason for the returned response code. Applicable in cases of unsuccessful response codes. Shared types \u00b6 TODO: write shared types here if they exist Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Payments API (Experimental)"},{"location":"API-Specifications/payments/#payments-api-experimental","text":"","title":"Payments API (Experimental)"},{"location":"API-Specifications/payments/#b2cpayments_v1_transactionsproto","text":"Experimental do not try to use this API in any PROD use case","title":"b2cpayments_v1_transactions.proto"},{"location":"API-Specifications/payments/#services","text":"","title":"Services"},{"location":"API-Specifications/payments/#b2cpaymentsservice","text":"B2CPaymentsService is a synchronous gRPC service for the execution of different payment types between the Business represented by the distribution partner and its end customers whose banking products are serviced by Finaptic","title":"B2CPaymentsService"},{"location":"API-Specifications/payments/#submitpayment","text":"rpc SubmitPayment( SubmitPaymentRequest ) SubmitPaymentResponse Generic service for a distribution partner to initiate a payment towards a customer's card/account","title":"SubmitPayment"},{"location":"API-Specifications/payments/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/payments/#b2ctransactiondetailscreatedevent","text":"B2CTransactionDetailsCreatedEvent event is raised by the Payments domain when transactions are created and Payment-specific details are available. Field Type Label Description event_id string The unique event ID for this transaction. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. details TransactionDetails The transaction details for this event.","title":"B2CTransactionDetailsCreatedEvent"},{"location":"API-Specifications/payments/#paymentinstructiondetails","text":"PaymentDetails is a model that describes the detail of a payment Field Type Label Description card_id string The identifier of the card whose balance will be affected by this payment amount thebaasco.types.Amount Amount to be paid in this transaction If the amount is negative the payment instruction is outbound (takes money out of the customer's account) If the amount is positive the payment instruction is inbound (puts money into the customer's account) payment_ref_number string Identifier of this payment in the source system (e.g. the distribution partner's payments engine or loyalty platform) payment_time google.protobuf.Timestamp The UTC timestamp when this payment/operation took place on the source system (e.g. when the user made a purchase). description string Short description/memo describing this payment for visualization to customers tags Tag repeated Collection of metadata with additional details describing this payment","title":"PaymentInstructionDetails"},{"location":"API-Specifications/payments/#submitpaymentrequest","text":"PurchaseRequest is used when distribution partner wants to simulate a card transaction. Field Type Label Description request_id string Used as an idempotency key to uniquely identify this request and avoid duplicating its side effects in case of a retry payment PaymentInstructionDetails The identifier of the card that will be used for the purchase simulation","title":"SubmitPaymentRequest"},{"location":"API-Specifications/payments/#submitpaymentresponse","text":"PurchaseResponse is returned when the purchase operation finishes Field Type Label Description lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. response_code string Outcome of the transaction Success/Failure TODO will need to decide the best way to communicate this, see if it can be made an enum response_code_reason string Describes the reason for the returned response code. Applicable in cases of unsuccessful response codes.","title":"SubmitPaymentResponse"},{"location":"API-Specifications/payments/#tag","text":"Used as a mechanism to add meta-data for categorization of a payment according to the source system Field Type Label Description key string To identify the value category been described/set by the corresponding value value string The actual value of the category been described","title":"Tag"},{"location":"API-Specifications/payments/#transactiondetails","text":"TransactionDetails message contains details about a given transaction, relevant and specific to the B2C Payments domain. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". card_id string The identifier of the card involved in this B2C payment transaction. payment_instruction PaymentInstructionDetails Details of the payment instruction that originated this transaction response_code string Outcome of the transaction Success/Failure TODO will need to decide the best way to communicate this, see if it can be made an enum response_code_reason string Describes the reason for the returned response code. Applicable in cases of unsuccessful response codes.","title":"TransactionDetails"},{"location":"API-Specifications/payments/#shared-types","text":"TODO: write shared types here if they exist","title":"Shared types"},{"location":"API-Specifications/payments/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/persfinmngt/","text":"Personal Finance Management API (Draft) \u00b6 persfinmngt_v1_transactions.proto \u00b6 Services \u00b6 Transactions \u00b6 Transactions service exposes operations related to the transactions of an end-user. GetTransactions \u00b6 rpc GetTransactions( GetTransactionsRequest ) GetTransactionsResponse GetTransactions lists transactions for a given Account with pagination. Only users associated with the Account will be able to invoke this endpoint. Enums \u00b6 Order \u00b6 Order enumeration represents the chronological ordering of transactions. Name Number Description ORDER_UNSPECIFIED 0 ORDER_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. Trying to make a request with this type will result in an error. DESCENDING 1 DESCENDING represents newest first. ASCENDING 2 ASCENDING represents oldest first. Transaction.TransactionState \u00b6 TransactionState enumeration represents the state of a Transaction. Name Number Description TRANSACTION_STATE_UNSPECIFIED 0 TRANSACTION_STATE_UNSPECIFIED is reserved for error detection purposes. It should not be used directly. POSTED 1 POSTED represents a transaction that has been completed. PENDING 2 PENDING represents a transaction in an intermediate state, dependent on the transaction type. UNKNOWN 3 UNKNOWN represents a transaction type where available information is insufficient to determine TransactionState. This can occur if information from the originating domain of the transaction (core-card or core-transfer) has not been received. CANCELLED 4 CANCELLED represents a transaction that has been reverted while it was still pending (before settlement) Transaction.TransactionType \u00b6 TransactionType enumeration represents the type of a Transaction. Name Number Description TRANSACTION_TYPE_UNSPECIFIED 0 TRANSACTION_TYPE_UNSPECIFIED is reserved for error detection purposes. It should not be used directly. AUTHORIZED 1 AUTHORIZED represents a transaction type that is a purchase for which the merchant has received approval from the bank. An AUTHORIZED transaction will always have state PENDING. DEBIT 2 DEBIT represents a transaction type when there is an addition to the amount in the customer's account. REFUND 3 REFUND represents a transaction type when businesses and merchants issue a reversal of the transaction that had previously occurred (e.g. a previously credited transaction will be debited back into the customers account). DECLINED 4 DECLINED represents a transaction type when the transaction fails for any reason (e.g. fraud, operations). CHARGEBACK 5 CHARGEBACK represents a transaction type that is returned to a payment card after a customer successfully disputes an item on their account statement or transactions report. A chargeback may occur on debit cards (and the underlying bank account) or on credit cards. CREDIT 6 CREDIT represents a transaction type when there is a deduction to the amount in the customer's account. PRODUCT_NOT_DEFINED 7 PRODUCT_NOT_DEFINED represents a transaction state where available information is insufficient to determine TransactionType. This can occur if information from the originating domain of the transaction (core-card or core-transfer) has not been received. API-specific types \u00b6 GetTransactionsRequest \u00b6 GetTransactionsRequest is a message passed as parameter to the GetTransactions operation. Field Type Label Description account_id string The Account ID for which Transactions are returned. Must be a valid UUID. User must have proper access to this Account to call this endpoint. page_size int32 The maximum number of Transactions to return. This value must be greater or equal to one. page_token string When retrieving page other than the initial page, the value for the page_token must be specified, and taken from the previous page's next_page_token value (see GetTransactionsResponse). When no value is specified, then the initial page will be returned. sort_order Order The order the returned Transactions are sorted in. Transactions are sorted by the Transaction's transaction_time field. GetTransactionsResponse \u00b6 GetTransactionsResponse is the response of a successful GetTransactions request. Field Type Label Description previous_page_token string The token to be used to retrieve the previous page of data. Must be passed in the page_token field of the next request (see GetTransactionsRequest). When no value is returned in this field, then there is no previous data to be listed. transactions Transaction repeated The requested list of Transactions. next_page_token string The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see GetTransactionsRequest). When no value is returned in this field, then no further data exists to be listed. sort_order Order The order the Transactions are listed in. Transaction \u00b6 Transaction is the representation of a transaction. It contains details about the transaction and information regarding the account the transaction has occurred on. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". amount thebaasco.types.Amount The Amount of the Transaction. transactor_name string The name and location of the vendor where the payment was processed. balance thebaasco.types.Balance The resulting Balance of the Account after the Transaction has occurred. transaction_state Transaction.TransactionState The current TransactionState of the Transaction. This is subject to change based on processing of the transaction. transaction_type Transaction.TransactionType The TransactionType of the Transaction. account_id string ID of the Account on which the Transaction was authorised. This can also be utilised to fetch the Account. category string A localized descriptor of the transaction's category (i.e. Groceries, Transport, etc.). transaction_time google.protobuf.Timestamp The UTC timestamp when the Transaction occurred. account_domain string The name of the domain that can be queried for additional details regarding the Account of this transaction (e.g. core-banking) initiating_domain string The name of the domain that can be queried for additional details regarding this Transaction (e.g. core-card, core-transfer or core-banking) TransactionCreatedEvent \u00b6 TransactionCreatedEvent event is raised when a Transaction occurs. Field Type Label Description event_id string The unique event ID for this transaction. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. customer_id string The ID of the customer that the event is directed to. If a single transaction occurs on an account with multiple customers (account owner or authorized users), an event will be raised for each customer, each with a different event_id. transaction Transaction The Transaction that triggered the event. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued. Shared types \u00b6 Amount \u00b6 Field Type Label Description amount string Only accept decimal representation of a value currency string Balance \u00b6 Field Type Label Description actual Amount available Amount Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Personal Finance Management API (Draft)"},{"location":"API-Specifications/persfinmngt/#personal-finance-management-api-draft","text":"","title":"Personal Finance Management API (Draft)"},{"location":"API-Specifications/persfinmngt/#persfinmngt_v1_transactionsproto","text":"","title":"persfinmngt_v1_transactions.proto"},{"location":"API-Specifications/persfinmngt/#services","text":"","title":"Services"},{"location":"API-Specifications/persfinmngt/#transactions","text":"Transactions service exposes operations related to the transactions of an end-user.","title":"Transactions"},{"location":"API-Specifications/persfinmngt/#gettransactions","text":"rpc GetTransactions( GetTransactionsRequest ) GetTransactionsResponse GetTransactions lists transactions for a given Account with pagination. Only users associated with the Account will be able to invoke this endpoint.","title":"GetTransactions"},{"location":"API-Specifications/persfinmngt/#enums","text":"","title":"Enums"},{"location":"API-Specifications/persfinmngt/#order","text":"Order enumeration represents the chronological ordering of transactions. Name Number Description ORDER_UNSPECIFIED 0 ORDER_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. Trying to make a request with this type will result in an error. DESCENDING 1 DESCENDING represents newest first. ASCENDING 2 ASCENDING represents oldest first.","title":"Order"},{"location":"API-Specifications/persfinmngt/#transactiontransactionstate","text":"TransactionState enumeration represents the state of a Transaction. Name Number Description TRANSACTION_STATE_UNSPECIFIED 0 TRANSACTION_STATE_UNSPECIFIED is reserved for error detection purposes. It should not be used directly. POSTED 1 POSTED represents a transaction that has been completed. PENDING 2 PENDING represents a transaction in an intermediate state, dependent on the transaction type. UNKNOWN 3 UNKNOWN represents a transaction type where available information is insufficient to determine TransactionState. This can occur if information from the originating domain of the transaction (core-card or core-transfer) has not been received. CANCELLED 4 CANCELLED represents a transaction that has been reverted while it was still pending (before settlement)","title":"Transaction.TransactionState"},{"location":"API-Specifications/persfinmngt/#transactiontransactiontype","text":"TransactionType enumeration represents the type of a Transaction. Name Number Description TRANSACTION_TYPE_UNSPECIFIED 0 TRANSACTION_TYPE_UNSPECIFIED is reserved for error detection purposes. It should not be used directly. AUTHORIZED 1 AUTHORIZED represents a transaction type that is a purchase for which the merchant has received approval from the bank. An AUTHORIZED transaction will always have state PENDING. DEBIT 2 DEBIT represents a transaction type when there is an addition to the amount in the customer's account. REFUND 3 REFUND represents a transaction type when businesses and merchants issue a reversal of the transaction that had previously occurred (e.g. a previously credited transaction will be debited back into the customers account). DECLINED 4 DECLINED represents a transaction type when the transaction fails for any reason (e.g. fraud, operations). CHARGEBACK 5 CHARGEBACK represents a transaction type that is returned to a payment card after a customer successfully disputes an item on their account statement or transactions report. A chargeback may occur on debit cards (and the underlying bank account) or on credit cards. CREDIT 6 CREDIT represents a transaction type when there is a deduction to the amount in the customer's account. PRODUCT_NOT_DEFINED 7 PRODUCT_NOT_DEFINED represents a transaction state where available information is insufficient to determine TransactionType. This can occur if information from the originating domain of the transaction (core-card or core-transfer) has not been received.","title":"Transaction.TransactionType"},{"location":"API-Specifications/persfinmngt/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/persfinmngt/#gettransactionsrequest","text":"GetTransactionsRequest is a message passed as parameter to the GetTransactions operation. Field Type Label Description account_id string The Account ID for which Transactions are returned. Must be a valid UUID. User must have proper access to this Account to call this endpoint. page_size int32 The maximum number of Transactions to return. This value must be greater or equal to one. page_token string When retrieving page other than the initial page, the value for the page_token must be specified, and taken from the previous page's next_page_token value (see GetTransactionsResponse). When no value is specified, then the initial page will be returned. sort_order Order The order the returned Transactions are sorted in. Transactions are sorted by the Transaction's transaction_time field.","title":"GetTransactionsRequest"},{"location":"API-Specifications/persfinmngt/#gettransactionsresponse","text":"GetTransactionsResponse is the response of a successful GetTransactions request. Field Type Label Description previous_page_token string The token to be used to retrieve the previous page of data. Must be passed in the page_token field of the next request (see GetTransactionsRequest). When no value is returned in this field, then there is no previous data to be listed. transactions Transaction repeated The requested list of Transactions. next_page_token string The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see GetTransactionsRequest). When no value is returned in this field, then no further data exists to be listed. sort_order Order The order the Transactions are listed in.","title":"GetTransactionsResponse"},{"location":"API-Specifications/persfinmngt/#transaction","text":"Transaction is the representation of a transaction. It contains details about the transaction and information regarding the account the transaction has occurred on. Field Type Label Description transaction_id string Unique identifier that represents this single financial transaction (operation). This ID is stable across all domains for a given transaction. lifecycle_transaction_id string Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...). Note: there might be multiple unique \"transaction_id\" for a single \"lifecycle_transaction_id\". amount thebaasco.types.Amount The Amount of the Transaction. transactor_name string The name and location of the vendor where the payment was processed. balance thebaasco.types.Balance The resulting Balance of the Account after the Transaction has occurred. transaction_state Transaction.TransactionState The current TransactionState of the Transaction. This is subject to change based on processing of the transaction. transaction_type Transaction.TransactionType The TransactionType of the Transaction. account_id string ID of the Account on which the Transaction was authorised. This can also be utilised to fetch the Account. category string A localized descriptor of the transaction's category (i.e. Groceries, Transport, etc.). transaction_time google.protobuf.Timestamp The UTC timestamp when the Transaction occurred. account_domain string The name of the domain that can be queried for additional details regarding the Account of this transaction (e.g. core-banking) initiating_domain string The name of the domain that can be queried for additional details regarding this Transaction (e.g. core-card, core-transfer or core-banking)","title":"Transaction"},{"location":"API-Specifications/persfinmngt/#transactioncreatedevent","text":"TransactionCreatedEvent event is raised when a Transaction occurs. Field Type Label Description event_id string The unique event ID for this transaction. Can be used by consumers to determine if an event has already been processed or not. This ID will always be a valid UUID. customer_id string The ID of the customer that the event is directed to. If a single transaction occurs on an account with multiple customers (account owner or authorized users), an event will be raised for each customer, each with a different event_id. transaction Transaction The Transaction that triggered the event. tenant_id int32 The tenant ID, to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants. event_time google.protobuf.Timestamp The UTC timestamp when this event was issued.","title":"TransactionCreatedEvent"},{"location":"API-Specifications/persfinmngt/#shared-types","text":"","title":"Shared types"},{"location":"API-Specifications/persfinmngt/#amount","text":"Field Type Label Description amount string Only accept decimal representation of a value currency string","title":"Amount"},{"location":"API-Specifications/persfinmngt/#balance","text":"Field Type Label Description actual Amount available Amount","title":"Balance"},{"location":"API-Specifications/persfinmngt/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/Global-types/amount/","text":"Amount \u00b6 amount.proto \u00b6 API-specific types \u00b6 Amount \u00b6 Field Type Label Description amount string Only accept decimal representation of a value currency string","title":"Amount"},{"location":"API-Specifications/Global-types/amount/#amount","text":"","title":"Amount"},{"location":"API-Specifications/Global-types/amount/#amountproto","text":"","title":"amount.proto"},{"location":"API-Specifications/Global-types/amount/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/Global-types/amount/#amount_1","text":"Field Type Label Description amount string Only accept decimal representation of a value currency string","title":"Amount"},{"location":"API-Specifications/Global-types/balance/","text":"Balance \u00b6 Top balance.proto \u00b6 Balance \u00b6 Field Type Label Description actual Amount available Amount Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Balance"},{"location":"API-Specifications/Global-types/balance/#balance","text":"Top","title":"Balance"},{"location":"API-Specifications/Global-types/balance/#balanceproto","text":"","title":"balance.proto"},{"location":"API-Specifications/Global-types/balance/#balance_1","text":"Field Type Label Description actual Amount available Amount","title":"Balance"},{"location":"API-Specifications/Global-types/balance/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/Global-types/errordetails/","text":"Cross-domain error model \u00b6 errordetails.proto \u00b6 Enums \u00b6 GenericErrorCodes \u00b6 A list of error codes which could be returned from any API service. See documentation of the specific services for more details. In all cases these error codes will be communicated to the consumer in a structured manner within an instance of AppError that will be included within the error status response: status.Status.Details Name Number Description GEN_UNSPECIFIED 0 UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. GEN_INTERNAL_ERROR 1 GEN_INTERNAL_ERROR - Internal Error. gRPC Code=Internal. Returned when an unexpected error occurs. This error will be accompanied by a RefNumber which can be shared with Finaptic to investigate the source of the error. API-specific types \u00b6 AppError \u00b6 AppError is used to enrich the gRPC error response returned by a service, so that the consumer can have additional elements to use while handling errors at its side It is meant to be added to the error details collection of proto messages that a status.Status can contain For reference see: https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto#L46 Description as follows: A list of messages that carry the error details... repeated google.protobuf.Any details = 3; Field Type Label Description error_code string Used for services to provided a machine-readable coded error that consumers could use to for assertions, conditional processing and so on It's recommended that its value is taken from a well-documented enumeration from the service's API's surface source string Used to document the source domain/application from where an error originates ref_number string reference number provided along with an error so that the consumer can send it back while making support requests and then the value could be used to quickly locate the error in our logs/incident management system field_violations FieldViolation repeated In case the status response has code codes.InvalidArgument, an API implementor can add detailed information about the fields found at fault FieldViolation \u00b6 FieldViolation describes a violation found on a specific field from the request made to an API It allows an API to provide structured error message for errors found while validating the request input Field Type Label Description field string description string","title":"Cross-domain error model"},{"location":"API-Specifications/Global-types/errordetails/#cross-domain-error-model","text":"","title":"Cross-domain error model"},{"location":"API-Specifications/Global-types/errordetails/#errordetailsproto","text":"","title":"errordetails.proto"},{"location":"API-Specifications/Global-types/errordetails/#enums","text":"","title":"Enums"},{"location":"API-Specifications/Global-types/errordetails/#genericerrorcodes","text":"A list of error codes which could be returned from any API service. See documentation of the specific services for more details. In all cases these error codes will be communicated to the consumer in a structured manner within an instance of AppError that will be included within the error status response: status.Status.Details Name Number Description GEN_UNSPECIFIED 0 UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. GEN_INTERNAL_ERROR 1 GEN_INTERNAL_ERROR - Internal Error. gRPC Code=Internal. Returned when an unexpected error occurs. This error will be accompanied by a RefNumber which can be shared with Finaptic to investigate the source of the error.","title":"GenericErrorCodes"},{"location":"API-Specifications/Global-types/errordetails/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/Global-types/errordetails/#apperror","text":"AppError is used to enrich the gRPC error response returned by a service, so that the consumer can have additional elements to use while handling errors at its side It is meant to be added to the error details collection of proto messages that a status.Status can contain For reference see: https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto#L46 Description as follows: A list of messages that carry the error details... repeated google.protobuf.Any details = 3; Field Type Label Description error_code string Used for services to provided a machine-readable coded error that consumers could use to for assertions, conditional processing and so on It's recommended that its value is taken from a well-documented enumeration from the service's API's surface source string Used to document the source domain/application from where an error originates ref_number string reference number provided along with an error so that the consumer can send it back while making support requests and then the value could be used to quickly locate the error in our logs/incident management system field_violations FieldViolation repeated In case the status response has code codes.InvalidArgument, an API implementor can add detailed information about the fields found at fault","title":"AppError"},{"location":"API-Specifications/Global-types/errordetails/#fieldviolation","text":"FieldViolation describes a violation found on a specific field from the request made to an API It allows an API to provide structured error message for errors found while validating the request input Field Type Label Description field string description string","title":"FieldViolation"},{"location":"API-Specifications/Global-types/phonenumber/","text":"Phone Number \u00b6 phonenumber.proto \u00b6 API-specific types \u00b6 PhoneNumber \u00b6 PhoneNumber represents a phone number. Field Type Label Description sms_compatible bool SMS compatible indicates if the number can receive SMS messages. number string Number is the phone number. Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Phone Number"},{"location":"API-Specifications/Global-types/phonenumber/#phone-number","text":"","title":"Phone Number"},{"location":"API-Specifications/Global-types/phonenumber/#phonenumberproto","text":"","title":"phonenumber.proto"},{"location":"API-Specifications/Global-types/phonenumber/#api-specific-types","text":"","title":"API-specific types"},{"location":"API-Specifications/Global-types/phonenumber/#phonenumber","text":"PhoneNumber represents a phone number. Field Type Label Description sms_compatible bool SMS compatible indicates if the number can receive SMS messages. number string Number is the phone number.","title":"PhoneNumber"},{"location":"API-Specifications/Global-types/phonenumber/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"API-Specifications/Global-types/protectedtypes/","text":"Protected types \u00b6 Top protectedvalue.proto \u00b6 ProtectedBlob \u00b6 This message is designed to contain images/binary data that has to be protected Field Type Label Description clear bytes The source date to be protected with max value of 10MB protected string The target field that will contain a freeform protected string ProtectedDate \u00b6 This message is designed to be used together with the tokenizer/processor that processes messages that are ready to be published. Sample usage: message FakePersonalInfo { string name = 1; ProtectedDate dob = 2 [(thebaasco.types.pseudonimizationStrategy) = \"encrypt\"]; ProtectedString sin = 3 [(thebaasco.types.pseudonimizationStrategy) = \"tokenize\"]; } Field Type Label Description clear google.type.Date The source date to be protected protected string The target field that will contain a freeform protected string ProtectedString \u00b6 This message is designed to be used together with the tokenizer/processor that processes messages that are ready to be published. Sample usage: message FakePersonalInfo { string name = 1; ProtectedDate dob = 2 [(thebaasco.types.pseudonimizationStrategy) = \"encrypt\", (thebaasco.types.pseudonimizationClassification) = \"dob\"]; ProtectedString sin = 3 [(thebaasco.types.pseudonimizationStrategy) = \"tokenize\", (thebaasco.types.pseudonimizationClassification) = \"sin\"]; } Field Type Label Description clear string The source value to be protected protected string The target field that will contain a freeform protected string Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Protected types"},{"location":"API-Specifications/Global-types/protectedtypes/#protected-types","text":"Top","title":"Protected types"},{"location":"API-Specifications/Global-types/protectedtypes/#protectedvalueproto","text":"","title":"protectedvalue.proto"},{"location":"API-Specifications/Global-types/protectedtypes/#protectedblob","text":"This message is designed to contain images/binary data that has to be protected Field Type Label Description clear bytes The source date to be protected with max value of 10MB protected string The target field that will contain a freeform protected string","title":"ProtectedBlob"},{"location":"API-Specifications/Global-types/protectedtypes/#protecteddate","text":"This message is designed to be used together with the tokenizer/processor that processes messages that are ready to be published. Sample usage: message FakePersonalInfo { string name = 1; ProtectedDate dob = 2 [(thebaasco.types.pseudonimizationStrategy) = \"encrypt\"]; ProtectedString sin = 3 [(thebaasco.types.pseudonimizationStrategy) = \"tokenize\"]; } Field Type Label Description clear google.type.Date The source date to be protected protected string The target field that will contain a freeform protected string","title":"ProtectedDate"},{"location":"API-Specifications/Global-types/protectedtypes/#protectedstring","text":"This message is designed to be used together with the tokenizer/processor that processes messages that are ready to be published. Sample usage: message FakePersonalInfo { string name = 1; ProtectedDate dob = 2 [(thebaasco.types.pseudonimizationStrategy) = \"encrypt\", (thebaasco.types.pseudonimizationClassification) = \"dob\"]; ProtectedString sin = 3 [(thebaasco.types.pseudonimizationStrategy) = \"tokenize\", (thebaasco.types.pseudonimizationClassification) = \"sin\"]; } Field Type Label Description clear string The source value to be protected protected string The target field that will contain a freeform protected string","title":"ProtectedString"},{"location":"API-Specifications/Global-types/protectedtypes/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"FAQs/","text":"Frequently Asked Questions \u00b6 Onboarding \u00b6 Are spaces accepted in first name, middle name, and last name? For example, an Arabic last name may be \"Al Rehmat.\" \u00b6 Yes, the First Name name fields can accept spaces. Each name field has a maximum of 50 characters, and can accept the following characters in addition to the alphabet: -, ', French accents, 0-9. Customer Service \u00b6 Fraud \u00b6 Complaint Handling Policies and Procedures \u00b6 Customer Initiated Transaction Disputes \u00b6","title":"Frequently Asked Questions"},{"location":"FAQs/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"FAQs/#onboarding","text":"","title":"Onboarding"},{"location":"FAQs/#are-spaces-accepted-in-first-name-middle-name-and-last-name-for-example-an-arabic-last-name-may-be-al-rehmat","text":"Yes, the First Name name fields can accept spaces. Each name field has a maximum of 50 characters, and can accept the following characters in addition to the alphabet: -, ', French accents, 0-9.","title":"Are spaces accepted in first name, middle name, and last name? For example, an Arabic last name may be \"Al Rehmat.\""},{"location":"FAQs/#customer-service","text":"","title":"Customer Service"},{"location":"FAQs/#fraud","text":"","title":"Fraud"},{"location":"FAQs/#complaint-handling-policies-and-procedures","text":"","title":"Complaint Handling Policies and Procedures"},{"location":"FAQs/#customer-initiated-transaction-disputes","text":"","title":"Customer Initiated Transaction Disputes"},{"location":"FAQs/Interac/help/","text":"Interac Customer Help Natsolution powered by NatCan Trust offers the ability to register for and receive Interac eTransfers Support for this product is offered through your service provider (the application which you used to sign up for the service). In the event that you are experiencing issues that cannot be resolved through this channel, you may reach our customer service centre at 1-833-549-2428. Support \u00e0 la clientele Interac Natsolution soutenu par NatCan Trust offre la possibilit\u00e9 d'enregistrer pour et recevoir des Virements Interac. Le support pour ce produit est offert par votre fournisseur de services (l'application avec laquelle vous vous \u00eates inscrit). Dans le cas o\u00f9 vous rencontrez des probl\u00e8mes qui ne peuvent \u00eatres r\u00e9solus par ces moyens, vous pouvez rejoindre notre centre de service \u00e0 la clientele au 1-833-549-2428","title":"Help"},{"location":"Implementation-Guide/","text":"Implementation Guide \u00b6 Our implementation guides will serve as a practical view of how to implement Finaptic's API specifications.","title":"Implementation Guide"},{"location":"Implementation-Guide/#implementation-guide","text":"Our implementation guides will serve as a practical view of how to implement Finaptic's API specifications.","title":"Implementation Guide"},{"location":"Implementation-Guide/Authentication/authentication/","text":"Authentication Overview \u00b6 Application Security is a top priority for Finaptic. To ensure we protect our clients, their brand, and most importantly their customer's data we use industry leading Enterprise Identity provider Auth0 for our Consumer Identity Access Management (CIAM). What is Auth0? \u00b6 Auth0 is an easy to implement, flexible authentication and authorization platform which is SOC2, ISO 27001, ISO 27018, and PCI DSS compliant. It uses industry standards for authentication such as OIDC, OAuth 2.0, and SAML. The Basic Overview of Authentication Flow \u00b6 The client app initiates an authentication request to Finaptic's partner specific Auth0 provider. Auth0 uses its own user store to get the credentials or routes the request to an Identity Provider through a configured connection. The user authenticates successfully. A token is passed back to the client application. This token is then sent along with every request from the client application to the Finaptic APIs. User Informations \u00b6 Sources of user information in this context are basically where the user identity information resides. This will depend on your existing user database or identity provider setup. External Identity Providers - Identity Providers are servers that can provide identity information to other servers. Many Identity Providers are supported using various protocols (like OpenID Connect (OIDC), SAML, WS-Federation, etc.) Auth0 Database - If you want to create your own user store, instead of using external identity providers like Google or Facebook, you can use a Database Connection. This way you can authenticate users with an email or username and a password. The credentials can be securely stored either in the Auth0 user store or in your own database. Passwordless (Future) - connections allow users to log in without the need to remember a password. Instead, users enter their mobile phone number or email address and receive a one-time code or link, which they can then use to log in. User Database \u00b6 Typical database connection scenarios include: [ Recommended ] Using Auth0 directly as your user store - Auth0 provides the database infrastructure to store your users by default. This scenario provides the best performance for the authentication process since all data is stored in Auth0. The Auth0-hosted database is highly secure. Passwords are never stored or logged in plain text but are hashed with bcrypt. Using your own user store - We recommend migrating your user data to Auth0 in this scenario. Migrating to Auth0 from a custom user store \u00b6 Auth0 provides an automatic migration feature that adds your users to the Auth0 database one-at-a-time as each log in and avoids asking your users to reset their passwords all at the same time. A bulk import to Auth0 user store is also an option. Authorization Code Flow with Proof Key for Code Exchange (PKCE) \u00b6 We use PKCE to mitigate security concerns posed by an authorization code Flow alone. Such as a native app cannot securely store a client secret which would be bound to the app and is the same for all users and devices. The user clicks Login within the application. Finaptc's SDK, using Auth0's SDK creates a cryptographically-random code verifier and from this generates a code challenge. The SDK redirects the user to the Auth0 Authorization Server along with the code challenge. The authorization server redirects the user to the login and authorization prompt. The user authenticates using one of the configured login options (Email/Password, Google, etc.). The authorization server stores the code challenge and redirects the user back to the application with an authorization code. The SDK sends this code and the code verifier (created in step 2) to the authorization server. The authorization server verifies the code challenge and code verifier. The authorization server responds with an ID Token and Access Token (and optionally, a Refresh Token). The client application can use this access token to call the FInaptic API to access information. The API responds with requested data. Multi-Factor Authentication \u00b6 Multi-factor authentication (MFA) provides a method to verify a user's identity by requiring them to provide more than one piece of identifying information. This ensures that only valid users can access their accounts even if they use a username and password that may have been compromised from a different application. Support MFA channels include: In App push notifications [ Recommended ] - Send users push notifications to their pre-registered devices, typically a mobile phone or tablet, from which a user can immediately allow or deny account access via the simple press of a button. One-Time passwords - One-time passwords allow you to use an authenticator application on the user's personal device, such as Google Authenticator, to generate a one-time password that changes over time, and which can be entered as the second factor to validate an account. Email - Enable users to perform MFA using one-time passwords delivered through email when they don't have other authentication factors available SMS Notification - Send users a one-time code over SMS which the user is then prompted to enter before they can finish authenticating. Step-up Multi-Factor Authentication \u00b6 With step-up authentication, applications that allow access to different types of resources can require users to authenticate with a stronger authentication mechanism to access sensitive resources. The client logins They access a less sensitive part of the application Next, they try to access more sensitive data, like their full card number. The Finaptic API enforces that MFA is required for this use case. The client application asks the users for their 2nd factor to \"Step up\" their authentication. The Finaptic API accepts the new token and returns the sensitive data. Attack Protection Features \u00b6 Feature Risk Signal How it works Bot Detection IP reputation computed by analyzing the quality of traffic seen for each IP. Triggers a CAPTCHA step when a login attempt comes from an IP suspected of use by a bot. Suspicious IP Throttling Velocity of login attempts from an IP for any number of accounts against a tenant. Detects when a bot/script tries too many username/password combinations within a short period of time. Brute-force Protection Velocity of login attempts from an IP for a particular account. Detects when a bad actor tries to login to an account too many times within a period of time. Breached Password Detection Use of a breached password that appears in lists of breached passwords on the dark web. Stops users from using passwords that are known to be breached in some 3P sites. Biometrics (WIP) \u00b6 Keychain biometric protection: The long-term session credentials must be protected by biometric authentication. For iOS, this means ensuring kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly is configured (a device without a passcode can't have biometric), and this ensures this credential won't be usable through keychain syncing. kSecAccessControlBiometryAny must also be configured for keychain stored credentials. Equivalent implementation on Android. Integrating with your Application \u00b6 Integrating with Finaptic and Auth0 will depend heavily on your use case and application design. As part of the Finaptic SDK we provide the necessary configurations to integrate with Auth0 and recommend you use our SDK. You can also use any of the Auth0 native SDKs that provide support for mobile (Android, iOS). Finally, it's also possible to use any Vendor agnostic OpenID Connect library in your implementation. Please refer to Auth0's documentation for details on the API contract . You can also refer to our SDK for details on the authentication client for Auth0. Links and other references \u00b6 User sources connections Step-up Authentication OpenID Connect RFC 7636: Proof Key for Code Exchange","title":"Authentication Overview"},{"location":"Implementation-Guide/Authentication/authentication/#authentication-overview","text":"Application Security is a top priority for Finaptic. To ensure we protect our clients, their brand, and most importantly their customer's data we use industry leading Enterprise Identity provider Auth0 for our Consumer Identity Access Management (CIAM).","title":"Authentication Overview"},{"location":"Implementation-Guide/Authentication/authentication/#what-is-auth0","text":"Auth0 is an easy to implement, flexible authentication and authorization platform which is SOC2, ISO 27001, ISO 27018, and PCI DSS compliant. It uses industry standards for authentication such as OIDC, OAuth 2.0, and SAML.","title":"What is Auth0?"},{"location":"Implementation-Guide/Authentication/authentication/#the-basic-overview-of-authentication-flow","text":"The client app initiates an authentication request to Finaptic's partner specific Auth0 provider. Auth0 uses its own user store to get the credentials or routes the request to an Identity Provider through a configured connection. The user authenticates successfully. A token is passed back to the client application. This token is then sent along with every request from the client application to the Finaptic APIs.","title":"The Basic Overview of Authentication Flow"},{"location":"Implementation-Guide/Authentication/authentication/#user-informations","text":"Sources of user information in this context are basically where the user identity information resides. This will depend on your existing user database or identity provider setup. External Identity Providers - Identity Providers are servers that can provide identity information to other servers. Many Identity Providers are supported using various protocols (like OpenID Connect (OIDC), SAML, WS-Federation, etc.) Auth0 Database - If you want to create your own user store, instead of using external identity providers like Google or Facebook, you can use a Database Connection. This way you can authenticate users with an email or username and a password. The credentials can be securely stored either in the Auth0 user store or in your own database. Passwordless (Future) - connections allow users to log in without the need to remember a password. Instead, users enter their mobile phone number or email address and receive a one-time code or link, which they can then use to log in.","title":"User Informations"},{"location":"Implementation-Guide/Authentication/authentication/#user-database","text":"Typical database connection scenarios include: [ Recommended ] Using Auth0 directly as your user store - Auth0 provides the database infrastructure to store your users by default. This scenario provides the best performance for the authentication process since all data is stored in Auth0. The Auth0-hosted database is highly secure. Passwords are never stored or logged in plain text but are hashed with bcrypt. Using your own user store - We recommend migrating your user data to Auth0 in this scenario.","title":"User Database"},{"location":"Implementation-Guide/Authentication/authentication/#migrating-to-auth0-from-a-custom-user-store","text":"Auth0 provides an automatic migration feature that adds your users to the Auth0 database one-at-a-time as each log in and avoids asking your users to reset their passwords all at the same time. A bulk import to Auth0 user store is also an option.","title":"Migrating to Auth0 from a custom user store"},{"location":"Implementation-Guide/Authentication/authentication/#authorization-code-flow-with-proof-key-for-code-exchange-pkce","text":"We use PKCE to mitigate security concerns posed by an authorization code Flow alone. Such as a native app cannot securely store a client secret which would be bound to the app and is the same for all users and devices. The user clicks Login within the application. Finaptc's SDK, using Auth0's SDK creates a cryptographically-random code verifier and from this generates a code challenge. The SDK redirects the user to the Auth0 Authorization Server along with the code challenge. The authorization server redirects the user to the login and authorization prompt. The user authenticates using one of the configured login options (Email/Password, Google, etc.). The authorization server stores the code challenge and redirects the user back to the application with an authorization code. The SDK sends this code and the code verifier (created in step 2) to the authorization server. The authorization server verifies the code challenge and code verifier. The authorization server responds with an ID Token and Access Token (and optionally, a Refresh Token). The client application can use this access token to call the FInaptic API to access information. The API responds with requested data.","title":"Authorization Code Flow with Proof Key for Code Exchange (PKCE)"},{"location":"Implementation-Guide/Authentication/authentication/#multi-factor-authentication","text":"Multi-factor authentication (MFA) provides a method to verify a user's identity by requiring them to provide more than one piece of identifying information. This ensures that only valid users can access their accounts even if they use a username and password that may have been compromised from a different application. Support MFA channels include: In App push notifications [ Recommended ] - Send users push notifications to their pre-registered devices, typically a mobile phone or tablet, from which a user can immediately allow or deny account access via the simple press of a button. One-Time passwords - One-time passwords allow you to use an authenticator application on the user's personal device, such as Google Authenticator, to generate a one-time password that changes over time, and which can be entered as the second factor to validate an account. Email - Enable users to perform MFA using one-time passwords delivered through email when they don't have other authentication factors available SMS Notification - Send users a one-time code over SMS which the user is then prompted to enter before they can finish authenticating.","title":"Multi-Factor Authentication"},{"location":"Implementation-Guide/Authentication/authentication/#step-up-multi-factor-authentication","text":"With step-up authentication, applications that allow access to different types of resources can require users to authenticate with a stronger authentication mechanism to access sensitive resources. The client logins They access a less sensitive part of the application Next, they try to access more sensitive data, like their full card number. The Finaptic API enforces that MFA is required for this use case. The client application asks the users for their 2nd factor to \"Step up\" their authentication. The Finaptic API accepts the new token and returns the sensitive data.","title":"Step-up Multi-Factor Authentication"},{"location":"Implementation-Guide/Authentication/authentication/#attack-protection-features","text":"Feature Risk Signal How it works Bot Detection IP reputation computed by analyzing the quality of traffic seen for each IP. Triggers a CAPTCHA step when a login attempt comes from an IP suspected of use by a bot. Suspicious IP Throttling Velocity of login attempts from an IP for any number of accounts against a tenant. Detects when a bot/script tries too many username/password combinations within a short period of time. Brute-force Protection Velocity of login attempts from an IP for a particular account. Detects when a bad actor tries to login to an account too many times within a period of time. Breached Password Detection Use of a breached password that appears in lists of breached passwords on the dark web. Stops users from using passwords that are known to be breached in some 3P sites.","title":"Attack Protection Features"},{"location":"Implementation-Guide/Authentication/authentication/#biometrics-wip","text":"Keychain biometric protection: The long-term session credentials must be protected by biometric authentication. For iOS, this means ensuring kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly is configured (a device without a passcode can't have biometric), and this ensures this credential won't be usable through keychain syncing. kSecAccessControlBiometryAny must also be configured for keychain stored credentials. Equivalent implementation on Android.","title":"Biometrics (WIP)"},{"location":"Implementation-Guide/Authentication/authentication/#integrating-with-your-application","text":"Integrating with Finaptic and Auth0 will depend heavily on your use case and application design. As part of the Finaptic SDK we provide the necessary configurations to integrate with Auth0 and recommend you use our SDK. You can also use any of the Auth0 native SDKs that provide support for mobile (Android, iOS). Finally, it's also possible to use any Vendor agnostic OpenID Connect library in your implementation. Please refer to Auth0's documentation for details on the API contract . You can also refer to our SDK for details on the authentication client for Auth0.","title":"Integrating with your Application"},{"location":"Implementation-Guide/Authentication/authentication/#links-and-other-references","text":"User sources connections Step-up Authentication OpenID Connect RFC 7636: Proof Key for Code Exchange","title":"Links and other references"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/","text":"Authorized User Overview \u00b6 Welcome to Finaptic's Authorized User Service. We make it simple to share your account and finances with family members, loved ones and employees; and all done digitally. This documentation includes comprehensive information to arm you with an understanding of Finaptic's Authorized User offering. Guide Purpose \u00b6 This guide will Educate you on Finaptic's Authorized User Service Guide you on Experience Links to related Authorized User topics Onboarding Sequence Diagram Onboarding Overview Productless Onboarding Architecture to Onboard an Authorized User What is an Authorized User? \u00b6 An Authorized User is a person allowed to manage your account. For Deposit accounts, Authorized Users are usually family members, such as a child or a spouse and they do not have account decision making permissions. They can use another person's account but aren\u2019t legally responsible for paying bills associated with the account. Authorized Users are not Primary Account Holders and their Account level privileges differ. Onboarding of an Authorized User \u00b6 KYC/AML regulations guide the onboarding of an Authorized User with 2 variables that influence the Onboarding Experience of an Authorized User: Product-type they are being added to as an Authorized User Their age at time of being added as an Authorized User Onboarding an Authorized User by Product-type \u00b6 Product Type ID Verify an Authorized User Deposit Non-Interest Earning Yes for anybody aged 16 & over Deposit Interest Earning Yes for anybody aged 16 & over Credit Card No Onboarding an Authorized User by Age \u00b6 Age Brackets FINTRAC Requirement Finaptic Technology Policy Available 0 - 11 years of age ID Verification is Optional Don't ID Verify Child Must ID Verify Parent/Guardian Details below : Parent/Guardian ID must be verified (ID does not be re-verified if on file but parent/guardian should be authenticated or provide acknowledgment) Yes 12 - 15 years of age ID Verification is Optional Same as above; 0-11 years of age Yes 16+ years of age ID Verification is Required Must ID Verify like an Adult No List of fields to collect when Onboarding an Authorized User aged 15 years of age & younger \u00b6 CATEGORIES RATIONALE FIELDS APPLIES TO PERSONAL Collect basic applicant information for communication & vetting purposes - Full Legal Name - Middle Name (optional) - Email Address All Product-types All age groups Account Privileges by Relationship Type \u00b6 PRIVILEGES A PRIMARY ACCOUNT HOLDER CAN AN AUTHORIZED USER CAN Add, Remove or View Account Holders Add or Remove an Authorized User YES YES View a list of other Account Holders YES YES Statements & Transactions View other Account Holders Transactions YES YES Receive Transactions Alerts YES - Move Money Send or Receive Money using Interac YES YES Move Money (Between Accounts they have access to) YES YES Add, Remove or Change other account holders auto-deposit YES YES Visualizing the Authorized User Architecture \u00b6 Visualizing the Experience of Inviting, Adding & Onboarding an Authorized User \u00b6 View it in Miro Onboarding without a Product \u00b6 An Authorized User is onboarded to the platform via the Productless Onboarding Flow; Technical Implementation below. A detailed overview of our Productless Onboarding can be found in the Productless Onboarding section. API Overview \u00b6 There are over 50 Onboarding API types which are discoverable on the Onboarding API Specification section.","title":"Authorized User Overview"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#authorized-user-overview","text":"Welcome to Finaptic's Authorized User Service. We make it simple to share your account and finances with family members, loved ones and employees; and all done digitally. This documentation includes comprehensive information to arm you with an understanding of Finaptic's Authorized User offering.","title":"Authorized User Overview"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#guide-purpose","text":"This guide will Educate you on Finaptic's Authorized User Service Guide you on Experience Links to related Authorized User topics Onboarding Sequence Diagram Onboarding Overview Productless Onboarding Architecture to Onboard an Authorized User","title":"Guide Purpose"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#what-is-an-authorized-user","text":"An Authorized User is a person allowed to manage your account. For Deposit accounts, Authorized Users are usually family members, such as a child or a spouse and they do not have account decision making permissions. They can use another person's account but aren\u2019t legally responsible for paying bills associated with the account. Authorized Users are not Primary Account Holders and their Account level privileges differ.","title":"What is an Authorized User?"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#onboarding-of-an-authorized-user","text":"KYC/AML regulations guide the onboarding of an Authorized User with 2 variables that influence the Onboarding Experience of an Authorized User: Product-type they are being added to as an Authorized User Their age at time of being added as an Authorized User","title":"Onboarding of an Authorized User"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#onboarding-an-authorized-user-by-product-type","text":"Product Type ID Verify an Authorized User Deposit Non-Interest Earning Yes for anybody aged 16 & over Deposit Interest Earning Yes for anybody aged 16 & over Credit Card No","title":"Onboarding an Authorized User by Product-type"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#onboarding-an-authorized-user-by-age","text":"Age Brackets FINTRAC Requirement Finaptic Technology Policy Available 0 - 11 years of age ID Verification is Optional Don't ID Verify Child Must ID Verify Parent/Guardian Details below : Parent/Guardian ID must be verified (ID does not be re-verified if on file but parent/guardian should be authenticated or provide acknowledgment) Yes 12 - 15 years of age ID Verification is Optional Same as above; 0-11 years of age Yes 16+ years of age ID Verification is Required Must ID Verify like an Adult No","title":"Onboarding an Authorized User by Age"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#list-of-fields-to-collect-when-onboarding-an-authorized-user-aged-15-years-of-age-younger","text":"CATEGORIES RATIONALE FIELDS APPLIES TO PERSONAL Collect basic applicant information for communication & vetting purposes - Full Legal Name - Middle Name (optional) - Email Address All Product-types All age groups","title":"List of fields to collect when Onboarding an Authorized User aged 15 years of age &amp; younger"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#account-privileges-by-relationship-type","text":"PRIVILEGES A PRIMARY ACCOUNT HOLDER CAN AN AUTHORIZED USER CAN Add, Remove or View Account Holders Add or Remove an Authorized User YES YES View a list of other Account Holders YES YES Statements & Transactions View other Account Holders Transactions YES YES Receive Transactions Alerts YES - Move Money Send or Receive Money using Interac YES YES Move Money (Between Accounts they have access to) YES YES Add, Remove or Change other account holders auto-deposit YES YES","title":"Account Privileges by Relationship Type"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#visualizing-the-authorized-user-architecture","text":"","title":"Visualizing the Authorized User Architecture"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#visualizing-the-experience-of-inviting-adding-onboarding-an-authorized-user","text":"View it in Miro","title":"Visualizing the Experience of Inviting, Adding &amp; Onboarding an Authorized User"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#onboarding-without-a-product","text":"An Authorized User is onboarded to the platform via the Productless Onboarding Flow; Technical Implementation below. A detailed overview of our Productless Onboarding can be found in the Productless Onboarding section.","title":"Onboarding without a Product"},{"location":"Implementation-Guide/Banking/Authorized-User/AuthorizedUserDocumentation/#api-overview","text":"There are over 50 Onboarding API types which are discoverable on the Onboarding API Specification section.","title":"API Overview"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/","text":"Deposits Account Overview \u00b6 Welcome to Finaptic\u2019s Core Banking Product that offers flexible solutions for everyday transactions. This documentation includes comprehensive information for delivering compliant Core Banking products and integrating with Finaptic\u2019s Core Banking Product Service. Guide Purpose \u00b6 This guide will Educate you on Finaptic\u2019s Core Banking Service Arm you with an API specifications for effective integration About the Product \u00b6 What is a Deposit Account? \u00b6 A bank account with a financial institution to let you deposit, transfer and withdraw money, subject to terms that are defined in the account agreement. Benefits of a Deposit Account \u00b6 Deposit Accounts offer high liquidity. Your money is always available offering the convenience to pay bills, deposit paychecks and transfer money between deposit accounts; and there are no penalties for early withdrawal to worry about. Finaptic delivers a customizable deposit account offering \u00b6 What to expect in our Initial Release? \u00b6 In the Initial Release, a Deposit Account will enjoy the below benefits Feature Category Feature Set Available Deposit Account Depost Account Yes Pre-Paid MasterCard Yes Earn Interest - Foreign Currency Account - Set Transaction Limits - Set Minimum Balance - Set Account Level Fees - Relationship Authorized User Yes Money Movement Internal Transfers Yes Email Money Transfer Yes Interac Receive Yes Interac Send - International Money Transfer - Mobile Remote Cheque Deposit Capture - ATM Withdrawals/Cheque Deposits - Request For Money - Receiving/Sending Account Number Routing (ANR) Notifications Transaction Notifications - Transaction History Yes Transaction Filtering Yes Statements - API Overview \u00b6 There are 8 foundational API Calls to drive the creation & management of a Deposit Account. Link to the complete API specifications can be found - Core Banking API Specification . CreateAccountRequest Used to perform the asynchronous operation of creating a new Account. Performing this operation will generate an asynchronous response of type CreateAccountResponse, on the response topic. This API call will trigger the type of account to open between product catalog and requester domain including the paramaters of an account as defined in the banking layer smart contract. AccountCreatedEvent An event that is raised when a Core-Banking Account is successfully created, following a CreateAccountRequest. With this API call one will identify account details; such as primary account holder name, authorized user name, account number and whether it is an interest earning account or not. AccountDetails Represents the details of a Core-Banking Account This API will enable identication of account status, list of primary & authorized users including accrued interest to date. GetAccountDetailsRequest A parameter to the GetAccountDetails operation, in order to determine which Account to retrieve the details from This API call is used to determine that the requesting customer has appropriate access to retrieve account details. AccountStatusChangedEvent An event raised when an Account changes status; and this API will track the updated status on an account including addition/removal of authorized users. AccountStatus An enumeration indicating the status of an Account. All accounts are created in the ACCOUNT_STATUS_INACTIVE state by default. There are 3 Account Statuses - Active, Inactive and Unspecified; and each representing a different account state. ChangeAccountStatusRequest This API call is used to perform the asynchronous operation of changing an Account's status. Performing this operation will generate an asynchronous response of type ChangeAccountStatusResponse, on the response topic. Accounts Exposes specific operations related to deposit accounts to retrieve general information about an Account, such as such as balance, status, primary account holder name, authorized user name, account number and whether it is an interest earning account or not. Visualizing Critical Experiences \u00b6 Additional Account Creation \u00b6 Additional Account Creation is the creation of deposit accounts post the creation of a client profile. Outlined below is the flow of events to ensure a seamless and compliant creation of additional accounts in under 5 steps. API Overview \u00b6 An overview of our Core Banking API types are discoverable on the Core Banking API Specification section.","title":"Deposits Account Overview"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#deposits-account-overview","text":"Welcome to Finaptic\u2019s Core Banking Product that offers flexible solutions for everyday transactions. This documentation includes comprehensive information for delivering compliant Core Banking products and integrating with Finaptic\u2019s Core Banking Product Service.","title":"Deposits Account Overview"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#guide-purpose","text":"This guide will Educate you on Finaptic\u2019s Core Banking Service Arm you with an API specifications for effective integration","title":"Guide Purpose"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#about-the-product","text":"","title":"About the Product"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#what-is-a-deposit-account","text":"A bank account with a financial institution to let you deposit, transfer and withdraw money, subject to terms that are defined in the account agreement.","title":"What is a Deposit Account?"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#benefits-of-a-deposit-account","text":"Deposit Accounts offer high liquidity. Your money is always available offering the convenience to pay bills, deposit paychecks and transfer money between deposit accounts; and there are no penalties for early withdrawal to worry about.","title":"Benefits of a Deposit Account"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#finaptic-delivers-a-customizable-deposit-account-offering","text":"","title":"Finaptic delivers a customizable deposit account offering"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#what-to-expect-in-our-initial-release","text":"In the Initial Release, a Deposit Account will enjoy the below benefits Feature Category Feature Set Available Deposit Account Depost Account Yes Pre-Paid MasterCard Yes Earn Interest - Foreign Currency Account - Set Transaction Limits - Set Minimum Balance - Set Account Level Fees - Relationship Authorized User Yes Money Movement Internal Transfers Yes Email Money Transfer Yes Interac Receive Yes Interac Send - International Money Transfer - Mobile Remote Cheque Deposit Capture - ATM Withdrawals/Cheque Deposits - Request For Money - Receiving/Sending Account Number Routing (ANR) Notifications Transaction Notifications - Transaction History Yes Transaction Filtering Yes Statements -","title":"What to expect in our Initial Release?"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#api-overview","text":"There are 8 foundational API Calls to drive the creation & management of a Deposit Account. Link to the complete API specifications can be found - Core Banking API Specification . CreateAccountRequest Used to perform the asynchronous operation of creating a new Account. Performing this operation will generate an asynchronous response of type CreateAccountResponse, on the response topic. This API call will trigger the type of account to open between product catalog and requester domain including the paramaters of an account as defined in the banking layer smart contract. AccountCreatedEvent An event that is raised when a Core-Banking Account is successfully created, following a CreateAccountRequest. With this API call one will identify account details; such as primary account holder name, authorized user name, account number and whether it is an interest earning account or not. AccountDetails Represents the details of a Core-Banking Account This API will enable identication of account status, list of primary & authorized users including accrued interest to date. GetAccountDetailsRequest A parameter to the GetAccountDetails operation, in order to determine which Account to retrieve the details from This API call is used to determine that the requesting customer has appropriate access to retrieve account details. AccountStatusChangedEvent An event raised when an Account changes status; and this API will track the updated status on an account including addition/removal of authorized users. AccountStatus An enumeration indicating the status of an Account. All accounts are created in the ACCOUNT_STATUS_INACTIVE state by default. There are 3 Account Statuses - Active, Inactive and Unspecified; and each representing a different account state. ChangeAccountStatusRequest This API call is used to perform the asynchronous operation of changing an Account's status. Performing this operation will generate an asynchronous response of type ChangeAccountStatusResponse, on the response topic. Accounts Exposes specific operations related to deposit accounts to retrieve general information about an Account, such as such as balance, status, primary account holder name, authorized user name, account number and whether it is an interest earning account or not.","title":"API Overview"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#visualizing-critical-experiences","text":"","title":"Visualizing Critical Experiences"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#additional-account-creation","text":"Additional Account Creation is the creation of deposit accounts post the creation of a client profile. Outlined below is the flow of events to ensure a seamless and compliant creation of additional accounts in under 5 steps.","title":"Additional Account Creation"},{"location":"Implementation-Guide/Banking/Deposit-Accounts/DepositAccountGuide/#api-overview_1","text":"An overview of our Core Banking API types are discoverable on the Core Banking API Specification section.","title":"API Overview"},{"location":"Implementation-Guide/Cards/corecard/","text":"Cards Overview \u00b6 Introduction \u00b6 Finaptic offers its customers access to create Cards that link to other products, and serve as an access vehicle via the Mastercard Network. End users are able to use the card to access funds in the funding account associated with the card. The Core Card API enables customers to build various experiences that provide their customers with virtual and physical cards. Guide Purpose \u00b6 This guide will: Provide an overview on Card services available to Finaptic customers. Provide an API overview for effective integration About the Product \u00b6 What are cards? \u00b6 Finaptic enables its customers to issue a Mastercard branded product to users. These cards must be linked to a deposit account through the Customer Onboarding process. Once cards are created through this process, a number of functionalities are available to support the operation, management, and account functions of the card. Cards service exposes operations related to listing and retrieving details for Cards issued. It is a real gRPC service accessible in a synchronous manner. Virtual Cards \u00b6 Finaptic takes data security seriously, and as such, does not expose through data the card number, CVV, or expiry date. As such, providing the end-user with these values requires the generation of a token, which is then used to reveal card details to the end-user in a graphical format. An example of this can be seen in the Virtual Card Display section below. Physical Cards \u00b6 Finaptic does not offer physical cards at this time. This planned functionality will be defined in a future release. API Overview \u00b6 Cards \u00b6 GetCard \u00b6 rpc GetCard([GetCardRequest]/../../API-Specifications/corecard/(#thebaasco.tenant.corecard.v1.GetCardRequest)) Card GetCard retrieves generic details about a single Card. The card data returned does not contain any sensitive information such as card number or expiration date. Only users associated with the Card will be able to invoke this endpoint and retrieve details for a given Card. ListCards \u00b6 rpc ListCards( ListCardsRequest ) ListCardsResponse ListCards lists all Cards associated to the current user. The information returned does not contain any sensitive information such as card number or expiration date. This endpoint uses pagination to allow listing the Cards in smaller, easy to manage, chunks. CreateCardSDKSignOnToken \u00b6 rpc CreateCardSDKSignOnToken( CreateCardSDKSignOnTokenRequest ) CreateCardSDKSignOnTokenResponse CreateCardSDKSignOnToken generates a single-use, limited duration token, which is used by the Front End SDK to retrieve sensitive information about Cards. The SDK is necessary when performing sensitive operations like retrieving the Card's number (PAN), expiration date, CVV, or resetting the Card's PIN. CardsCommands \u00b6 CardsCommandsService is a key component of Core Card API thar exposes asynchronous operations that alter the state of a Card. It is not directly accessible by consumers as a gRPC service, it instead uses Google PubSub as delivery mechanism for requests and responses. We include it in the documentation as a reference for a better understanding of the responsibilities and API surface of this domain CreateCard \u00b6 rpc CreateCard( CreateCardRequest ) Card CreateCard is an asynchronous operation used to create a new Card. Performing this operation will generate an asynchronous response of type Card on the response topic. When creating the card, the information contained in the Client-Profile domain for current user will be used to populate Card information such as name on card, and billing address. As result of a successful card creation, a business event of type CardCreatedEvent will be issued UpdateCard \u00b6 rpc UpdateCard( UpdateCardRequest ) Card UpdateCard is an asynchronous operation used to update details of a Card. Performing this operation will generate an asynchronous response of type Card on the response topic. As result of a successful card update, a business event of type CardUpdatedEvent will be issued Errors \u00b6 No error information is available at this time Visualizing Critical Experiences \u00b6 Finaptic has provided the screen elements below for reference purposes. This process outlines a possible user flow representation of what your customer experience could resemble. Certain elements of the experience, such as card display, must be presented as prescribed, while others may be fully built into your user experience. Virtual Card Display \u00b6 It is recommended that the card be presented to the user as a graphical representation matching the card art that you have submitted to Finaptic during your distribution partner onboarding process. An option to reveal card number can be presented to the user. Finaptic recommends an additional layer of security here, such as re-validation of password, or an on-device validation function. The image of the card art, containing the card number, CVV value, and expiry is then revealed to the user. These value do not pass through the system, but are displayed in an image format.","title":"Cards Overview"},{"location":"Implementation-Guide/Cards/corecard/#cards-overview","text":"","title":"Cards Overview"},{"location":"Implementation-Guide/Cards/corecard/#introduction","text":"Finaptic offers its customers access to create Cards that link to other products, and serve as an access vehicle via the Mastercard Network. End users are able to use the card to access funds in the funding account associated with the card. The Core Card API enables customers to build various experiences that provide their customers with virtual and physical cards.","title":"Introduction"},{"location":"Implementation-Guide/Cards/corecard/#guide-purpose","text":"This guide will: Provide an overview on Card services available to Finaptic customers. Provide an API overview for effective integration","title":"Guide Purpose"},{"location":"Implementation-Guide/Cards/corecard/#about-the-product","text":"","title":"About the Product"},{"location":"Implementation-Guide/Cards/corecard/#what-are-cards","text":"Finaptic enables its customers to issue a Mastercard branded product to users. These cards must be linked to a deposit account through the Customer Onboarding process. Once cards are created through this process, a number of functionalities are available to support the operation, management, and account functions of the card. Cards service exposes operations related to listing and retrieving details for Cards issued. It is a real gRPC service accessible in a synchronous manner.","title":"What are cards?"},{"location":"Implementation-Guide/Cards/corecard/#virtual-cards","text":"Finaptic takes data security seriously, and as such, does not expose through data the card number, CVV, or expiry date. As such, providing the end-user with these values requires the generation of a token, which is then used to reveal card details to the end-user in a graphical format. An example of this can be seen in the Virtual Card Display section below.","title":"Virtual Cards"},{"location":"Implementation-Guide/Cards/corecard/#physical-cards","text":"Finaptic does not offer physical cards at this time. This planned functionality will be defined in a future release.","title":"Physical Cards"},{"location":"Implementation-Guide/Cards/corecard/#api-overview","text":"","title":"API Overview"},{"location":"Implementation-Guide/Cards/corecard/#cards","text":"","title":"Cards"},{"location":"Implementation-Guide/Cards/corecard/#getcard","text":"rpc GetCard([GetCardRequest]/../../API-Specifications/corecard/(#thebaasco.tenant.corecard.v1.GetCardRequest)) Card GetCard retrieves generic details about a single Card. The card data returned does not contain any sensitive information such as card number or expiration date. Only users associated with the Card will be able to invoke this endpoint and retrieve details for a given Card.","title":"GetCard"},{"location":"Implementation-Guide/Cards/corecard/#listcards","text":"rpc ListCards( ListCardsRequest ) ListCardsResponse ListCards lists all Cards associated to the current user. The information returned does not contain any sensitive information such as card number or expiration date. This endpoint uses pagination to allow listing the Cards in smaller, easy to manage, chunks.","title":"ListCards"},{"location":"Implementation-Guide/Cards/corecard/#createcardsdksignontoken","text":"rpc CreateCardSDKSignOnToken( CreateCardSDKSignOnTokenRequest ) CreateCardSDKSignOnTokenResponse CreateCardSDKSignOnToken generates a single-use, limited duration token, which is used by the Front End SDK to retrieve sensitive information about Cards. The SDK is necessary when performing sensitive operations like retrieving the Card's number (PAN), expiration date, CVV, or resetting the Card's PIN.","title":"CreateCardSDKSignOnToken"},{"location":"Implementation-Guide/Cards/corecard/#cardscommands","text":"CardsCommandsService is a key component of Core Card API thar exposes asynchronous operations that alter the state of a Card. It is not directly accessible by consumers as a gRPC service, it instead uses Google PubSub as delivery mechanism for requests and responses. We include it in the documentation as a reference for a better understanding of the responsibilities and API surface of this domain","title":"CardsCommands"},{"location":"Implementation-Guide/Cards/corecard/#createcard","text":"rpc CreateCard( CreateCardRequest ) Card CreateCard is an asynchronous operation used to create a new Card. Performing this operation will generate an asynchronous response of type Card on the response topic. When creating the card, the information contained in the Client-Profile domain for current user will be used to populate Card information such as name on card, and billing address. As result of a successful card creation, a business event of type CardCreatedEvent will be issued","title":"CreateCard"},{"location":"Implementation-Guide/Cards/corecard/#updatecard","text":"rpc UpdateCard( UpdateCardRequest ) Card UpdateCard is an asynchronous operation used to update details of a Card. Performing this operation will generate an asynchronous response of type Card on the response topic. As result of a successful card update, a business event of type CardUpdatedEvent will be issued","title":"UpdateCard"},{"location":"Implementation-Guide/Cards/corecard/#errors","text":"No error information is available at this time","title":"Errors"},{"location":"Implementation-Guide/Cards/corecard/#visualizing-critical-experiences","text":"Finaptic has provided the screen elements below for reference purposes. This process outlines a possible user flow representation of what your customer experience could resemble. Certain elements of the experience, such as card display, must be presented as prescribed, while others may be fully built into your user experience.","title":"Visualizing Critical Experiences"},{"location":"Implementation-Guide/Cards/corecard/#virtual-card-display","text":"It is recommended that the card be presented to the user as a graphical representation matching the card art that you have submitted to Finaptic during your distribution partner onboarding process. An option to reveal card number can be presented to the user. Finaptic recommends an additional layer of security here, such as re-validation of password, or an on-device validation function. The image of the card art, containing the card number, CVV value, and expiry is then revealed to the user. These value do not pass through the system, but are displayed in an image format.","title":"Virtual Card Display"},{"location":"Implementation-Guide/Client-Profile/ClientProfileGuide/","text":"Client Profile Guide \u00b6 The customer profile domain\u2019s primary purpose is to be the canonical reference for customer demographics (IDs, addresses, contact information, date of birth, gender, etc.) and linked entity information. In addition, the domain stores relationships between customers, customer stakeholders (accountants, friends, family, parent/child/dependant), customers and partners, and know-your-customer (KYC) status. The demographic information collected on a customer is thoroughly described in the onboarding domain . In addition to those demographics, we are required to track relationships between individual parties as part of our AML and Risk compliance program. These relationship types are described as a part of the Fintrac STR batch specification and guide . Finaptic recommends partners collect their own demographic information, with proper consents and disclosures to the customer, for the purposes of their own application, business, or CRM. Client Profile Field Change Guide \u00b6 The APIs provided by the customer profile domain can be used to provide the functionality to your customers to update their demographic information when it is related to their financial products. For example, if they change primary residences, telephone numbers, or employment. Certain information on the customer profile can not be changed directly as it requires going through the KYC process, such as ID verification. A re-verification will have to be triggered through the onboarding APIs when an ID, Name or Date Of Birth needs to be updated. Field Name Requires KYC / Re-onboarding steps to change field Requires KYC / Re-onboarding steps to add an additional fields. (N/A means only one exists on a profile) First Name, Middle Name, Last Name Yes N/A Date of Birth Yes N/A Contact Details - Telelphone number No No Contact Details - Email Address Yes No Employment No N/A Customer Residency Yes N/A Add/Remove Other Tax Residence No No Address (Primary) Yes N/A Identity Document Details Yes Yes Links \u00b6 Customer Profile API Specification Onboarding API Specification Onboarding API Specification Fintrac Suspicious Transaction report batch specification and guide .","title":"Client Profile Guide"},{"location":"Implementation-Guide/Client-Profile/ClientProfileGuide/#client-profile-guide","text":"The customer profile domain\u2019s primary purpose is to be the canonical reference for customer demographics (IDs, addresses, contact information, date of birth, gender, etc.) and linked entity information. In addition, the domain stores relationships between customers, customer stakeholders (accountants, friends, family, parent/child/dependant), customers and partners, and know-your-customer (KYC) status. The demographic information collected on a customer is thoroughly described in the onboarding domain . In addition to those demographics, we are required to track relationships between individual parties as part of our AML and Risk compliance program. These relationship types are described as a part of the Fintrac STR batch specification and guide . Finaptic recommends partners collect their own demographic information, with proper consents and disclosures to the customer, for the purposes of their own application, business, or CRM.","title":"Client Profile Guide"},{"location":"Implementation-Guide/Client-Profile/ClientProfileGuide/#client-profile-field-change-guide","text":"The APIs provided by the customer profile domain can be used to provide the functionality to your customers to update their demographic information when it is related to their financial products. For example, if they change primary residences, telephone numbers, or employment. Certain information on the customer profile can not be changed directly as it requires going through the KYC process, such as ID verification. A re-verification will have to be triggered through the onboarding APIs when an ID, Name or Date Of Birth needs to be updated. Field Name Requires KYC / Re-onboarding steps to change field Requires KYC / Re-onboarding steps to add an additional fields. (N/A means only one exists on a profile) First Name, Middle Name, Last Name Yes N/A Date of Birth Yes N/A Contact Details - Telelphone number No No Contact Details - Email Address Yes No Employment No N/A Customer Residency Yes N/A Add/Remove Other Tax Residence No No Address (Primary) Yes N/A Identity Document Details Yes Yes","title":"Client Profile Field Change Guide"},{"location":"Implementation-Guide/Client-Profile/ClientProfileGuide/#links","text":"Customer Profile API Specification Onboarding API Specification Onboarding API Specification Fintrac Suspicious Transaction report batch specification and guide .","title":"Links"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/","text":"Complaint Handling Policy and Procedures \u00b6 Introduction \u00b6 Finaptic and it's partners have an obligation to have an appropriate and effective written policy and procedure for dealing with complaints fairly and in compliance with consumer protection regulations. This document describes how customer complaints, including reportable complaints, as defined by regulation, are managed by the Distribution Partners, Finaptic, and Finaptic's banking license partner (the \" Bank \") in an effective, accessible and timely manner. Definition of a Complaint \u00b6 A consumer complaint is generally understood to be an expression of dissatisfaction with a product or service made by a customer, and to which a response is expected, whether that be a specific response like a financial reimbursement, or a less specific response such as improvement of a function or feature. Regulatory Definition of Complaint \u00b6 Under banking legislation, the current Complaints Regulation defines complaint as a complaint that is made by a person (a) to a bank or an authorized foreign bank about a product or service that was requested or received by the person from the bank or authorized foreign bank; or (b) to an external complaints body about a product or service that was requested or received by the person from a member of that body. The upcoming new definition of complaint under Bill C-86 will expand the definition of complaint to include the term dissatisfaction, adopting a more consumer protection approach. A complaint is deemed a complaint whether or not it is justified: complaint means dissatisfaction, whether justified or not, expressed to an institution with respect to (a) a product or service in Canada that is offered, sold or provided by the institution; or (b) the manner in which a product or service in Canada is offered, sold or provided by the institution. Further the definition of complaint no longer requires an action from the customer to 'request or receive' the product or service - the complaint can be with respect to the offer, sale or provision of the product or service by the institution. The change in language is meant to address complaints related to questionable sales practices by financial institutions that have been under considerable scrutiny by the FCAC the past number of years. It applies to the Bank as it is the financial institution that 'provides' the products the Distribution Partner is offering and selling to its customers. The broader definition of a 'complaint' is coming into force on June 30, 2022. Finaptic will continue to follow the FCAC Procedures for Reportable Complaints, as referenced below, and the current definition of 'complaint' until such time as the Bank requires Finaptic to make changes to comply with new regulations. Complaint Submission Procedures \u00b6 There are several ways a customer can communicate a complaint - and upon investigation may be found to be a Reportable Complaint as defined by regulation. A customer can submit a complaint through one or more of the following channels: By calling the Distribution partner's customer service toll-free telephone number By sending a secure message or initiating a chat in the Distribution Partner's Mobile App By submitting a complaint in writing through direct mail to the Distribution Partner By contacting the Bank through any of its' channels By contacting the External Ombudsman disclosed in product documents and the Distribution Partner's electronic channels By contacting the FCAC All complaints, no matter the source or the channel through which it is received, must be recorded in a complaint log and the template details must be completed. Detailed Response Timeline for Complaint Management (Timelines TBD) \u00b6 Acknowledgement of a complaint message made in App. Response time of <?> minutes for a call to the Distribution Partner\u2019s Toll-Free number. Within <?> business days of receipt the Distribution Partner\u2019s customer service team will attempt to contact the customer to try and resolve the complaint. In some extremely rare cases the complaint cannot be resolved by the Distribution Partner\u2019s. In this case, the complaint will be escalated to Finaptic. Within <?> business days, Finaptic will provide a final decision on how to handle the complaint, e.g to do something further to accommodate the customer than what has already been offered. Depending on the severity of the complaint, written correspondence to the customer may be necessary. Typically, this type of correspondence is reserved for complaints obtained in writing or received by the customer directly via app. Customers will be notified that the complaint process takes up to <?> business days; that they have the right to contact the Ombudsman at any point in the process. Standards \u00b6 The customer support process must be consistent with market-standard best practices in the financial services industry where the Distribution Partner is operating. Consent must be obtained from the customer by Finaptic or designated service provider when performing support activities. Finaptic shall put in place a process that respects the Customer complaint process requirements of the Financial Consumer Agency of Canada (FCAC. This process shall include: The creation of a complaint handling process, independent from Finaptic's business activities, at least thirty (30) days prior to the commercial launch of the first Authorized Banking Service; Designating an officer or employee in charge of implementing complaint handling procedures Designating at least one officer or employee in charge of receiving and dealing with those complaints Communicating to all customers the customer complaint process that has been put in place in language that is clear, simple and not misleading; Ensuring that the information provided to customers in writing includes: How to contact FCAC How to contact an external complaints body responsible for detailing with customer complaints that haven't been resolved to their satisfaction through the complaint handling procedure Ensuring that the procedures are available: On the Distribution Partner website and app through which products or services are offered in Canada; and In written format to be sent to any person who requests them. Clear and accessible process to logging complaints by the customer; Handling complaints in a timely manner; Clearly communicating the next step available to the Customer at each step of the complaint handling process; Informing the customer that they have access to the highest level of complaint handling; Informing the customer that they must receive a final response to their complaint and that they have 180 days from the time of receiving the final response to appeal to the external ombudsperson office. Monitoring of the complaints process (number of complaints received, number of files open, time to resolve complaints, number of complaints resolved to the satisfaction of the customer, etc.); Sharing a copy of its procedures with the Bank for filing with the Commissioner of FCAC; Making the performance of the customer complaint process available to the Bank upon reasonable request or through the governance mechanisms under its agreement with Finaptic. Levels of Complaint Management and Roles \u00b6 Direct contact with customer (front line) - Distribution Partner 2nd level complaint management (escalation) - Finaptic Ombudsman FCAC Distribution Partner \u00b6 The primary role of the Distribution Partner's customer support, whether it be through a call center, in App or in writing, is to provide the customer assistance with the app functionality, technical support, and publicly available information regarding the product. Customer support representatives receive training specific to handling customer inquiries in the financial services industry, and use a script to obtain consent to assist the customer and view their information. Partner's must use the supplied Complaints Triage document that specifies the types of inquiries they are permitted to assist with. All complaints must be logged according to instructions provided by Finaptic, as detailed in the Complaints Log document, calls and chats are recorded for monitoring and control. If the Distribution Partner is unable to resolve the issue to the customer's satisfaction or the issue requires additional support, a ticket will be opened and the Finaptic team will receive an alert to assist with the complaint. Finaptic \u00b6 Finaptic will manage all escalations as described in the Complaints Triage and document steps taken in the Complaints Log for the relevant Distribution Partner.","title":"Complaint Handling Policy and Procedures"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/#complaint-handling-policy-and-procedures","text":"","title":"Complaint Handling Policy and Procedures"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/#introduction","text":"Finaptic and it's partners have an obligation to have an appropriate and effective written policy and procedure for dealing with complaints fairly and in compliance with consumer protection regulations. This document describes how customer complaints, including reportable complaints, as defined by regulation, are managed by the Distribution Partners, Finaptic, and Finaptic's banking license partner (the \" Bank \") in an effective, accessible and timely manner.","title":"Introduction"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/#definition-of-a-complaint","text":"A consumer complaint is generally understood to be an expression of dissatisfaction with a product or service made by a customer, and to which a response is expected, whether that be a specific response like a financial reimbursement, or a less specific response such as improvement of a function or feature.","title":"Definition of a Complaint"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/#regulatory-definition-of-complaint","text":"Under banking legislation, the current Complaints Regulation defines complaint as a complaint that is made by a person (a) to a bank or an authorized foreign bank about a product or service that was requested or received by the person from the bank or authorized foreign bank; or (b) to an external complaints body about a product or service that was requested or received by the person from a member of that body. The upcoming new definition of complaint under Bill C-86 will expand the definition of complaint to include the term dissatisfaction, adopting a more consumer protection approach. A complaint is deemed a complaint whether or not it is justified: complaint means dissatisfaction, whether justified or not, expressed to an institution with respect to (a) a product or service in Canada that is offered, sold or provided by the institution; or (b) the manner in which a product or service in Canada is offered, sold or provided by the institution. Further the definition of complaint no longer requires an action from the customer to 'request or receive' the product or service - the complaint can be with respect to the offer, sale or provision of the product or service by the institution. The change in language is meant to address complaints related to questionable sales practices by financial institutions that have been under considerable scrutiny by the FCAC the past number of years. It applies to the Bank as it is the financial institution that 'provides' the products the Distribution Partner is offering and selling to its customers. The broader definition of a 'complaint' is coming into force on June 30, 2022. Finaptic will continue to follow the FCAC Procedures for Reportable Complaints, as referenced below, and the current definition of 'complaint' until such time as the Bank requires Finaptic to make changes to comply with new regulations.","title":"Regulatory Definition of Complaint"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/#complaint-submission-procedures","text":"There are several ways a customer can communicate a complaint - and upon investigation may be found to be a Reportable Complaint as defined by regulation. A customer can submit a complaint through one or more of the following channels: By calling the Distribution partner's customer service toll-free telephone number By sending a secure message or initiating a chat in the Distribution Partner's Mobile App By submitting a complaint in writing through direct mail to the Distribution Partner By contacting the Bank through any of its' channels By contacting the External Ombudsman disclosed in product documents and the Distribution Partner's electronic channels By contacting the FCAC All complaints, no matter the source or the channel through which it is received, must be recorded in a complaint log and the template details must be completed.","title":"Complaint Submission Procedures"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/#detailed-response-timeline-for-complaint-management-timelines-tbd","text":"Acknowledgement of a complaint message made in App. Response time of <?> minutes for a call to the Distribution Partner\u2019s Toll-Free number. Within <?> business days of receipt the Distribution Partner\u2019s customer service team will attempt to contact the customer to try and resolve the complaint. In some extremely rare cases the complaint cannot be resolved by the Distribution Partner\u2019s. In this case, the complaint will be escalated to Finaptic. Within <?> business days, Finaptic will provide a final decision on how to handle the complaint, e.g to do something further to accommodate the customer than what has already been offered. Depending on the severity of the complaint, written correspondence to the customer may be necessary. Typically, this type of correspondence is reserved for complaints obtained in writing or received by the customer directly via app. Customers will be notified that the complaint process takes up to <?> business days; that they have the right to contact the Ombudsman at any point in the process.","title":"Detailed Response Timeline for Complaint Management (Timelines TBD)"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/#standards","text":"The customer support process must be consistent with market-standard best practices in the financial services industry where the Distribution Partner is operating. Consent must be obtained from the customer by Finaptic or designated service provider when performing support activities. Finaptic shall put in place a process that respects the Customer complaint process requirements of the Financial Consumer Agency of Canada (FCAC. This process shall include: The creation of a complaint handling process, independent from Finaptic's business activities, at least thirty (30) days prior to the commercial launch of the first Authorized Banking Service; Designating an officer or employee in charge of implementing complaint handling procedures Designating at least one officer or employee in charge of receiving and dealing with those complaints Communicating to all customers the customer complaint process that has been put in place in language that is clear, simple and not misleading; Ensuring that the information provided to customers in writing includes: How to contact FCAC How to contact an external complaints body responsible for detailing with customer complaints that haven't been resolved to their satisfaction through the complaint handling procedure Ensuring that the procedures are available: On the Distribution Partner website and app through which products or services are offered in Canada; and In written format to be sent to any person who requests them. Clear and accessible process to logging complaints by the customer; Handling complaints in a timely manner; Clearly communicating the next step available to the Customer at each step of the complaint handling process; Informing the customer that they have access to the highest level of complaint handling; Informing the customer that they must receive a final response to their complaint and that they have 180 days from the time of receiving the final response to appeal to the external ombudsperson office. Monitoring of the complaints process (number of complaints received, number of files open, time to resolve complaints, number of complaints resolved to the satisfaction of the customer, etc.); Sharing a copy of its procedures with the Bank for filing with the Commissioner of FCAC; Making the performance of the customer complaint process available to the Bank upon reasonable request or through the governance mechanisms under its agreement with Finaptic.","title":"Standards"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/#levels-of-complaint-management-and-roles","text":"Direct contact with customer (front line) - Distribution Partner 2nd level complaint management (escalation) - Finaptic Ombudsman FCAC","title":"Levels of Complaint Management and Roles"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/#distribution-partner","text":"The primary role of the Distribution Partner's customer support, whether it be through a call center, in App or in writing, is to provide the customer assistance with the app functionality, technical support, and publicly available information regarding the product. Customer support representatives receive training specific to handling customer inquiries in the financial services industry, and use a script to obtain consent to assist the customer and view their information. Partner's must use the supplied Complaints Triage document that specifies the types of inquiries they are permitted to assist with. All complaints must be logged according to instructions provided by Finaptic, as detailed in the Complaints Log document, calls and chats are recorded for monitoring and control. If the Distribution Partner is unable to resolve the issue to the customer's satisfaction or the issue requires additional support, a ticket will be opened and the Finaptic team will receive an alert to assist with the complaint.","title":"Distribution Partner"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/complaints/#finaptic","text":"Finaptic will manage all escalations as described in the Complaints Triage and document steps taken in the Complaints Log for the relevant Distribution Partner.","title":"Finaptic"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer-service/","text":"Customer Support Inquiry Flow \u00b6 Finaptic provides escalation customer support when it comes to banking-related issues. We do not provide first-line support for any partner-specific application questions or issues. Finaptic provides, as part of our SDK and services, customer support channels, technology, and escalation paths. Definition of Customer service levels \u00b6 Level 0 - Self Serve \u00b6 Self-serve is defined by services and questions that are resolvable through the partner's mobile app, partner's website, or a partner managed chat bot. The partner is shall create self-service FAQs for their own application. Level 1 - Distribution Partners Agent Support \u00b6 The partner is responsible for providing a contact point for all first interactions. Support either by call center with a live agent, chat with a live agent or chat bot. Level 2 - Finaptic \u00b6 Finaptic is responsible for providing assistance if level 1 support is unable to provide resolution when it related to banking specific issues. Escalation will will be initiated by the level 1 customer support agent through the in-app secure chat API. These could include, but are not limited to: Customer transaction disputes Customer reporting fraudulent transactions Incorrect balances or missing transactions Issues in which Finaptic APIs return errors or incorrect information Level 3 - Finaptic (Fraud Operations) \u00b6 Finaptic is responsible for suspected fraud and transaction dispute investigations. These will be escalated internally at Finaptic through the level 2 support agent. Finaptic support for Partner Contact \u00b6 Finaptic provides a customer service portal for partners to contact Finaptic directly. This portal should be used to contact Finaptic with technical questions, report issues, or report customer complaints. References \u00b6 Customer support implementation guide.","title":"Customer Support Inquiry Flow"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer-service/#customer-support-inquiry-flow","text":"Finaptic provides escalation customer support when it comes to banking-related issues. We do not provide first-line support for any partner-specific application questions or issues. Finaptic provides, as part of our SDK and services, customer support channels, technology, and escalation paths.","title":"Customer Support Inquiry Flow"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer-service/#definition-of-customer-service-levels","text":"","title":"Definition of Customer service levels"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer-service/#level-0-self-serve","text":"Self-serve is defined by services and questions that are resolvable through the partner's mobile app, partner's website, or a partner managed chat bot. The partner is shall create self-service FAQs for their own application.","title":"Level 0 - Self Serve"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer-service/#level-1-distribution-partners-agent-support","text":"The partner is responsible for providing a contact point for all first interactions. Support either by call center with a live agent, chat with a live agent or chat bot.","title":"Level 1 - Distribution Partners Agent Support"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer-service/#level-2-finaptic","text":"Finaptic is responsible for providing assistance if level 1 support is unable to provide resolution when it related to banking specific issues. Escalation will will be initiated by the level 1 customer support agent through the in-app secure chat API. These could include, but are not limited to: Customer transaction disputes Customer reporting fraudulent transactions Incorrect balances or missing transactions Issues in which Finaptic APIs return errors or incorrect information","title":"Level 2 - Finaptic"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer-service/#level-3-finaptic-fraud-operations","text":"Finaptic is responsible for suspected fraud and transaction dispute investigations. These will be escalated internally at Finaptic through the level 2 support agent.","title":"Level 3 - Finaptic (Fraud Operations)"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer-service/#finaptic-support-for-partner-contact","text":"Finaptic provides a customer service portal for partners to contact Finaptic directly. This portal should be used to contact Finaptic with technical questions, report issues, or report customer complaints.","title":"Finaptic support for Partner Contact"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer-service/#references","text":"Customer support implementation guide.","title":"References"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/","text":"Customer Support Overview \u00b6 As a Banking as a Service platform, we want to provide customer support to our tenant\u2019s customers. Our goal is to provide this service as cost-effectively as possible and reduce human-to-human touchpoints as much as possible. End users should feel they are interacting with the partners directly and do not need to be aware of Finaptic. Finally, customer data is critical, and employee fraud is a trustbuster for both our relationship with partners and their relationship with their customers. Finaptic provides escalation customer support when it comes to contacts that can not be resolved by the partner, such as technical issues with the Finpatic APIs. We do not provide first-line support for any partner-specific application questions or issues. Finaptic provides, as part of our SDK and services, customer support channels, technology, and escalation paths. Platform for support contacts: Amazon Connect \u00b6 Amazon Connect is an Amazon Web Services (AWS) public cloud customer contact center service. Amazon Connect enables customer service representatives to respond to phone calls or chat inquiries from end customers just as if the contact center infrastructure was set up and managed on premises. L2+ Customer Support Agents (Finaptic Employees) \u00b6 Amazon Connect supports identity federation by configuring SAML2.0 with AWS IAM to enable web-based SSO to the Amazon Connect instance. This allows users to sign in to a portal in our organization hosted by a SAML 2.0 compatible identity provider, Google Workplace in our case, and log in to an Amazon Connect instance with SSO. Customer service agents - Agents use the Amazon Connect Contact Control Panel (CCP) to interact with customer contacts. It's how they receive calls, chat with contacts, transfer them to other agents, put them on hold, and perform other key tasks. Customer service admin - can add users to Amazon Connect, give them their credentials, and assign the appropriate permissions so they can access the features needed to do their job through the instance configuration panel. Partner customer support \u00b6 Partners are responsible for the first level of support for their customers as well support related to their application and business. Partner responsibilities include: Develop your own help documentation and FAQs. Provide staffing and support channels for customer contacts. Including staff that can answer questions about the product, how to perform actions in your application, and technical issues that are not related to Finaptic APIs. Implement an in-app chat that can be used for L1 customer support that enables hand-off to Finaptic for L2 support. Our chat solution is included as part of the Finaptic SDK for easy integration with your application and existing in-application chat support. If you already have a chatbot or support chat interface we can work with you to integrate with our customer support chat APIs hosted in AWS Connect to allow for seamless handoff to our agents when level-2 escalation is necessary. Finaptic is responsible for assisting if level 1 support is unable to provide resolution when it is related to banking-specific issues. Escalation will be initiated by the level 1 customer support agent through the in-app secure chat API. The hand-off to a Finaptic agent can be seamless and transparent to the customer. Example steps in a customer interaction: The customer opens the support widget in the partner's application and requests to speak to an agent. The partner's support agent responds to the customer support request to assist with the question or issue. It is determined that the partner's agent cannot answer the inquiry. The agent triggers an escalation to L2 support from their support tools. This tells the application to call the Finaptic support API to start a chat session with a Finaptic agent. The chat is initiated with the Finaptic support agent who can see the chat history and resolve the issue for the customer. The hand-off can be made transparent to the customer and reuse the same chat window. Partners use their customer service technology \u00b6 The Finaptic Support SDK can be used to programmatically start an L2 chat session using the provided APIs. This way partners can develop their own user experience or use other out-of-the-box support platforms. They will be responsible for using our SDK to initiate chats, open the necessary connection, and handle sending/receiving chat messages through the API when an L2 escalation is needed. In this option, Finaptic provides a simple API service to begin a chat session, and send messages between the customer and the Finaptic support agent. Finaptic does not provide a user interface for connecting to our agents through chat. Distribution partners can customize the chat window with their brand. Finaptic provides the APIs in the SDK to start a chat session and send messages between our agent and another entity. The Distribution Partner is responsible for the on-screen presentation and integration with their own L1 support system. (Future) Partners use an Amazon Connect Instance managed by Finaptic \u00b6 We will deploy an Amazon Connect instance for the customer. Their customer service agents will login in to their own CCP, for example https://tenant-a-prod.aws/ccp-v2/. We provide a \"model home\" setup with existing support flows, chat, and a basic pre-trained chatbot that includes basic banking support functionality (e.g. What's my balance?, How do I open an account?) - See below under \"Chat bot\" on how we can implement this in a partner agnostic way. They can then provide customized questions and responses which we deploy to their chatbot instances running in AWS Lex. Within the Amazon Connect flow there are built in escalation paths to hand-off customer contacts to Finaptic employees. Our Support SDK provides seamless hand-off by initiaing a new L2 Chat connection using the AWS Connect Start Chat API to Finaptic Customer Service Instance. (Future) High level implementation for chat bot \u00b6 Review the Miro board for high level design first. Amazon Connect flow \u00b6 Amazon Connect has a contact flow builder (API) and UI for creating re-usable contact flows components and entire flows. Chat bot (Future) \u00b6 We have developed our chatbot using AWS Lex backed by AWS Lambdas for validation and response fulfillment. The chat widget is a customized version of the default widget and is extensible using the Amazon Connect chat APIs. To prevent data security concerns we developed the chat system to never need access to Finaptic APIs, such that no customer data will go through or be requested in AWS. Thechatbott itself is only used to parse the intents and return templated responses to the client application. The client chat widget will parse the templates and fill in customer data using the client-side API. The chatbot will return a customer payload response such as: { \"templateType\": \"ListAccounts\", \"version\": \"1.0\", \"data\": { \"content\": { \"title\": \"Which account would you like to see the balance on?\", \"subtitle\": \"Tap to select option\", \"elements\": \"$API:GetAccountList\" } } } Template would be rendered as such: The client widget will know how to render this and request the data using the client side SDK. This means all authentication and authorization goes through the exists mechanisms. Data security \u00b6 Since no customer banking data will be stored or accessed from AWS this reduces the surface area for data security requirements. There is still the possibility of customer-submitted PII or sensitive information in the chat box that is parsed on the AWS side. We integrate Amazon Comprehend to automatically detect and redact PII before it gets to the bot intent parser or human contact. Amazon Comprehend uses natural language processing (NLP) to extract insights about the content of documents. Amazon Comprehend processes any text file in UTF-8 format. It develops insights by recognizing the entities, key phrases, language, sentiments, and other common elements in a document. You can use Amazon Comprehend to detect entities in your text that contain personally identifiable information (PII), or PII entities. A PII entity is a textual reference to personal data that could be used to identify an individual, such as an address, bank account number, or phone number.","title":"Customer Support Overview"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/#customer-support-overview","text":"As a Banking as a Service platform, we want to provide customer support to our tenant\u2019s customers. Our goal is to provide this service as cost-effectively as possible and reduce human-to-human touchpoints as much as possible. End users should feel they are interacting with the partners directly and do not need to be aware of Finaptic. Finally, customer data is critical, and employee fraud is a trustbuster for both our relationship with partners and their relationship with their customers. Finaptic provides escalation customer support when it comes to contacts that can not be resolved by the partner, such as technical issues with the Finpatic APIs. We do not provide first-line support for any partner-specific application questions or issues. Finaptic provides, as part of our SDK and services, customer support channels, technology, and escalation paths.","title":"Customer Support Overview"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/#platform-for-support-contacts-amazon-connect","text":"Amazon Connect is an Amazon Web Services (AWS) public cloud customer contact center service. Amazon Connect enables customer service representatives to respond to phone calls or chat inquiries from end customers just as if the contact center infrastructure was set up and managed on premises.","title":"Platform for support contacts: Amazon Connect"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/#l2-customer-support-agents-finaptic-employees","text":"Amazon Connect supports identity federation by configuring SAML2.0 with AWS IAM to enable web-based SSO to the Amazon Connect instance. This allows users to sign in to a portal in our organization hosted by a SAML 2.0 compatible identity provider, Google Workplace in our case, and log in to an Amazon Connect instance with SSO. Customer service agents - Agents use the Amazon Connect Contact Control Panel (CCP) to interact with customer contacts. It's how they receive calls, chat with contacts, transfer them to other agents, put them on hold, and perform other key tasks. Customer service admin - can add users to Amazon Connect, give them their credentials, and assign the appropriate permissions so they can access the features needed to do their job through the instance configuration panel.","title":"L2+ Customer Support Agents (Finaptic Employees)"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/#partner-customer-support","text":"Partners are responsible for the first level of support for their customers as well support related to their application and business. Partner responsibilities include: Develop your own help documentation and FAQs. Provide staffing and support channels for customer contacts. Including staff that can answer questions about the product, how to perform actions in your application, and technical issues that are not related to Finaptic APIs. Implement an in-app chat that can be used for L1 customer support that enables hand-off to Finaptic for L2 support. Our chat solution is included as part of the Finaptic SDK for easy integration with your application and existing in-application chat support. If you already have a chatbot or support chat interface we can work with you to integrate with our customer support chat APIs hosted in AWS Connect to allow for seamless handoff to our agents when level-2 escalation is necessary. Finaptic is responsible for assisting if level 1 support is unable to provide resolution when it is related to banking-specific issues. Escalation will be initiated by the level 1 customer support agent through the in-app secure chat API. The hand-off to a Finaptic agent can be seamless and transparent to the customer. Example steps in a customer interaction: The customer opens the support widget in the partner's application and requests to speak to an agent. The partner's support agent responds to the customer support request to assist with the question or issue. It is determined that the partner's agent cannot answer the inquiry. The agent triggers an escalation to L2 support from their support tools. This tells the application to call the Finaptic support API to start a chat session with a Finaptic agent. The chat is initiated with the Finaptic support agent who can see the chat history and resolve the issue for the customer. The hand-off can be made transparent to the customer and reuse the same chat window.","title":"Partner customer support"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/#partners-use-their-customer-service-technology","text":"The Finaptic Support SDK can be used to programmatically start an L2 chat session using the provided APIs. This way partners can develop their own user experience or use other out-of-the-box support platforms. They will be responsible for using our SDK to initiate chats, open the necessary connection, and handle sending/receiving chat messages through the API when an L2 escalation is needed. In this option, Finaptic provides a simple API service to begin a chat session, and send messages between the customer and the Finaptic support agent. Finaptic does not provide a user interface for connecting to our agents through chat. Distribution partners can customize the chat window with their brand. Finaptic provides the APIs in the SDK to start a chat session and send messages between our agent and another entity. The Distribution Partner is responsible for the on-screen presentation and integration with their own L1 support system.","title":"Partners use their customer service technology"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/#future-partners-use-an-amazon-connect-instance-managed-by-finaptic","text":"We will deploy an Amazon Connect instance for the customer. Their customer service agents will login in to their own CCP, for example https://tenant-a-prod.aws/ccp-v2/. We provide a \"model home\" setup with existing support flows, chat, and a basic pre-trained chatbot that includes basic banking support functionality (e.g. What's my balance?, How do I open an account?) - See below under \"Chat bot\" on how we can implement this in a partner agnostic way. They can then provide customized questions and responses which we deploy to their chatbot instances running in AWS Lex. Within the Amazon Connect flow there are built in escalation paths to hand-off customer contacts to Finaptic employees. Our Support SDK provides seamless hand-off by initiaing a new L2 Chat connection using the AWS Connect Start Chat API to Finaptic Customer Service Instance.","title":"(Future) Partners use an Amazon Connect Instance managed by Finaptic"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/#future-high-level-implementation-for-chat-bot","text":"Review the Miro board for high level design first.","title":"(Future) High level implementation for chat bot"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/#amazon-connect-flow","text":"Amazon Connect has a contact flow builder (API) and UI for creating re-usable contact flows components and entire flows.","title":"Amazon Connect flow"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/#chat-bot-future","text":"We have developed our chatbot using AWS Lex backed by AWS Lambdas for validation and response fulfillment. The chat widget is a customized version of the default widget and is extensible using the Amazon Connect chat APIs. To prevent data security concerns we developed the chat system to never need access to Finaptic APIs, such that no customer data will go through or be requested in AWS. Thechatbott itself is only used to parse the intents and return templated responses to the client application. The client chat widget will parse the templates and fill in customer data using the client-side API. The chatbot will return a customer payload response such as: { \"templateType\": \"ListAccounts\", \"version\": \"1.0\", \"data\": { \"content\": { \"title\": \"Which account would you like to see the balance on?\", \"subtitle\": \"Tap to select option\", \"elements\": \"$API:GetAccountList\" } } } Template would be rendered as such: The client widget will know how to render this and request the data using the client side SDK. This means all authentication and authorization goes through the exists mechanisms.","title":"Chat bot (Future)"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/customer_support_guide/#data-security","text":"Since no customer banking data will be stored or accessed from AWS this reduces the surface area for data security requirements. There is still the possibility of customer-submitted PII or sensitive information in the chat box that is parsed on the AWS side. We integrate Amazon Comprehend to automatically detect and redact PII before it gets to the bot intent parser or human contact. Amazon Comprehend uses natural language processing (NLP) to extract insights about the content of documents. Amazon Comprehend processes any text file in UTF-8 format. It develops insights by recognizing the entities, key phrases, language, sentiments, and other common elements in a document. You can use Amazon Comprehend to detect entities in your text that contain personally identifiable information (PII), or PII entities. A PII entity is a textual reference to personal data that could be used to identify an individual, such as an address, bank account number, or phone number.","title":"Data security"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/disputes/","text":"Customer Initiated Transaction Disputes \u00b6 All customer related contacts with regard to transaction disputes initated by a customer will be escalated to Finaptic customer support via the Finaptic secure chat API from with the partner application. Template for Transaction Dispute collection \u00b6 Basic information \u00b6 Customer's Full Name Customer's Address: Customer's Home Phone number Question: I have attempted in good faith to resolve this dispute with the merchant: (Yes/No). If Yes, the date in which attempt was made Free form narritve of incident from customer. Reason for Dispute \u00b6 Category Description Supporting Documents Requried from customer Cancelled Services I canceled the services on (date), however the merchant continues to bill me. Provide proof of cancellation Cancelled Reservations I was charged for a hotel room, which I cancelled on (date). Please note cancellation number . Proof of cancellation required Credit Not Received I was issued a credit receipt that did not post to my account. A copy of the credit receipt is enclosed with this form. Credit slip required Double Billing I was billed twice for the same transaction and I was in possession of my card. The correct transaction posted to my account on. Incorrect Amount I was billed \\$X instead of \\$Y. Provide copy of your receipt Merchandise or Services Not Received I did not receive the merchandise or service I expected to receive on a date. Provide merchant response after being notified Paid by Other Means I paid for the transaction using cash, check or other bankcard. Provide a copy of the proof of alternate payment) Returned Merchandise I returned the merchandise on a given date. Provide merchants' response after being notified Unauthorized I did not authorize or engage in this transaction. Provide Fraud Statement References \u00b6 Customer support implementation guide.","title":"Customer Initiated Transaction Disputes"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/disputes/#customer-initiated-transaction-disputes","text":"All customer related contacts with regard to transaction disputes initated by a customer will be escalated to Finaptic customer support via the Finaptic secure chat API from with the partner application.","title":"Customer Initiated Transaction Disputes"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/disputes/#template-for-transaction-dispute-collection","text":"","title":"Template for Transaction Dispute collection"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/disputes/#basic-information","text":"Customer's Full Name Customer's Address: Customer's Home Phone number Question: I have attempted in good faith to resolve this dispute with the merchant: (Yes/No). If Yes, the date in which attempt was made Free form narritve of incident from customer.","title":"Basic information"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/disputes/#reason-for-dispute","text":"Category Description Supporting Documents Requried from customer Cancelled Services I canceled the services on (date), however the merchant continues to bill me. Provide proof of cancellation Cancelled Reservations I was charged for a hotel room, which I cancelled on (date). Please note cancellation number . Proof of cancellation required Credit Not Received I was issued a credit receipt that did not post to my account. A copy of the credit receipt is enclosed with this form. Credit slip required Double Billing I was billed twice for the same transaction and I was in possession of my card. The correct transaction posted to my account on. Incorrect Amount I was billed \\$X instead of \\$Y. Provide copy of your receipt Merchandise or Services Not Received I did not receive the merchandise or service I expected to receive on a date. Provide merchant response after being notified Paid by Other Means I paid for the transaction using cash, check or other bankcard. Provide a copy of the proof of alternate payment) Returned Merchandise I returned the merchandise on a given date. Provide merchants' response after being notified Unauthorized I did not authorize or engage in this transaction. Provide Fraud Statement","title":"Reason for Dispute"},{"location":"Implementation-Guide/Fraud-And-Customer-Service/disputes/#references","text":"Customer support implementation guide.","title":"References"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/","text":"Legal and Regulatory Compliance \u00b6","title":"Legal and Regulatory Compliance"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/#legal-and-regulatory-compliance","text":"","title":"Legal and Regulatory Compliance"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/","text":"Financial Services Regulations \u00b6 The Canadian financial services regulations are a cornerstone for protecting the financial system in Canada and abroad. Below we have provided general information about how financial services are regulated and links to websites with more details. Some of the following information and infographic is reproduced in part from the Competiton Bureau report dated December 14, 2017: https://www.competitionbureau.gc.ca/eic/site/cb-bc.nsf/eng/04322.html The Role of Regulation and Regulators \u00b6 The goal of most regulation is to correct for negative externalities that will not be corrected by market forces alone. Regulation also plays a role in mitigating risks that may be ignored when companies pursue higher profitability. Risks that regulation in financial services aims to mitigate include systemic risk (i.e. risk of financial system failure), prudential risk, institutional governance, risks to consumers and investors, asymmetry of information (between financial services consumers and suppliers) and financial illiteracy, counterparty risks in payments, privacy risk and abuse of the financial system to hide or facilitate criminal activity. In this context, financial services regulations exist to protect the systems in place and to govern the conduct of those who provide services. In summary, regulators for the Canadian financial system: enforce applicable laws; prosecute cases of market misconduct; license providers of financial services; protect consumers; investigate complaints; and maintain confidence in the financial system. Canadian Regulatory Landscape \u00b6 Figure - Canadian Regulatory Landscape Part 1 of the infographic is an organizational chart that illustrates the relationship between Canada's federal financial regulators and policymakers. Part 2 of the infographic is an organizational chart to illustrate the broad responsibilities of Canada`s provincial and territorial governments. This is represented by the second-tier which outlines responsibilities in three broad categories: provincially (or territorially) regulated financial institutions (such as most credit unions), securities and consumer protection. Regulation at the federal level \u00b6 The Minister of Finance and the Department of Finance Canada are responsible for fiscal policy and financial sector regulatory policy and legislation. The Minister of Finance oversees a number of agencies and Crown corporations in the finance portfolio including the Office of the Superintendent of Financial Institutions ( OSFI ), the Financial Consumer Agency of Canada ( FCAC ), the Financial Transactions and Reports Analysis Centre of Canada ( FINTRAC ) and Canadian Deposit Insurance Corporation ( CDIC ). While the Minister of Finance sets policy and creates legislation, these agencies and corporations carry out the administration or enforcement of that legislation. Key statutes under the Minister of Finance's purview include the Bank Act, Payment Card Networks Act, Proceeds of Crime (Money Laundering) and Terrorist Financing Act and Canadian Payments Act. The Bank of Canada is responsible for setting monetary policy in Canada, targeting inflation through manipulation of overnight interest rates (i.e. the rate at which financial institutions borrow from each other). It oversees major clearing and settlement systems, providing those systems with banking services (pursuant to the Payment Clearing and Settlement Act); promotes financial stability globally with international bodies; and provides liquidity to the financial system. The Bank of Canada is also responsible for issuing currency. Some of the primary risks concerning the Bank of Canada include the safety, soundness, stability and efficiency of the financial system. OSFI regulates and supervises more than 400 federally regulated financial institutions (FRFIs) and 1,200 pension plans to determine the soundness of their financial condition and whether they are meeting their obligations as set out in legislation. FRFIs include all banks in Canada as well as all federally incorporated or registered trust and loan companies, insurance companies, cooperative credit associations, fraternal benefit societies and private pension plans. OSFI\u2019s mandate is to protect depositors, policyholders and other creditors, while allowing financial institutions to compete and take reasonable risks. The FCAC ensures that federally regulated financial institutions (i.e. those overseen by OSFI and the Department of Finance) comply with consumer protection measures set out in legislation and regulation. It also conducts research and promotes financial education and awareness of consumer rights and responsibilities. FINTRAC is Canada\u2019s financial intelligence unit, assisting in the detection, prevention and deterrence of money laundering and terrorist activity financing. It provides a unique contribution to the safety of Canadians and the protection of the integrity of Canada\u2019s financial system through the enforcement of the Proceeds of Crime (Money Laundering) and Terrorist Financing Act. The CDIC is a federal Crown corporation that contributes to the stability of the financial system by providing deposit insurance against the loss of eligible deposits at member institutions in the event of their failure. Premiums for deposit insurance are paid by member institutions. In addition to direct government involvement, Payments Canada has a legislative mandate and is responsible for the clearing and settlement infrastructure, processes and rules that are essential to the exchange of billions of dollars each day (i.e. interbank payments). Payments Canada operates three payments systems: the Large Value Transfer System the Automated Clearing Settlement System the US Dollar Bulk Exchange. The organization also oversees the rules for this key payments infrastructure and ensures its smooth and efficient operation. Regulation at the provincial and territorial level \u00b6 Provincial and territorial governments are responsible for policy and regulatory development related to provincially\u2011 or territorially\u2011regulated financial institutions (such as most credit unions) and securities. Securities are regulated through 13 distinct provincial and territorial authorities, each administering separate laws and regulations. Alberta, British Columbia, Ontario and Qu\u00e9bec are the four largest provincial regulators, supervising the vast majority of the securities market. Most provinces and territories also have consumer protection legislation, some of which deals with financial transactions and agreements. In relation to the three areas that are the focus of this study\u2014payments and payment systems, lending and investment dealing and advice\u2014securities laws have a significant impact on the entry and growth of FinTech. The goal of securities legislation is to foster fair and efficient capital markets and protect investors. Securities rules include regulation of the conduct of securities issuers and dealers as well as their reporting requirements and business structures. To harmonize, improve and coordinate securities legislation and regulation across jurisdictions, each of the provincial and territorial securities regulators have combined to create the Canadian Securities Administrators (CSA) umbrella organization. In addition to provincial securities authorities, two self\u2011regulating organizations, the Investment Industry Regulatory Organization of Canada (IIROC) and the Mutual Fund Dealers Association of Canada (MFDA), have oversight authority regarding the conduct of investment and mutual fund dealers. Each of these regulatory or oversight authorities has an important role to play in ensuring that financial markets are safe, secure, efficient and useful to Canadians. They promote confidence in the financial system through consumer protection and literacy, while mitigating exposure to unnecessary risks. There is no doubt they are important and necessary to the operation of our financial system. Regulations \u00b6 Anti-Money Laundering and Anti-Terrorist Financing \u00b6 Proceeds of Crime (Money Laundering) and Terrorist Financing Act ( PCMLTFA ) Objective of PCMLTFA Deter and Detect money laundering and financing of terrorist activities Investigate and Prosecute money laundering and terrorist financing offences Responsibilities for Financial Entities Record keeping Client identification Ongoing monitoring of clients Reporting suspicious financial transactions Reporting cross-border movements of currency and monetary instruments You are responsible for collecting information about your customers through Onboarding which is passed to us. Finaptic manages all of the above responsibilities with its partner financial institution. Consumer Protection \u00b6 The Financial Consumer Agency of Canada - Federal \u00b6 The Financial Consumer Agency of Canada (FCAC) supervises all federally regulated financial institutions to ensure that they comply with federal consumer protection provisions. It also educates consumers and monitors industry codes of conduct and public commitments designed to protect consumer interests. These consumer protection provisions cover a variety of operating practices that directly affect your customers. For example, financial institutions are required by law to provide consumers with information about their fees, interest rates and complaint-handling procedures. Financial institutions are also required to obtain express consent for new products and services, as well as credit limit increases, and are prohibited from 'tied-selling' and deceptive sales practices. Sales Practice \u00b6 See Legal Compliance on Screen for more information. Consumer Complaints \u00b6 The Financial Consumer Agency of Canada (FCAC) investigates complaints that relate to a possible breach of market conduct obligations under federal regulations. Part of FCAC's role is to also ensure that federally regulated financial institutions have a complaint-handling process in place. In that regard, you are required to provide information about how the complaint handling process works. Customers can make complaints directly to the FCAC. FCAC reviews complaints on a case-by-case basis to determine whether a federal consumer protection issue exists, and if so, what necessary action should be taken. All of the product agreements will include a section on how to make a complaint to the FCAC, addressed to: Financial Consumer Agency of Canada Enterprise Building, 6th Floor 427 Laurier Avenue West Ottawa, ON K1R 1B9 Toll-free: 1-866-461-3222 www.fcac-acfc.gc.ca Your app must also include a section on how to make a complaint . Finaptic will provide the content for that section. FCAC Guidance Complaint resolution https://www.canada.ca/en/financial-consumer-agency/services/industry/commissioner-guidance/guidance-12.html Provincial and Territorial Consumer Protection Agencies \u00b6 Information about provincial consumer protection agency roles, responsibilities and regulatory oversight can be found below. Most have broad mandates to protect the public related to sales practices, disclosures, and even privacy related incidents. <<<<<<< Updated upstream Website: www.servicealberta.ca Website: www.consumerprotectionbc.ca Website: www.gov.mb.ca/consumerinfo Website: fcnb.ca/FinancialConsumer Website: www.servicenl.gov.nl.ca/consumer/consumer_affairs Website: www.maca.gov.nt.ca/en/services/consumer-affairs Website: NovaScotia.ca/programs-and-services/consumer-protection Website: www.gov.nu.ca/community-and-government-services/information/consumer-affairs Website: www.ontario.ca/page/consumer-protection-ontario Website: www.princeedwardisland.ca/en/topic/consumer-services Website: www.opc.gouv.qc.ca Website: fcaa.gov.sk.ca Website: Contact the government ======= Alberta: www.servicealberta.ca British Columbia: www.consumerprotectionbc.ca Manitoba: www.gov.mb.ca/consumerinfo New Brunswick: fcnb.ca/FinancialConsumer Newfoundland and Labrador: www.servicenl.gov.nl.ca/consumer/consumer_affairs Northwest Territories: www.maca.gov.nt.ca/en/services/consumer-affairs Nova Scotia: NovaScotia.ca/programs-and-services/consumer-protection Nunavut: www.gov.nu.ca/community-and-government-services/information/consumer-affairs Ontario: www.ontario.ca/page/consumer-protection-ontario Prince Edward Island: www.princeedwardisland.ca/en/topic/consumer-services Quebec: www.opc.gouv.qc.ca Saskatchewan: fcaa.gov.sk.ca Yukon: Contact the government Stashed changes Tied Selling \u00b6 What is coercive tied selling? Section 459.1 of the Bank Act prohibits banks from practicing coercive tied selling. More specifically, it is against the law for a bank to \u201cimpose undue pressure on, or coerce, a person to obtain a product or service from a particular person, including the bank and any of its affiliates, as a condition for obtaining another product or service from the bank.\u201d You cannot be unduly pressured to buy a product or service that you don\u2019t want from a bank or one of its affiliates to obtain another bank product or service. If you qualify for a product, a banking representative is not allowed to unduly pressure you to buy another unwanted product or service as a condition of obtaining the product you want. CDIC Insurance \u00b6 The Canada Deposit Insurance Corporation (CDIC) is the federal Crown corporation that contributes to the stability of the Canadian financial system by providing deposit insurance against the loss of eligible deposits at member institutions in the event of failure. Eligible deposits are automatically covered to a limit of $100,000 per insured category at each CDIC member financial institution . Members include banks, federally regulated credit unions, as well as loan and trust companies and associations governed by the Cooperative Credit Associations Act that take deposits. CDIC is not a bank. CDIC is not a private insurance company. CDIC funded by premiums paid by their member institutions and do not receive public funds to operate. Parliament established the Canada Deposit Insurance Corporation in 1967 to achieve the following: provide insurance against the loss of part or all of deposits; promote and otherwise contribute to the stability of the financial system in Canada; act for the benefit of depositors while minimizing loss. CDIC Guidance Finaptic will inform you if the accounts you are offering are eligible for CDIC coverage and the language that you can present on your website and app. CASL, Privacy and Competition Bureau - concerns about mobile app companies \u00b6 On November 26, 2020, the Canadian Radio-television and Telecommunications Commission (CRTC), the Office of the Privacy Commissioner of Canada (OPC) and the Competition Bureau (Bureau) issued letters to 36 companies involved in the mobile applications industry in Canada advising that they review their practices and take preventive or corrective measures where necessary. The federal agencies reminded mobile app companies of their obligations under Canada\u2019s Anti-Spam Legislation (CASL), and those related to the promotion, installation and use of mobile apps under the Personal Information Protection and Electronic Documents Act (PIPEDA) and the Competition Act . They also encouraged the companies to take action to help prevent activities that raise concerns, such as: apps that make false or misleading claims to promote a product, a service or a business interest; apps that collect or use personal information, such as electronic addresses, without consent; apps that do not properly identify their functions (such as allowing information sharing with other computers or automatically downloading other programs on the user\u2019s devices) in order to obtain informed consent from the user prior to installation; apps designed to spam users\u2019 friends and contacts. These activities put Canadians at risk of fraud, identity theft and financial loss, among other things. Enforcement in the digital economy and particularly in relation to the use and collection of consumer data is likely to remain a high priority for Canadian regulators. Companies involved in the mobile app industry are in a unique position to detect, prevent and stop practices that could harm consumers. Joint letter from federal enforcement agencies to remind mobile app industry of obligations associated with Canada\u2019s anti-spam legislation - Office of the Privacy Commissioner of Canada Competition Act \u00b6 To contravene the Competition Act, a representation must be \"false or misleading in a material respect.\" The basic rule that is used to determine whether a contravention has taken place is the 'general impression test': The general impression conveyed by a representation, as well as its literal meaning, will be taken into account when determining whether or not the representation is deceptive in a material respect (\u201cmateriality\u201d is not an element of a deceptive electronic message). In 2012, the Supreme Court of Canada (SCC) provided additional guidance and understanding of what test to consider when determinining whether an advertisiment is misleading in a material respect in its decision Richard v. Time Inc. 2012 SCC 8 (CanLII) | Richard v. Time Inc. | CanLII . While the case involved the Quebec Consumer Protection Act, rather than the Competition Act , the provisions as with other consumer protection laws in other province are all similar. The SCC held that the general impression test is one of first impression, which is distinct from a rushed or partial reading of an advertisement. The general impression is the one a person has after an initial contact with the entire advertisement, and incorporates both the physical layout and the meaning of the words used. The SCC further explained that the general impression must be analyzed from the perspective of the average consumer, without considering his/her personal attributes, who is \u201ccredulous and inexperienced\u201d and takes \u201cno more than ordinary care to observe that which is staring him or her in the face\u201d. At paragraph 67, the SCC describes \"\"The general impression test provided for in s. 218 C.P.A. must be applied from a perspective similar to that of \u201cordinary hurried purchasers\u201d, that is, consumers who take no more than ordinary care to observe that which is staring them in the face upon their first contact with an advertisement. The courts must not conduct their analysis from the perspective of a careful and diligent consumer. [68] Obviously, the adjectives used to describe the average consumer may vary from one statute to another. Such variations reflect the diversity of economic realities to which different statutes apply and of their objectives. The most important thing is not the adjectives used, but the level of sophistication expected of the consumer .\"\" The method for assessing the general impression is therefore two-fold: (1) describe the general impression that the representation is likely to convey to a credulous and inexperienced consumer; and (2) determine whether that general impression is true to reality. If the answer at the second step is no, the merchant has engaged in a prohibited practice. The court also confirmed that there is a presumption of prejudice to the consumer such that the consumer does not have to prove that the merchant intended to mislead. (source: https://www.stikeman.com/en-ca/kh/competitor/supreme-court-of-canada-average-consumer-is-credulous-and-inexperienced-for-misleading-advertisement-purposes) Penalties for Deceptive Advertising ( Competition Act ) (source: False or misleading representations - Competition Bureau Canada ) The Competition Act provides criminal and civil regimes to address false or misleading representations. Civil Criminal Administrative monetary penalties of up to $10 million (first occurence) and up to $15 Million (for each subsequent occurrence) On Summary conviction liable to a fine of up to $200,000 and/or imprisonment up to one year$ Paid restitution to purchasers Upon indictment, a fineto without upper limit at the discretion of the Court, imprisonment of up to 14 years, or both Freeze assets Section 52 of the Act is a criminal provision. It prohibits knowingly or recklessly making, or permitting the making of, a representation to the public, in any form whatever, that is false or misleading in a material respect. Under this provision, it is not necessary to demonstrate that any person was deceived or misled; that any member of the public to whom the representation was made was within Canada; or that the representation was made in a place to which the public had access. Subsection 52(4) directs that the general impression conveyed by a representation, as well as its literal meaning, be taken into account when determining whether or not the representation is false or misleading in a material respect. Any person who contravenes section 52 is guilty of an offence and liable to a fine of up to $200,000 and/or imprisonment up to one year on summary conviction, or to fines in the discretion of the court and/or imprisonment up to 14 years upon indictment. Paragraph 74.01(1) (a) of the Act is a civil provision. It prohibits the making, or the permitting of the making, of a representation to the public, in any form whatever, that is false or misleading in a material respect. Under this provision, it is not necessary to demonstrate that any person was deceived or misled; that any member of the public to whom the representation was made was within Canada; or that the representation was made in a place to which the public had access. Subsection 74.03(5) directs that the general impression conveyed by a representation, as well as its literal meaning, be taken into account when determining whether or not the representation is false or misleading in a material respect. If a court determines that a person has engaged in conduct contrary to paragraph 74.01(1) (a) , it may order the person not to engage in such conduct, to publish a corrective notice, to pay an administrative monetary penalty and/or to pay restitution to purchasers. When the court orders the payment of administrative monetary penalties, on first occurrence, individuals are subject to penalties of up to $750,000 and corporations, to penalties of up to $10,000,000. For subsequent orders, the penalties increase to a maximum of $1,000,000 in the case of an individual and $15,000,000 in the case of a corporation. The court also has the power to order interim injunctions to freeze assets in certain cases. Additional information on Restitution Orders and Interim Injunctions to Freeze Assets In order to proceed on a criminal track both of the following criteria must be satisfied: (1) there must be clear and compelling evidence suggesting that the accused knowingly or recklessly made a false or misleading representation to the public. An example of such evidence is the continuation of a practice by the accused after complaints have been made by consumers directly to the accused; and (2) the Bureau must also be satisfied that criminal prosecution would be in the public interest. More information on the choice of track is available from the following publication Misleading Representations and Deceptive Marketing Practices: Choice of Criminal or Civil Track Under the Competition Act .","title":"Financial Services Regulations"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#financial-services-regulations","text":"The Canadian financial services regulations are a cornerstone for protecting the financial system in Canada and abroad. Below we have provided general information about how financial services are regulated and links to websites with more details. Some of the following information and infographic is reproduced in part from the Competiton Bureau report dated December 14, 2017: https://www.competitionbureau.gc.ca/eic/site/cb-bc.nsf/eng/04322.html","title":"Financial Services Regulations"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#the-role-of-regulation-and-regulators","text":"The goal of most regulation is to correct for negative externalities that will not be corrected by market forces alone. Regulation also plays a role in mitigating risks that may be ignored when companies pursue higher profitability. Risks that regulation in financial services aims to mitigate include systemic risk (i.e. risk of financial system failure), prudential risk, institutional governance, risks to consumers and investors, asymmetry of information (between financial services consumers and suppliers) and financial illiteracy, counterparty risks in payments, privacy risk and abuse of the financial system to hide or facilitate criminal activity. In this context, financial services regulations exist to protect the systems in place and to govern the conduct of those who provide services. In summary, regulators for the Canadian financial system: enforce applicable laws; prosecute cases of market misconduct; license providers of financial services; protect consumers; investigate complaints; and maintain confidence in the financial system.","title":"The Role of Regulation and Regulators"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#canadian-regulatory-landscape","text":"Figure - Canadian Regulatory Landscape Part 1 of the infographic is an organizational chart that illustrates the relationship between Canada's federal financial regulators and policymakers. Part 2 of the infographic is an organizational chart to illustrate the broad responsibilities of Canada`s provincial and territorial governments. This is represented by the second-tier which outlines responsibilities in three broad categories: provincially (or territorially) regulated financial institutions (such as most credit unions), securities and consumer protection.","title":"Canadian Regulatory Landscape"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#regulation-at-the-federal-level","text":"The Minister of Finance and the Department of Finance Canada are responsible for fiscal policy and financial sector regulatory policy and legislation. The Minister of Finance oversees a number of agencies and Crown corporations in the finance portfolio including the Office of the Superintendent of Financial Institutions ( OSFI ), the Financial Consumer Agency of Canada ( FCAC ), the Financial Transactions and Reports Analysis Centre of Canada ( FINTRAC ) and Canadian Deposit Insurance Corporation ( CDIC ). While the Minister of Finance sets policy and creates legislation, these agencies and corporations carry out the administration or enforcement of that legislation. Key statutes under the Minister of Finance's purview include the Bank Act, Payment Card Networks Act, Proceeds of Crime (Money Laundering) and Terrorist Financing Act and Canadian Payments Act. The Bank of Canada is responsible for setting monetary policy in Canada, targeting inflation through manipulation of overnight interest rates (i.e. the rate at which financial institutions borrow from each other). It oversees major clearing and settlement systems, providing those systems with banking services (pursuant to the Payment Clearing and Settlement Act); promotes financial stability globally with international bodies; and provides liquidity to the financial system. The Bank of Canada is also responsible for issuing currency. Some of the primary risks concerning the Bank of Canada include the safety, soundness, stability and efficiency of the financial system. OSFI regulates and supervises more than 400 federally regulated financial institutions (FRFIs) and 1,200 pension plans to determine the soundness of their financial condition and whether they are meeting their obligations as set out in legislation. FRFIs include all banks in Canada as well as all federally incorporated or registered trust and loan companies, insurance companies, cooperative credit associations, fraternal benefit societies and private pension plans. OSFI\u2019s mandate is to protect depositors, policyholders and other creditors, while allowing financial institutions to compete and take reasonable risks. The FCAC ensures that federally regulated financial institutions (i.e. those overseen by OSFI and the Department of Finance) comply with consumer protection measures set out in legislation and regulation. It also conducts research and promotes financial education and awareness of consumer rights and responsibilities. FINTRAC is Canada\u2019s financial intelligence unit, assisting in the detection, prevention and deterrence of money laundering and terrorist activity financing. It provides a unique contribution to the safety of Canadians and the protection of the integrity of Canada\u2019s financial system through the enforcement of the Proceeds of Crime (Money Laundering) and Terrorist Financing Act. The CDIC is a federal Crown corporation that contributes to the stability of the financial system by providing deposit insurance against the loss of eligible deposits at member institutions in the event of their failure. Premiums for deposit insurance are paid by member institutions. In addition to direct government involvement, Payments Canada has a legislative mandate and is responsible for the clearing and settlement infrastructure, processes and rules that are essential to the exchange of billions of dollars each day (i.e. interbank payments). Payments Canada operates three payments systems: the Large Value Transfer System the Automated Clearing Settlement System the US Dollar Bulk Exchange. The organization also oversees the rules for this key payments infrastructure and ensures its smooth and efficient operation.","title":"Regulation at the federal level"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#regulation-at-the-provincial-and-territorial-level","text":"Provincial and territorial governments are responsible for policy and regulatory development related to provincially\u2011 or territorially\u2011regulated financial institutions (such as most credit unions) and securities. Securities are regulated through 13 distinct provincial and territorial authorities, each administering separate laws and regulations. Alberta, British Columbia, Ontario and Qu\u00e9bec are the four largest provincial regulators, supervising the vast majority of the securities market. Most provinces and territories also have consumer protection legislation, some of which deals with financial transactions and agreements. In relation to the three areas that are the focus of this study\u2014payments and payment systems, lending and investment dealing and advice\u2014securities laws have a significant impact on the entry and growth of FinTech. The goal of securities legislation is to foster fair and efficient capital markets and protect investors. Securities rules include regulation of the conduct of securities issuers and dealers as well as their reporting requirements and business structures. To harmonize, improve and coordinate securities legislation and regulation across jurisdictions, each of the provincial and territorial securities regulators have combined to create the Canadian Securities Administrators (CSA) umbrella organization. In addition to provincial securities authorities, two self\u2011regulating organizations, the Investment Industry Regulatory Organization of Canada (IIROC) and the Mutual Fund Dealers Association of Canada (MFDA), have oversight authority regarding the conduct of investment and mutual fund dealers. Each of these regulatory or oversight authorities has an important role to play in ensuring that financial markets are safe, secure, efficient and useful to Canadians. They promote confidence in the financial system through consumer protection and literacy, while mitigating exposure to unnecessary risks. There is no doubt they are important and necessary to the operation of our financial system.","title":"Regulation at the provincial and territorial level"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#regulations","text":"","title":"Regulations"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#anti-money-laundering-and-anti-terrorist-financing","text":"Proceeds of Crime (Money Laundering) and Terrorist Financing Act ( PCMLTFA ) Objective of PCMLTFA Deter and Detect money laundering and financing of terrorist activities Investigate and Prosecute money laundering and terrorist financing offences Responsibilities for Financial Entities Record keeping Client identification Ongoing monitoring of clients Reporting suspicious financial transactions Reporting cross-border movements of currency and monetary instruments You are responsible for collecting information about your customers through Onboarding which is passed to us. Finaptic manages all of the above responsibilities with its partner financial institution.","title":"Anti-Money Laundering and Anti-Terrorist Financing"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#consumer-protection","text":"","title":"Consumer Protection"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#the-financial-consumer-agency-of-canada-federal","text":"The Financial Consumer Agency of Canada (FCAC) supervises all federally regulated financial institutions to ensure that they comply with federal consumer protection provisions. It also educates consumers and monitors industry codes of conduct and public commitments designed to protect consumer interests. These consumer protection provisions cover a variety of operating practices that directly affect your customers. For example, financial institutions are required by law to provide consumers with information about their fees, interest rates and complaint-handling procedures. Financial institutions are also required to obtain express consent for new products and services, as well as credit limit increases, and are prohibited from 'tied-selling' and deceptive sales practices.","title":"The Financial Consumer Agency of Canada - Federal"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#sales-practice","text":"See Legal Compliance on Screen for more information.","title":"Sales Practice"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#consumer-complaints","text":"The Financial Consumer Agency of Canada (FCAC) investigates complaints that relate to a possible breach of market conduct obligations under federal regulations. Part of FCAC's role is to also ensure that federally regulated financial institutions have a complaint-handling process in place. In that regard, you are required to provide information about how the complaint handling process works. Customers can make complaints directly to the FCAC. FCAC reviews complaints on a case-by-case basis to determine whether a federal consumer protection issue exists, and if so, what necessary action should be taken. All of the product agreements will include a section on how to make a complaint to the FCAC, addressed to: Financial Consumer Agency of Canada Enterprise Building, 6th Floor 427 Laurier Avenue West Ottawa, ON K1R 1B9 Toll-free: 1-866-461-3222 www.fcac-acfc.gc.ca Your app must also include a section on how to make a complaint . Finaptic will provide the content for that section. FCAC Guidance Complaint resolution https://www.canada.ca/en/financial-consumer-agency/services/industry/commissioner-guidance/guidance-12.html","title":"Consumer Complaints"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#provincial-and-territorial-consumer-protection-agencies","text":"Information about provincial consumer protection agency roles, responsibilities and regulatory oversight can be found below. Most have broad mandates to protect the public related to sales practices, disclosures, and even privacy related incidents. <<<<<<< Updated upstream Website: www.servicealberta.ca Website: www.consumerprotectionbc.ca Website: www.gov.mb.ca/consumerinfo Website: fcnb.ca/FinancialConsumer Website: www.servicenl.gov.nl.ca/consumer/consumer_affairs Website: www.maca.gov.nt.ca/en/services/consumer-affairs Website: NovaScotia.ca/programs-and-services/consumer-protection Website: www.gov.nu.ca/community-and-government-services/information/consumer-affairs Website: www.ontario.ca/page/consumer-protection-ontario Website: www.princeedwardisland.ca/en/topic/consumer-services Website: www.opc.gouv.qc.ca Website: fcaa.gov.sk.ca Website: Contact the government ======= Alberta: www.servicealberta.ca British Columbia: www.consumerprotectionbc.ca Manitoba: www.gov.mb.ca/consumerinfo New Brunswick: fcnb.ca/FinancialConsumer Newfoundland and Labrador: www.servicenl.gov.nl.ca/consumer/consumer_affairs Northwest Territories: www.maca.gov.nt.ca/en/services/consumer-affairs Nova Scotia: NovaScotia.ca/programs-and-services/consumer-protection Nunavut: www.gov.nu.ca/community-and-government-services/information/consumer-affairs Ontario: www.ontario.ca/page/consumer-protection-ontario Prince Edward Island: www.princeedwardisland.ca/en/topic/consumer-services Quebec: www.opc.gouv.qc.ca Saskatchewan: fcaa.gov.sk.ca Yukon: Contact the government Stashed changes","title":"Provincial and Territorial Consumer Protection Agencies"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#tied-selling","text":"What is coercive tied selling? Section 459.1 of the Bank Act prohibits banks from practicing coercive tied selling. More specifically, it is against the law for a bank to \u201cimpose undue pressure on, or coerce, a person to obtain a product or service from a particular person, including the bank and any of its affiliates, as a condition for obtaining another product or service from the bank.\u201d You cannot be unduly pressured to buy a product or service that you don\u2019t want from a bank or one of its affiliates to obtain another bank product or service. If you qualify for a product, a banking representative is not allowed to unduly pressure you to buy another unwanted product or service as a condition of obtaining the product you want.","title":"Tied Selling"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#cdic-insurance","text":"The Canada Deposit Insurance Corporation (CDIC) is the federal Crown corporation that contributes to the stability of the Canadian financial system by providing deposit insurance against the loss of eligible deposits at member institutions in the event of failure. Eligible deposits are automatically covered to a limit of $100,000 per insured category at each CDIC member financial institution . Members include banks, federally regulated credit unions, as well as loan and trust companies and associations governed by the Cooperative Credit Associations Act that take deposits. CDIC is not a bank. CDIC is not a private insurance company. CDIC funded by premiums paid by their member institutions and do not receive public funds to operate. Parliament established the Canada Deposit Insurance Corporation in 1967 to achieve the following: provide insurance against the loss of part or all of deposits; promote and otherwise contribute to the stability of the financial system in Canada; act for the benefit of depositors while minimizing loss. CDIC Guidance Finaptic will inform you if the accounts you are offering are eligible for CDIC coverage and the language that you can present on your website and app.","title":"CDIC Insurance"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#casl-privacy-and-competition-bureau-concerns-about-mobile-app-companies","text":"On November 26, 2020, the Canadian Radio-television and Telecommunications Commission (CRTC), the Office of the Privacy Commissioner of Canada (OPC) and the Competition Bureau (Bureau) issued letters to 36 companies involved in the mobile applications industry in Canada advising that they review their practices and take preventive or corrective measures where necessary. The federal agencies reminded mobile app companies of their obligations under Canada\u2019s Anti-Spam Legislation (CASL), and those related to the promotion, installation and use of mobile apps under the Personal Information Protection and Electronic Documents Act (PIPEDA) and the Competition Act . They also encouraged the companies to take action to help prevent activities that raise concerns, such as: apps that make false or misleading claims to promote a product, a service or a business interest; apps that collect or use personal information, such as electronic addresses, without consent; apps that do not properly identify their functions (such as allowing information sharing with other computers or automatically downloading other programs on the user\u2019s devices) in order to obtain informed consent from the user prior to installation; apps designed to spam users\u2019 friends and contacts. These activities put Canadians at risk of fraud, identity theft and financial loss, among other things. Enforcement in the digital economy and particularly in relation to the use and collection of consumer data is likely to remain a high priority for Canadian regulators. Companies involved in the mobile app industry are in a unique position to detect, prevent and stop practices that could harm consumers. Joint letter from federal enforcement agencies to remind mobile app industry of obligations associated with Canada\u2019s anti-spam legislation - Office of the Privacy Commissioner of Canada","title":"CASL, Privacy and Competition Bureau - concerns about mobile app companies"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/financial_services_regulations/#competition-act","text":"To contravene the Competition Act, a representation must be \"false or misleading in a material respect.\" The basic rule that is used to determine whether a contravention has taken place is the 'general impression test': The general impression conveyed by a representation, as well as its literal meaning, will be taken into account when determining whether or not the representation is deceptive in a material respect (\u201cmateriality\u201d is not an element of a deceptive electronic message). In 2012, the Supreme Court of Canada (SCC) provided additional guidance and understanding of what test to consider when determinining whether an advertisiment is misleading in a material respect in its decision Richard v. Time Inc. 2012 SCC 8 (CanLII) | Richard v. Time Inc. | CanLII . While the case involved the Quebec Consumer Protection Act, rather than the Competition Act , the provisions as with other consumer protection laws in other province are all similar. The SCC held that the general impression test is one of first impression, which is distinct from a rushed or partial reading of an advertisement. The general impression is the one a person has after an initial contact with the entire advertisement, and incorporates both the physical layout and the meaning of the words used. The SCC further explained that the general impression must be analyzed from the perspective of the average consumer, without considering his/her personal attributes, who is \u201ccredulous and inexperienced\u201d and takes \u201cno more than ordinary care to observe that which is staring him or her in the face\u201d. At paragraph 67, the SCC describes \"\"The general impression test provided for in s. 218 C.P.A. must be applied from a perspective similar to that of \u201cordinary hurried purchasers\u201d, that is, consumers who take no more than ordinary care to observe that which is staring them in the face upon their first contact with an advertisement. The courts must not conduct their analysis from the perspective of a careful and diligent consumer. [68] Obviously, the adjectives used to describe the average consumer may vary from one statute to another. Such variations reflect the diversity of economic realities to which different statutes apply and of their objectives. The most important thing is not the adjectives used, but the level of sophistication expected of the consumer .\"\" The method for assessing the general impression is therefore two-fold: (1) describe the general impression that the representation is likely to convey to a credulous and inexperienced consumer; and (2) determine whether that general impression is true to reality. If the answer at the second step is no, the merchant has engaged in a prohibited practice. The court also confirmed that there is a presumption of prejudice to the consumer such that the consumer does not have to prove that the merchant intended to mislead. (source: https://www.stikeman.com/en-ca/kh/competitor/supreme-court-of-canada-average-consumer-is-credulous-and-inexperienced-for-misleading-advertisement-purposes) Penalties for Deceptive Advertising ( Competition Act ) (source: False or misleading representations - Competition Bureau Canada ) The Competition Act provides criminal and civil regimes to address false or misleading representations. Civil Criminal Administrative monetary penalties of up to $10 million (first occurence) and up to $15 Million (for each subsequent occurrence) On Summary conviction liable to a fine of up to $200,000 and/or imprisonment up to one year$ Paid restitution to purchasers Upon indictment, a fineto without upper limit at the discretion of the Court, imprisonment of up to 14 years, or both Freeze assets Section 52 of the Act is a criminal provision. It prohibits knowingly or recklessly making, or permitting the making of, a representation to the public, in any form whatever, that is false or misleading in a material respect. Under this provision, it is not necessary to demonstrate that any person was deceived or misled; that any member of the public to whom the representation was made was within Canada; or that the representation was made in a place to which the public had access. Subsection 52(4) directs that the general impression conveyed by a representation, as well as its literal meaning, be taken into account when determining whether or not the representation is false or misleading in a material respect. Any person who contravenes section 52 is guilty of an offence and liable to a fine of up to $200,000 and/or imprisonment up to one year on summary conviction, or to fines in the discretion of the court and/or imprisonment up to 14 years upon indictment. Paragraph 74.01(1) (a) of the Act is a civil provision. It prohibits the making, or the permitting of the making, of a representation to the public, in any form whatever, that is false or misleading in a material respect. Under this provision, it is not necessary to demonstrate that any person was deceived or misled; that any member of the public to whom the representation was made was within Canada; or that the representation was made in a place to which the public had access. Subsection 74.03(5) directs that the general impression conveyed by a representation, as well as its literal meaning, be taken into account when determining whether or not the representation is false or misleading in a material respect. If a court determines that a person has engaged in conduct contrary to paragraph 74.01(1) (a) , it may order the person not to engage in such conduct, to publish a corrective notice, to pay an administrative monetary penalty and/or to pay restitution to purchasers. When the court orders the payment of administrative monetary penalties, on first occurrence, individuals are subject to penalties of up to $750,000 and corporations, to penalties of up to $10,000,000. For subsequent orders, the penalties increase to a maximum of $1,000,000 in the case of an individual and $15,000,000 in the case of a corporation. The court also has the power to order interim injunctions to freeze assets in certain cases. Additional information on Restitution Orders and Interim Injunctions to Freeze Assets In order to proceed on a criminal track both of the following criteria must be satisfied: (1) there must be clear and compelling evidence suggesting that the accused knowingly or recklessly made a false or misleading representation to the public. An example of such evidence is the continuation of a practice by the accused after complaints have been made by consumers directly to the accused; and (2) the Bureau must also be satisfied that criminal prosecution would be in the public interest. More information on the choice of track is available from the following publication Misleading Representations and Deceptive Marketing Practices: Choice of Criminal or Civil Track Under the Competition Act .","title":"Competition Act"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/","text":"Finaptic Account Fee Guide and Agreement \u00b6 Finaptic Account Fee Guide \u00b6 Last Updated August 27, 2021 Issuing institution: NATSOLUTION, 600, de la Gaucheti\u00e8re Ouest, Montr\u00e9al, province of Qu\u00e9bec. Information about your Finaptic Account \u00b6 For information or to make complaints, you may: Use the Finaptic in app chat when made available, or use the tools to report a bug or issue. Contact: pilot.feedback@finaptic.com Call: 416-460-3360 (Collect) Write: Finaptic Technologies Inc., 611 Belmont Drive, Montr\u00e9al, QC Balance verification: The balance of the Finaptic Account may be verified by accessing the Finaptic Pilot app. You can also contact our customer service as indicated in the line above: Information about your Finaptic Account. Overdraft: No overdraft is permitted. Currency: Canadian Dollar Fees: There is no monthly fee for using this account. Transactions in a foreign currency are converted into Canadian dollars at the conversion rate used by Mastercard Worldwide\u00ae on the date the transaction is authorized. We add 2,5% to the conversion rate used as a fee. We do not charge any other fees. Fees may be charged to your bank account by your financial institution for transfers via Interac e-TransferTM. Fees may also be charged for use of an ATM by the ATM provider. Interest: There is no interest paid on account balances. Partial payment of purchase: Your account must have enough money to cover the entire cost of a transaction. If it does not, the merchant may accept a partial payment transaction. You must then cover the difference with another form of payment such as a credit card or cash. Expiry date: Your card has an expiry date which is shown on your card. We will replace your physical card when it expires. Your virtual card will be automatically renewed. Lost or stolen card: You must inform us promptly if your card is lost or stolen. You can contact customer services as indicated on the line Information about your Finaptic Pilot above. You can temporarily block the use of your card via the mobile application. Cancellation: You can cancel the card connected to your Finaptic Pilot Account at any time by contacting us through the methods listed in the line Information about your Finaptic Account above. The cancellation of your card does not automatically close your Finaptic Pilot Account. You must also request to close your account. Uninsured deposit: Money on your Finaptic Account is not insured by the Canada Deposit Insurance Corporation. Finaptic Account Agreement \u00b6 This Agreement sets out the conditions that apply to your Finaptic Account and any card or other device or technology issued that allows access to the Account at any time. The fee guide is an integral part of this Agreement. Other agreements may also apply to services provided with your Account(s). If there is a conflict between the terms of this Agreement and any other agreements, the most current version of this document will apply. Not all features described in this Agreement may be available when you open a Finaptic Account. The Finaptic Account and associated card is issued by NATSOLUTION and distributed by Finaptic Technologies Inc. How to use your Finaptic Account \u00b6 The Finaptic Account is only accessible electronically, meaning you must have a compatible device that allows you to download the Finaptic App and access your Account. The Finaptic Account allows you to: make a purchase everywhere Mastercard\u00ae is accepted; make a cash withdrawal at an ATM (Automated Teller Machine) where Mastercard\u00ae and Cirrus\u00ae are accepted; make a cash withdrawal from a merchant, if accepted by the merchant; transfer money through Interac e-Transfers\u00ae; make electronic funds transfers such as preauthorized debits; make online bill payments through the mobile application. Money in your account does not earn interest. You must load money to your account before using your card to make transactions. a. Mobile access You can access your Account and carry out transactions through the Finaptic App. NATSOLUTION does not provide the services on the Finaptic mobile application and is not responsible for them, or any loss, harm or damage of any kind you may suffer as a result of using the Finaptic App and associated services. b. Card access You may access your Account through a card we issue to you to make payments from your account everywhere Mastercard is accepted. Cards on this Account will operate on the Mastercard network. This means, when making purchases, you should select \u201cCredit\u201d at the point of sale to complete the transaction. Request a Card - We may not automatically send you a card to access your account. If you don\u2019t automatically receive one, you can request a physical or virtual card for yourself or an authorized user at any time. Instructions on how to do this are provided on the mobile app. Expiry date of the card - Your card has an expiry date. The expiry date is indicated on your card. We will replace your physical card when it expires. Your virtual card will be automatically renewed. We may not replace your card. For example, we will not replace it if you haven\u2019t used it for an extended period of time. You cannot make transactions with an expired card. Accessing Accounts - Each card may be used to access more than one account. This means that the same card can be linked to your accounts as well as accounts for which you are an authorized user. Cards are subject to daily and weekly transaction limits. The transaction limit varies depending whether the transaction is carried out: at an ATM, including for a withdrawal of cash; with a participating merchant; for fund transfers between accounts. c. Use of your account Your account must be used for personal purposes, in compliance with legislation and in a reasonable fashion, as must the technological devices used to access it. d. Service charges Service charges are described in the fee guide. We periodically revise these charges and will disclose them to you electronically. Every month, we debit these charges from your account. These charges are debited on the first business day after the day on which the billing cycle assigned to you ends. The charge debit date and the date charges appear on your statement or in your passbook do not always correspond. If the end of the billing cycle falls on a non-business day, fees are indicated on the previous business day even if they are debited later. You must pay these charges as well as those set out in our fee guide to process information or document requests regarding you from third parties, for example, under the terms of a writ of seizure, notice of appearance, decree, a request from a government agency or any other request that we must legally process. Third parties may also charge additional fees, for example, enrolment fees for a technological device, connection fees for using our online services or fund transfer fees. You are responsible for paying these fees. e. How to load money to your account You can load money to your account through: Interac e-transfer\u00ae Electronic funds transfers such as direct deposits You are responsible to check your account payment history to know the status of a transfer. f. Stop a payment You can request a stop a payment to prevent a preauthorized debit. You must contact customer services as indicated on the line Information about your Finaptic Account above within a reasonable amount of time before the payment. You must inform us of the date of the payment, its amount, the account number and the payee\u2019s name. If any of this information is inaccurate, the stop payment will not be carried out. We are not responsible for any inconvenience you may experience in such an event. Despite a stop payment order, a preauthorized debit can be presented again for a future payment date. You are responsible for contacting the person to whom you gave authorization to cancel any future preauthorized debits. We will not follow up with that person on your behalf. What conditions are applicable to the authorized user \u00b6 a. Conditions of use You may authorize other people to use your Account, subject to any limitations imposed by us or selected by you. You confirm that the authorized user consents to the collection, use and disclosure of their personal information for the purpose of using your Account. You must inform the authorized user the terms and conditions set out in this Agreement, and those which apply to the authorized user. You must also inform the authorized user of any change to the conditions or of the termination of this Agreement. The authorized user will no longer be able to use your Account if it is closed. b. Non-responsibility of the authorized user The authorized user is not responsible for transactions charged to your account. You are solely responsible for this person\u2019s transactions. c. Removal of authorization and card cancellation You can cancel the authorization given to the authorized user to use your account at any time. You must contact us at the telephone number provided at the beginning of this agreement. We will then cancel the authorized user\u2019s access to your Account and use of the card. An authorized user may also request the cancellation of their access to your Account and use of the card. d. Authorized user rights An authorized user may: Access your account information; Make any transaction described in this Agreement; Request a card; Request a stop payment or dispute a transaction they have made. e. Restrictions to the authorized user rights At your discretion, you may : Limit the authorized user\u2019s access to your Account information; Impose limits to the transactions permitted to authorized user; Add any condition we make available to the authorized user\u2019s rights to your Account. What are your responsibilities You are responsible for all the obligations set out in this agreement. In particular, you are responsible for: all your Finaptic Account transactions; verifying your account transaction history regularly and notifying customer service of any error, discrepancy or possible fraudulent transaction within 30 days of the transaction. The transaction will be considered final and accurate following this period; maintaining the security of your Finaptic Account and card, and Finaptic app; having a device that is able to receive wireless text messaging services and access the Internet; downloading, installing and updating the Finaptic to its most current version; limiting the use of your Finaptic card to pay for expenses for your ordinary and usual needs if you are a resident of Quebec and under 18 years old; respecting the intellectual property rights of the mobile application and other technology providers; not using our intellectual property for commercial purposes (for example logos, trademarks, applications, software and web content); preserving at all times the confidentiality of your personal identification number (PIN) and other passwords; ensuring that each authorized user receives a copy of this agreement and agrees to abide by the terms; informing customer service promptly: in case of loss or theft of a card; if your card or account is being used without authorization; of any changes to your personal information, such as email address, phone number or home address; if the confidentiality of your PIN or other password has been compromised (including those of an authorized user) or if you suspect another person of knowing it. What you are not responsible for \u00b6 You are not responsible for unauthorized transactions made in store, over the phone, online, on a mobile device and transactions at an ATM when: you have used reasonable care in protecting the card from loss or theft; and you promptly reported the loss, theft or possible unauthorized use on the card. However, you may be held liable for all losses and damages incurred in the case of gross fault on your part: in the protection of your PIN or other passwords; in respecting your obligations described in this Agreement. What are our general rights \u00b6 We have the right, at any time and without notice, to: suspend the card or account, for example if it\u2019s inactive for an extended period of time; issue, renew or replace the card at our discretion; modify an online service or one of its features; block a card transaction; block access to an account and to the Finaptic app, for example in the event of a cyber-threat or misdeeds targeting electronic systems. We also have the right to terminate this agreement at any time, upon 60 days written notice to you. Notices sent electronically are considered received the moment they are sent from our systems. What are our rights if you do not meet your obligations \u00b6 When you do not meet your obligations (you are in default) You are in default if: You do not meet your obligations set out in this agreement; You use your Finaptic Pilot account, card or the mobile application in an unusual, fraudulent, illegal or abusive manner. If you are in default under this agreement, we may exercise, in the order we choose, one or several of the following rights: Suspend your right to use the account; Cancel the card and this agreement; Exercise all our recourses. We could exercise any right as soon as you are in default or at a later date. Any omission on our part to exercise any of these rights does not constitute a waiver to exercise such rights in the future. We will send you a written notice of your default. Within 30 days of receipt of this notice, you may remedy the default. What the limitation of our liability relating to security is \u00b6 We take all reasonable measures to ensure the confidentiality of electronic data exchanges, the security of transactions and the protection of your personal information. What are the amendments that can be made to this agreement \u00b6 What we can amend We may at any time replace this agreement with another one or amend the terms and conditions related to: your liability; the account limits; the fees; the use of the account and the card; the privileges; the foreign currency transactions; the cancellation of the agreement. We will send you a written notice setting out the old and new provisions at least 30 days prior to the amendment. If we increase an existing fee or add a new one, such amendment shall be posted on the Finaptic App at least 60 days before the amendment takes effect. A modification to this agreement does not create a new agreement. The sections of this agreement that have not been modified remain applicable. How you may refuse the amendments You may refuse the amendment by terminating the agreement in the manner provided on the line Cancellation of the card of the initial disclosure above within 30 days of the effective date of the amendment. How you agree to the amendments You will be deemed to have agreed to the amendments if you use the card or account following the time period set out in this section. Relationship with the merchant \u00b6 Any dispute with a merchant must be settled directly with the merchant. A refund of a transaction made with your Finaptic Account is subject to the merchant's refund policy. Refunds to your linked account may take up to 3 days from the date that your refund is processed for your new balance to appear on your Account. Debits and credits for transactions may not appear on your Account the same day as the purchase, return or adjustment. You may sometimes ask for the cancellation of certain transactions if the merchant has not respected his obligations. For more information, please contact customer service as indicated on the line Information about your Finaptic Account. General rules applicable to this agreement \u00b6 Ownership of the card associated with your Finaptic Account \u00b6 The card remains our property at all times. You cannot transfer the card. You must return or destroy your physical card if we ask you to. Assignment of agreement \u00b6 This agreement is legally binding on our successors and assigns as well as on your heirs and legal representatives. We may at any time, without notifying you, assign our rights and obligations under this agreement to any assignee. Conflict between agreements \u00b6 Other agreements may also apply to the accounts, such as: agreement governing your related accounts; agreement governing the use of automated services and electronic banking solutions; agreement governing digital wallets; licenses to use the distributor's applications. In the event of conflict between this agreement and another agreement, the clauses of this agreement will prevail. Power of attorney \u00b6 You may not designate a power of attorney on your behalf for your Account. Death \u00b6 In case of death, the Account is blocked until a legal representative is designated to settle the succession or estate. Privacy Policy of Issuing Financial Institution \u00b6 NATSOLUTION'S privacy (or protection of personal information) policy as well as your rights concerning access to your personal information held by NATSOLUTION is available at all times at nbc.ca. Governing law \u00b6 This agreement is governed and interpreted in accordance with the laws of the province or territory where you reside. You will be treated as a resident of the province or territory of your latest address on file. You irrevocably acknowledge the exclusive jurisdiction of the courts in the above province or territory with respect to the application and interpretation of this agreement. Language \u00b6 The parties have requested that the agreement be drawn up in English. Les parties confirment leur volont\u00e9 que le pr\u00e9sent contrat soit r\u00e9dig\u00e9 en anglais. How to resolve concerns with us \u00b6 We value your feedback. We are committed to resolving customer complaints fairly and in a timely manner. We encourage you to contact us with your complaints so that we can resolve them and serve you better. Please follow these steps if you have a complaint. Step One: Contact us through the Finaptic in-app message centre or send us an email at pilot.feedback@finaptic.com You may also call us at 416-460-3360 (Collect). If your concern is not resolved to your satisfaction, you may escalate your complaint in Step Two. Step Two: If Finaptic has not resolved your complaint to your satisfaction, you may then contact the Ombudsman for Banking Services and Investments (OBSI). The OBSI is an independent external body that may review your complaint after you have received a final response in Step One. Ombudsman for Banking Services and Investments (OBSI) 2025 Queen Street West, Suite 2400 P.O. Box 8, Toronto, ON M5H 3R3 www.obsi.ca Consumer complaints may also be made to the Financial Consumer Agency of Canada (FCAC). The FCAC will determine whether the financial institution is in compliance with federal consumer protection regulations. It does not resolve individual consumer complaints. The Financial Consumer Agency of Canada (FCAC) 427 Laurier Ave. West, 6th Floor Ottawa, Ontario K1R 1B9 Website: www.fcac-acfc.gc.ca E-mail: info@fcac-acfc.gc.ca Telephone: For service in English: 1-866-461-FCAC (3222) For service in French: 1-866-461-ACFC (2232) For calls from outside Canada: 613-960-4666 *Information officers are available from Monday to Friday, between 8:30 a.m. and 5:00 p.m., Eastern Time. Teletypewriter (TTY): 1-866-914-6097 / 613-947-7771 Video Relay Service: FCAC welcomes Video Relay Service (VRS) calls. You do not need to authorize the relay service operator to communicate with FCAC. Visit Canada VRS to learn more. Other Regulatory Provisions \u00b6 a. Dormant accounts and unclaimed balances If you do not carry out transactions in an account or cease to do so, it becomes dormant and fees may be charged. We are legally required to send you dormant account notices. We will do so by mail or electronically. If an account is dormant for 10 years, we will close it and if there is a balance, transfer it to the Bank of Canada. For additional information on how to collect an unclaimed balance, please contact the Bank of Canada directly: Bank of Canada \u2013 Unclaimed Balances Department 234 Laurier West Ottawa, Ontario K1A 0G9 Telephone: 1-800-303-1282 Website: http://www.bankofcanada.ca/unclaimed-balances/ Email: info@bankofcanada.ca b. Deposit insurance NATSOLUTION is a member of the Canada Deposit Insurance Corporation. Your deposits will be protected under the Canada Deposit Insurance Corporation Act if they meet certain requirements. For more information, contact us or: Canada Deposit Insurance Corporation 50 O\u2019Connor, 17th Floor Ottawa, Ontario K1P 6L2 Telephone: 1-800-461-7232 Website: www.cdic.ca Email: info@cdic.ca NATSOLUTION is authorized to receive deposits under the Deposit Insurance Act (Quebec). Your deposits will be protected under this law if they meet certain requirements. For more information, contact us or: Autorit\u00e9 des march\u00e9s financiers 8800 Square-Victoria, 22nd Floor P.O. Box 246, Tour de la Bourse Montreal, Quebec H4Z 1G3 Telephone: 1-877-525-0337 Website: lautorite.qc.ca \u00ae Mastercard, Mastercard Worldwide, Cirrus and the circles design are registered trademarks of Mastercard International Incorporated, used under licence by NatCan Trust Company. \u00ae NATSOLUTION is a registered trademark of NatCan Trust Company. \u00ae Interac e-Transfer is a trademark of Interac Inc., used under licence by NatCan Trust Company.","title":"Finaptic Account Fee Guide and Agreement"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#finaptic-account-fee-guide-and-agreement","text":"","title":"Finaptic Account Fee Guide and Agreement"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#finaptic-account-fee-guide","text":"Last Updated August 27, 2021 Issuing institution: NATSOLUTION, 600, de la Gaucheti\u00e8re Ouest, Montr\u00e9al, province of Qu\u00e9bec.","title":"Finaptic Account Fee Guide"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#information-about-your-finaptic-account","text":"For information or to make complaints, you may: Use the Finaptic in app chat when made available, or use the tools to report a bug or issue. Contact: pilot.feedback@finaptic.com Call: 416-460-3360 (Collect) Write: Finaptic Technologies Inc., 611 Belmont Drive, Montr\u00e9al, QC Balance verification: The balance of the Finaptic Account may be verified by accessing the Finaptic Pilot app. You can also contact our customer service as indicated in the line above: Information about your Finaptic Account. Overdraft: No overdraft is permitted. Currency: Canadian Dollar Fees: There is no monthly fee for using this account. Transactions in a foreign currency are converted into Canadian dollars at the conversion rate used by Mastercard Worldwide\u00ae on the date the transaction is authorized. We add 2,5% to the conversion rate used as a fee. We do not charge any other fees. Fees may be charged to your bank account by your financial institution for transfers via Interac e-TransferTM. Fees may also be charged for use of an ATM by the ATM provider. Interest: There is no interest paid on account balances. Partial payment of purchase: Your account must have enough money to cover the entire cost of a transaction. If it does not, the merchant may accept a partial payment transaction. You must then cover the difference with another form of payment such as a credit card or cash. Expiry date: Your card has an expiry date which is shown on your card. We will replace your physical card when it expires. Your virtual card will be automatically renewed. Lost or stolen card: You must inform us promptly if your card is lost or stolen. You can contact customer services as indicated on the line Information about your Finaptic Pilot above. You can temporarily block the use of your card via the mobile application. Cancellation: You can cancel the card connected to your Finaptic Pilot Account at any time by contacting us through the methods listed in the line Information about your Finaptic Account above. The cancellation of your card does not automatically close your Finaptic Pilot Account. You must also request to close your account. Uninsured deposit: Money on your Finaptic Account is not insured by the Canada Deposit Insurance Corporation.","title":"Information about your Finaptic Account"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#finaptic-account-agreement","text":"This Agreement sets out the conditions that apply to your Finaptic Account and any card or other device or technology issued that allows access to the Account at any time. The fee guide is an integral part of this Agreement. Other agreements may also apply to services provided with your Account(s). If there is a conflict between the terms of this Agreement and any other agreements, the most current version of this document will apply. Not all features described in this Agreement may be available when you open a Finaptic Account. The Finaptic Account and associated card is issued by NATSOLUTION and distributed by Finaptic Technologies Inc.","title":"Finaptic Account Agreement"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#how-to-use-your-finaptic-account","text":"The Finaptic Account is only accessible electronically, meaning you must have a compatible device that allows you to download the Finaptic App and access your Account. The Finaptic Account allows you to: make a purchase everywhere Mastercard\u00ae is accepted; make a cash withdrawal at an ATM (Automated Teller Machine) where Mastercard\u00ae and Cirrus\u00ae are accepted; make a cash withdrawal from a merchant, if accepted by the merchant; transfer money through Interac e-Transfers\u00ae; make electronic funds transfers such as preauthorized debits; make online bill payments through the mobile application. Money in your account does not earn interest. You must load money to your account before using your card to make transactions. a. Mobile access You can access your Account and carry out transactions through the Finaptic App. NATSOLUTION does not provide the services on the Finaptic mobile application and is not responsible for them, or any loss, harm or damage of any kind you may suffer as a result of using the Finaptic App and associated services. b. Card access You may access your Account through a card we issue to you to make payments from your account everywhere Mastercard is accepted. Cards on this Account will operate on the Mastercard network. This means, when making purchases, you should select \u201cCredit\u201d at the point of sale to complete the transaction. Request a Card - We may not automatically send you a card to access your account. If you don\u2019t automatically receive one, you can request a physical or virtual card for yourself or an authorized user at any time. Instructions on how to do this are provided on the mobile app. Expiry date of the card - Your card has an expiry date. The expiry date is indicated on your card. We will replace your physical card when it expires. Your virtual card will be automatically renewed. We may not replace your card. For example, we will not replace it if you haven\u2019t used it for an extended period of time. You cannot make transactions with an expired card. Accessing Accounts - Each card may be used to access more than one account. This means that the same card can be linked to your accounts as well as accounts for which you are an authorized user. Cards are subject to daily and weekly transaction limits. The transaction limit varies depending whether the transaction is carried out: at an ATM, including for a withdrawal of cash; with a participating merchant; for fund transfers between accounts. c. Use of your account Your account must be used for personal purposes, in compliance with legislation and in a reasonable fashion, as must the technological devices used to access it. d. Service charges Service charges are described in the fee guide. We periodically revise these charges and will disclose them to you electronically. Every month, we debit these charges from your account. These charges are debited on the first business day after the day on which the billing cycle assigned to you ends. The charge debit date and the date charges appear on your statement or in your passbook do not always correspond. If the end of the billing cycle falls on a non-business day, fees are indicated on the previous business day even if they are debited later. You must pay these charges as well as those set out in our fee guide to process information or document requests regarding you from third parties, for example, under the terms of a writ of seizure, notice of appearance, decree, a request from a government agency or any other request that we must legally process. Third parties may also charge additional fees, for example, enrolment fees for a technological device, connection fees for using our online services or fund transfer fees. You are responsible for paying these fees. e. How to load money to your account You can load money to your account through: Interac e-transfer\u00ae Electronic funds transfers such as direct deposits You are responsible to check your account payment history to know the status of a transfer. f. Stop a payment You can request a stop a payment to prevent a preauthorized debit. You must contact customer services as indicated on the line Information about your Finaptic Account above within a reasonable amount of time before the payment. You must inform us of the date of the payment, its amount, the account number and the payee\u2019s name. If any of this information is inaccurate, the stop payment will not be carried out. We are not responsible for any inconvenience you may experience in such an event. Despite a stop payment order, a preauthorized debit can be presented again for a future payment date. You are responsible for contacting the person to whom you gave authorization to cancel any future preauthorized debits. We will not follow up with that person on your behalf.","title":"How to use your Finaptic Account"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#what-conditions-are-applicable-to-the-authorized-user","text":"a. Conditions of use You may authorize other people to use your Account, subject to any limitations imposed by us or selected by you. You confirm that the authorized user consents to the collection, use and disclosure of their personal information for the purpose of using your Account. You must inform the authorized user the terms and conditions set out in this Agreement, and those which apply to the authorized user. You must also inform the authorized user of any change to the conditions or of the termination of this Agreement. The authorized user will no longer be able to use your Account if it is closed. b. Non-responsibility of the authorized user The authorized user is not responsible for transactions charged to your account. You are solely responsible for this person\u2019s transactions. c. Removal of authorization and card cancellation You can cancel the authorization given to the authorized user to use your account at any time. You must contact us at the telephone number provided at the beginning of this agreement. We will then cancel the authorized user\u2019s access to your Account and use of the card. An authorized user may also request the cancellation of their access to your Account and use of the card. d. Authorized user rights An authorized user may: Access your account information; Make any transaction described in this Agreement; Request a card; Request a stop payment or dispute a transaction they have made. e. Restrictions to the authorized user rights At your discretion, you may : Limit the authorized user\u2019s access to your Account information; Impose limits to the transactions permitted to authorized user; Add any condition we make available to the authorized user\u2019s rights to your Account. What are your responsibilities You are responsible for all the obligations set out in this agreement. In particular, you are responsible for: all your Finaptic Account transactions; verifying your account transaction history regularly and notifying customer service of any error, discrepancy or possible fraudulent transaction within 30 days of the transaction. The transaction will be considered final and accurate following this period; maintaining the security of your Finaptic Account and card, and Finaptic app; having a device that is able to receive wireless text messaging services and access the Internet; downloading, installing and updating the Finaptic to its most current version; limiting the use of your Finaptic card to pay for expenses for your ordinary and usual needs if you are a resident of Quebec and under 18 years old; respecting the intellectual property rights of the mobile application and other technology providers; not using our intellectual property for commercial purposes (for example logos, trademarks, applications, software and web content); preserving at all times the confidentiality of your personal identification number (PIN) and other passwords; ensuring that each authorized user receives a copy of this agreement and agrees to abide by the terms; informing customer service promptly: in case of loss or theft of a card; if your card or account is being used without authorization; of any changes to your personal information, such as email address, phone number or home address; if the confidentiality of your PIN or other password has been compromised (including those of an authorized user) or if you suspect another person of knowing it.","title":"What conditions are applicable to the authorized user"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#what-you-are-not-responsible-for","text":"You are not responsible for unauthorized transactions made in store, over the phone, online, on a mobile device and transactions at an ATM when: you have used reasonable care in protecting the card from loss or theft; and you promptly reported the loss, theft or possible unauthorized use on the card. However, you may be held liable for all losses and damages incurred in the case of gross fault on your part: in the protection of your PIN or other passwords; in respecting your obligations described in this Agreement.","title":"What you are not responsible for"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#what-are-our-general-rights","text":"We have the right, at any time and without notice, to: suspend the card or account, for example if it\u2019s inactive for an extended period of time; issue, renew or replace the card at our discretion; modify an online service or one of its features; block a card transaction; block access to an account and to the Finaptic app, for example in the event of a cyber-threat or misdeeds targeting electronic systems. We also have the right to terminate this agreement at any time, upon 60 days written notice to you. Notices sent electronically are considered received the moment they are sent from our systems.","title":"What are our general rights"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#what-are-our-rights-if-you-do-not-meet-your-obligations","text":"When you do not meet your obligations (you are in default) You are in default if: You do not meet your obligations set out in this agreement; You use your Finaptic Pilot account, card or the mobile application in an unusual, fraudulent, illegal or abusive manner. If you are in default under this agreement, we may exercise, in the order we choose, one or several of the following rights: Suspend your right to use the account; Cancel the card and this agreement; Exercise all our recourses. We could exercise any right as soon as you are in default or at a later date. Any omission on our part to exercise any of these rights does not constitute a waiver to exercise such rights in the future. We will send you a written notice of your default. Within 30 days of receipt of this notice, you may remedy the default.","title":"What are our rights if you do not meet your obligations"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#what-the-limitation-of-our-liability-relating-to-security-is","text":"We take all reasonable measures to ensure the confidentiality of electronic data exchanges, the security of transactions and the protection of your personal information.","title":"What the limitation of our liability relating to security is"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#what-are-the-amendments-that-can-be-made-to-this-agreement","text":"What we can amend We may at any time replace this agreement with another one or amend the terms and conditions related to: your liability; the account limits; the fees; the use of the account and the card; the privileges; the foreign currency transactions; the cancellation of the agreement. We will send you a written notice setting out the old and new provisions at least 30 days prior to the amendment. If we increase an existing fee or add a new one, such amendment shall be posted on the Finaptic App at least 60 days before the amendment takes effect. A modification to this agreement does not create a new agreement. The sections of this agreement that have not been modified remain applicable. How you may refuse the amendments You may refuse the amendment by terminating the agreement in the manner provided on the line Cancellation of the card of the initial disclosure above within 30 days of the effective date of the amendment. How you agree to the amendments You will be deemed to have agreed to the amendments if you use the card or account following the time period set out in this section.","title":"What are the amendments that can be made to this agreement"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#relationship-with-the-merchant","text":"Any dispute with a merchant must be settled directly with the merchant. A refund of a transaction made with your Finaptic Account is subject to the merchant's refund policy. Refunds to your linked account may take up to 3 days from the date that your refund is processed for your new balance to appear on your Account. Debits and credits for transactions may not appear on your Account the same day as the purchase, return or adjustment. You may sometimes ask for the cancellation of certain transactions if the merchant has not respected his obligations. For more information, please contact customer service as indicated on the line Information about your Finaptic Account.","title":"Relationship with the merchant"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#general-rules-applicable-to-this-agreement","text":"","title":"General rules applicable to this agreement"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#ownership-of-the-card-associated-with-your-finaptic-account","text":"The card remains our property at all times. You cannot transfer the card. You must return or destroy your physical card if we ask you to.","title":"Ownership of the card associated with your Finaptic Account"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#assignment-of-agreement","text":"This agreement is legally binding on our successors and assigns as well as on your heirs and legal representatives. We may at any time, without notifying you, assign our rights and obligations under this agreement to any assignee.","title":"Assignment of agreement"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#conflict-between-agreements","text":"Other agreements may also apply to the accounts, such as: agreement governing your related accounts; agreement governing the use of automated services and electronic banking solutions; agreement governing digital wallets; licenses to use the distributor's applications. In the event of conflict between this agreement and another agreement, the clauses of this agreement will prevail.","title":"Conflict between agreements"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#power-of-attorney","text":"You may not designate a power of attorney on your behalf for your Account.","title":"Power of attorney"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#death","text":"In case of death, the Account is blocked until a legal representative is designated to settle the succession or estate.","title":"Death"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#privacy-policy-of-issuing-financial-institution","text":"NATSOLUTION'S privacy (or protection of personal information) policy as well as your rights concerning access to your personal information held by NATSOLUTION is available at all times at nbc.ca.","title":"Privacy Policy of Issuing Financial Institution"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#governing-law","text":"This agreement is governed and interpreted in accordance with the laws of the province or territory where you reside. You will be treated as a resident of the province or territory of your latest address on file. You irrevocably acknowledge the exclusive jurisdiction of the courts in the above province or territory with respect to the application and interpretation of this agreement.","title":"Governing law"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#language","text":"The parties have requested that the agreement be drawn up in English. Les parties confirment leur volont\u00e9 que le pr\u00e9sent contrat soit r\u00e9dig\u00e9 en anglais.","title":"Language"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#how-to-resolve-concerns-with-us","text":"We value your feedback. We are committed to resolving customer complaints fairly and in a timely manner. We encourage you to contact us with your complaints so that we can resolve them and serve you better. Please follow these steps if you have a complaint. Step One: Contact us through the Finaptic in-app message centre or send us an email at pilot.feedback@finaptic.com You may also call us at 416-460-3360 (Collect). If your concern is not resolved to your satisfaction, you may escalate your complaint in Step Two. Step Two: If Finaptic has not resolved your complaint to your satisfaction, you may then contact the Ombudsman for Banking Services and Investments (OBSI). The OBSI is an independent external body that may review your complaint after you have received a final response in Step One. Ombudsman for Banking Services and Investments (OBSI) 2025 Queen Street West, Suite 2400 P.O. Box 8, Toronto, ON M5H 3R3 www.obsi.ca Consumer complaints may also be made to the Financial Consumer Agency of Canada (FCAC). The FCAC will determine whether the financial institution is in compliance with federal consumer protection regulations. It does not resolve individual consumer complaints. The Financial Consumer Agency of Canada (FCAC) 427 Laurier Ave. West, 6th Floor Ottawa, Ontario K1R 1B9 Website: www.fcac-acfc.gc.ca E-mail: info@fcac-acfc.gc.ca Telephone: For service in English: 1-866-461-FCAC (3222) For service in French: 1-866-461-ACFC (2232) For calls from outside Canada: 613-960-4666 *Information officers are available from Monday to Friday, between 8:30 a.m. and 5:00 p.m., Eastern Time. Teletypewriter (TTY): 1-866-914-6097 / 613-947-7771 Video Relay Service: FCAC welcomes Video Relay Service (VRS) calls. You do not need to authorize the relay service operator to communicate with FCAC. Visit Canada VRS to learn more.","title":"How to resolve concerns with us"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_account_fee_guide_and_agreement/#other-regulatory-provisions","text":"a. Dormant accounts and unclaimed balances If you do not carry out transactions in an account or cease to do so, it becomes dormant and fees may be charged. We are legally required to send you dormant account notices. We will do so by mail or electronically. If an account is dormant for 10 years, we will close it and if there is a balance, transfer it to the Bank of Canada. For additional information on how to collect an unclaimed balance, please contact the Bank of Canada directly: Bank of Canada \u2013 Unclaimed Balances Department 234 Laurier West Ottawa, Ontario K1A 0G9 Telephone: 1-800-303-1282 Website: http://www.bankofcanada.ca/unclaimed-balances/ Email: info@bankofcanada.ca b. Deposit insurance NATSOLUTION is a member of the Canada Deposit Insurance Corporation. Your deposits will be protected under the Canada Deposit Insurance Corporation Act if they meet certain requirements. For more information, contact us or: Canada Deposit Insurance Corporation 50 O\u2019Connor, 17th Floor Ottawa, Ontario K1P 6L2 Telephone: 1-800-461-7232 Website: www.cdic.ca Email: info@cdic.ca NATSOLUTION is authorized to receive deposits under the Deposit Insurance Act (Quebec). Your deposits will be protected under this law if they meet certain requirements. For more information, contact us or: Autorit\u00e9 des march\u00e9s financiers 8800 Square-Victoria, 22nd Floor P.O. Box 246, Tour de la Bourse Montreal, Quebec H4Z 1G3 Telephone: 1-877-525-0337 Website: lautorite.qc.ca \u00ae Mastercard, Mastercard Worldwide, Cirrus and the circles design are registered trademarks of Mastercard International Incorporated, used under licence by NatCan Trust Company. \u00ae NATSOLUTION is a registered trademark of NatCan Trust Company. \u00ae Interac e-Transfer is a trademark of Interac Inc., used under licence by NatCan Trust Company.","title":"Other Regulatory Provisions"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_app_terms_of_use/","text":"Finaptic App Terms of Use \u00b6 These Terms of Use (\"Terms\") for the Finaptic mobile application (the \u201cApp\u201d) were last updated on August 27, 2021. 1.(a) Read, Agree, and Keep a Copy of the Terms. You must read and agree to these Terms, which are a legally binding contract between you and us, before you can use the App and access the Services. Finaptic Technologies Inc. (referred to in the Terms as \u201cFinaptic, \u201cus\u201d, \u201cwe\u201d, and \u201cour\u201d) provides access to financial products and services (the \u201cServices\u201d) on the App. By clicking the button on-screen on the App, you agree you have read, will comply with and be legally bound by the Terms, regardless of whether you sign up for an account. If you do not read and agree to the Terms, you may not use the App or the Services. The Terms are effective when you click to accept the Terms. Keep a copy of the Terms. You can print or save these Terms using the print or save function in your browser. We will email you a copy of or provide a link to these Terms at the email address you provided when signing up for the Services. In order to use the Services, you must be at least 18 years of age or older and the age of majority where you live, unless you have been invited to sign up for the Services by an adult . If you are the age of majority, you also accept these terms on behalf of any child(ren) you invite to use the App. If any child(ren) you invite to use the App add their card to a third-party mobile wallet, you accept on their behalf the \u201cNotice for Customers Enrolling in a Third-Party Mobile Payment System\u201d (a copy of which is posted at ). (b) On-Screen Terms. Terms shown on-screen form part of these Terms. There may be terms, conditions, instructions or disclaimers related to the Services displayed on the screens in the App, or when you click on icons or links on the App screens. By using any of the Services, you must access and agree that the terms, conditions, instructions or disclaimers apply to your use of or access to the applicable Services, in addition to the terms and conditions of any other applicable agreements. Accounts If you sign up for an account on the App (your \u201cAccount\u201d), you must provide and continue to provide accurate and complete information, including a valid email address. You have complete responsibility for your Account and everything that happens on your Account, including for any harm or damage (to us or anyone else) caused by someone using your Account without your permission. You are solely responsible for safekeeping your Account login credentials. You may not transfer your Account to or share your login credentials with someone else or use someone else\u2019s account. General Use Subject to these Terms, we grant a non-exclusive, non-transferable, non-sub-licensable, revocable, limited right and license to use the Services solely for the purpose set out by the Services. Under these Terms, the Services means the features, functionality, content and information provided via the App and include any services that may be provided by Service Providers and Third Parties. The Services may change from time to time, but generally include financial products such as a prepaid product and deposit product, and features such as making online purchase and bill payments, and accepting deposits and etransfers. Accounts for children may also be set up and controlled by an adult, such as a parent or legal guardian. (b) Costs, Fees and Related Charges. Do I have to pay service fees? There are no fees to access the App and the Services. In the future, we may charge fees as the App or the Services develop. You are responsible for all costs, fees, data plans and related charges associated with your use of any Devices, and they are not reimbursable by us. (c) Communication. How will we contact each other? You can contact us at pilot.feedback@finaptic.com We will communicate with you through the App on screen and in the App message centre. We may email or text you. It is your responsibility to provide us your most up to date email address and telephone number. You understand that if you do not do so, we may not be able to complete the signup process or otherwise contact you. (d) Marketing If you do not wish to be presented with promotional content please change your communication preferences on the App. Changes to your communication preferences for promotional content will not change how we communicate with you for non-promotional content related to the Services. No Representations or Warranties. The App and the Services are provided \u201cas is\u201d. We are providing you with the App and the Services on an \u201cas is\u201d and \u201cas available\u201d basis and we do not make any representations or provide any warranties concerning them. Without limiting the foregoing, we expressly disclaim all warranties in connection with the App and in connection with the Services, whether express or implied, including, but not limited to the implied warranties of merchantability, fitness for a particular purpose and non-infringement. Limitation of Liability We will not be responsible for any loss, damage, harm, injury, delay or inconvenience suffered or incurred by you with respect to: (i) these Terms, the App, the Services or the Third Party Services, (ii) any instruction given to, by or purported to be given by you, using Sign-In Credentials, in connection with the Services or Third Party Services, or (iii) any products or services you obtain or purchase from us or from a Third Party to whom we refer you, or otherwise. Such losses, damages, injuries, delays and inconveniences include, without limitation, (i) direct, incidental, indirect, consequential, special, aggravated, punitive or exemplary damages, (ii) loss of data, profits, information, opportunity, revenues and goodwill, and (iii) any other business interruption, commercial or economic losses. The foregoing limitation of liability applies regardless of the cause of action, even if we have been advised of the possibility of such damages. In addition, in no event, even if we are negligent, will we be liable for any loss or damage suffered by you that is caused by any one or more of: \u2022 The actions of, or any failure to act by a Third Party or Service Provider (and no such Third Party will be considered to be acting as our agent); \u2022 Mistakes, errors, omissions, inaccuracies or other inadequacies of, or contained in the Services or Third Party Services or any data given by you to us, any Third Party or Service Provider, including your failure to update; \u2022 Any delay, error, interruption or failure by us, any Third Party or Service Provider to perform or fulfill any of our obligations to you due to any cause beyond our control or their control, any system malfunctions or any technical failures; \u2022 Unsecured communication being inaccurate, intercepted, reviewed or altered by others, or not received by you; \u2022 Your access to the Services or Third Party Services, including, without limitation, any delay or inability to access the Services or Third Party Services; \u2022 Your failure to receive or view any communication that has been presented to you, and we will not be responsible for any delay, damage or inconvenience that such failure may cause; or \u2022 Your failure to fulfill any of your obligations under these Terms, including those in the \u201cSecurity\u201d section of these Terms, or to comply with any instructions we may provide to you from time to time in connection with the App and the Services. You release and indemnify us for any claim, cost and liability incurred: (i) as a result of your use of the App any of the Services and Third Party Services; or (ii) as a result of your breach of these Terms. Closing your Account We may terminate or suspend your access immediately, without prior notice or liability, for any reason whatsoever, including without limitation if you breach these Terms. Upon termination, your right to use the App and access Services will cease immediately. We are not responsible for any loss or inconvenience that may result in such suspension or termination. You may delete your profile and terminate your use of the App and access to the Services and these Terms at any time through the Site or by contacting us using the contact information provided in the \u201cCommunication\u201d section of these Terms. In the event of the death of a user, the Account of that user will be closed. Changes to the Terms We reserve the right, at our sole discretion, to modify or replace these Terms at any time. By continuing to access the App or use our Services after those revisions become effective, you agree to be bound by the revised terms. If you do not agree to the new terms, in whole or in part, please stop using the Services. Electronic Agreement These Terms and any related terms, conditions, policies, instructions, disclaimers or documents may be accepted in electronic form and your acceptance is binding between you and us. Neither you nor we will contest the validity or enforceability of these Terms and any related documents because they were accepted or signed in electronic form. Language This Agreement is drawn up in English at the request of both you and us. Les parties aux pr\u00e9sentes, soit vous et nous, ont express\u00e9ment convenu que ce contrat soit r\u00e9dig\u00e9 en anglais. Governing Law These Terms, together with any privacy policy that may be published on the App, constitutes the entire agreement between the parties relating to the App and Services and all related activities. These Terms are governed by the laws of the Province of Quebec and the Federal Laws of Canada. In the event of any dispute or proceeding the parties hereby agree to attorn to the exclusive jurisdiction of the Courts of the City of Montreal in the Province of Quebec. Assignment and Severability If any part of these Terms is held to be unlawful, invalid, void, or unenforceable, that part shall be deemed severed and shall not affect the validity and enforceability of the remaining provisions of these Terms. Our failure to enforce strict performance of any provisions of these Terms does not mean we have waived any provision or right. Neither the course of conduct between you and us, nor trade practice modifies any provision of these Terms. We have the right at all times to assign or transfer any or all of our rights and obligations of these Terms. You may not assign or transfer these Terms or any of the obligations or rights under these Terms to any other person whether voluntarily or, by operation of law. Additional Terms relating to the App Compliance and Prohibitions. Appropriate use of the App. When using the App and accessing the Services, you may not: \u2022 Provide untrue, inaccurate and incomplete information; \u2022 Use the App or access the Services for any illegal, fraudulent, malicious, harassing or defamatory activity or purpose; \u2022 Use any robot, spider or other indexing device when using the App or accessing the Services; \u2022 Use any part of the Services to provide internet, service bureau, outsourcing or third- party services or redistribute all or any part of the Services; \u2022 Take steps or actions that could or do undermine the security, integrity, effectiveness, goodwill or connectivity of the App or the Services (including illegal, fraudulent, malicious, defamatory or other activities that threaten to harm or cause harm to any other person); or \u2022 Reverse engineer or reverse compile the source code for the App or any of the service technology. Ownership. You can use it, but you can\u2019t keep it. We grant you a non-exclusive and non-transferable single-user (non-concurrent) license to use the App, in accordance with these Terms. At any time, and at our sole discretion, we may limit, restrict, suspend, declare a moratorium on, or terminate your ability to access the App, or any of the Services, or both; and with notice to you, we may end the terms relating to the App, including the Services. If these Terms are terminated, you will destroy all copies of the App and all copies of any documentation for the App then in your possession. The grant of this license may not be assigned by you unless agreed upon in writing by us. We retain at all times all ownership rights, including without limitation, copyright, in the App. You agree not to copy, reproduce, transfer copies or reverse engineer the App and not to disclose or distribute the App to Third Parties. We have no obligation to provide any training, maintenance, or other assistance for the App. Finaptic is the owner, or licensee, of all intellectual property rights subsisting on each screen made available through the App. Unless otherwise indicated, trademarks and logos, and all works, including texts, images, illustrations, software, HTML codes, audio clips and videos appearing on the Services are the property of Finaptic., or those of our licensors, and without our express written permission, may not be reproduced, republished, downloaded, posted, transmitted, distributed or modified, in whole or in part, in any form whatsoever, except for personal and non-commercial use, including viewing, printing or archiving of electronic copies of your App activities, in accordance with these Terms and as we may further instruct you. Nothing in these Terms or on the App is to be interpreted as conferring a right to use our works, trademarks or logos in any other way, or those of Finaptic or our Service Providers. App Rules for downloading the App. By choosing to install the App on your Device for the purpose of accessing the Services you consent to the installation of the App and any future updates or upgrades to the App. You may withdraw your consent by deleting the App from your Device. Our mailing address is Belmont Ave, Montreal, QC Push Notifications. We may sometimes need to send information to your Device about the Services. You authorize us to send push notifications to your Device in relation to the Services. In order to enable or to disable push notifications, you must adjust the settings on your Device. You understand that push notifications are unsecure and not encrypted and can be read by others if you allow them to view your Device. We provide push notifications for convenience and information purposes only. Voluntary Participation. Your use of a Device to access certain of the Services through the App is voluntary. If you choose to use your Device to access the Services by installing the App, you warrant that you are the legal owner of your Device. You also warrant that you have legal ownership of the Devices used by children you have invited to use the App. Contact Us with any Questions or Complaints at pilot.feedback@finaptic.com or by mail at: 611 Belmont Ave Westmount, QC, H3Y 2W1.","title":"Finaptic App Terms of Use"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_app_terms_of_use/#finaptic-app-terms-of-use","text":"These Terms of Use (\"Terms\") for the Finaptic mobile application (the \u201cApp\u201d) were last updated on August 27, 2021. 1.(a) Read, Agree, and Keep a Copy of the Terms. You must read and agree to these Terms, which are a legally binding contract between you and us, before you can use the App and access the Services. Finaptic Technologies Inc. (referred to in the Terms as \u201cFinaptic, \u201cus\u201d, \u201cwe\u201d, and \u201cour\u201d) provides access to financial products and services (the \u201cServices\u201d) on the App. By clicking the button on-screen on the App, you agree you have read, will comply with and be legally bound by the Terms, regardless of whether you sign up for an account. If you do not read and agree to the Terms, you may not use the App or the Services. The Terms are effective when you click to accept the Terms. Keep a copy of the Terms. You can print or save these Terms using the print or save function in your browser. We will email you a copy of or provide a link to these Terms at the email address you provided when signing up for the Services. In order to use the Services, you must be at least 18 years of age or older and the age of majority where you live, unless you have been invited to sign up for the Services by an adult . If you are the age of majority, you also accept these terms on behalf of any child(ren) you invite to use the App. If any child(ren) you invite to use the App add their card to a third-party mobile wallet, you accept on their behalf the \u201cNotice for Customers Enrolling in a Third-Party Mobile Payment System\u201d (a copy of which is posted at ). (b) On-Screen Terms. Terms shown on-screen form part of these Terms. There may be terms, conditions, instructions or disclaimers related to the Services displayed on the screens in the App, or when you click on icons or links on the App screens. By using any of the Services, you must access and agree that the terms, conditions, instructions or disclaimers apply to your use of or access to the applicable Services, in addition to the terms and conditions of any other applicable agreements. Accounts If you sign up for an account on the App (your \u201cAccount\u201d), you must provide and continue to provide accurate and complete information, including a valid email address. You have complete responsibility for your Account and everything that happens on your Account, including for any harm or damage (to us or anyone else) caused by someone using your Account without your permission. You are solely responsible for safekeeping your Account login credentials. You may not transfer your Account to or share your login credentials with someone else or use someone else\u2019s account. General Use Subject to these Terms, we grant a non-exclusive, non-transferable, non-sub-licensable, revocable, limited right and license to use the Services solely for the purpose set out by the Services. Under these Terms, the Services means the features, functionality, content and information provided via the App and include any services that may be provided by Service Providers and Third Parties. The Services may change from time to time, but generally include financial products such as a prepaid product and deposit product, and features such as making online purchase and bill payments, and accepting deposits and etransfers. Accounts for children may also be set up and controlled by an adult, such as a parent or legal guardian. (b) Costs, Fees and Related Charges. Do I have to pay service fees? There are no fees to access the App and the Services. In the future, we may charge fees as the App or the Services develop. You are responsible for all costs, fees, data plans and related charges associated with your use of any Devices, and they are not reimbursable by us. (c) Communication. How will we contact each other? You can contact us at pilot.feedback@finaptic.com We will communicate with you through the App on screen and in the App message centre. We may email or text you. It is your responsibility to provide us your most up to date email address and telephone number. You understand that if you do not do so, we may not be able to complete the signup process or otherwise contact you. (d) Marketing If you do not wish to be presented with promotional content please change your communication preferences on the App. Changes to your communication preferences for promotional content will not change how we communicate with you for non-promotional content related to the Services. No Representations or Warranties. The App and the Services are provided \u201cas is\u201d. We are providing you with the App and the Services on an \u201cas is\u201d and \u201cas available\u201d basis and we do not make any representations or provide any warranties concerning them. Without limiting the foregoing, we expressly disclaim all warranties in connection with the App and in connection with the Services, whether express or implied, including, but not limited to the implied warranties of merchantability, fitness for a particular purpose and non-infringement. Limitation of Liability We will not be responsible for any loss, damage, harm, injury, delay or inconvenience suffered or incurred by you with respect to: (i) these Terms, the App, the Services or the Third Party Services, (ii) any instruction given to, by or purported to be given by you, using Sign-In Credentials, in connection with the Services or Third Party Services, or (iii) any products or services you obtain or purchase from us or from a Third Party to whom we refer you, or otherwise. Such losses, damages, injuries, delays and inconveniences include, without limitation, (i) direct, incidental, indirect, consequential, special, aggravated, punitive or exemplary damages, (ii) loss of data, profits, information, opportunity, revenues and goodwill, and (iii) any other business interruption, commercial or economic losses. The foregoing limitation of liability applies regardless of the cause of action, even if we have been advised of the possibility of such damages. In addition, in no event, even if we are negligent, will we be liable for any loss or damage suffered by you that is caused by any one or more of: \u2022 The actions of, or any failure to act by a Third Party or Service Provider (and no such Third Party will be considered to be acting as our agent); \u2022 Mistakes, errors, omissions, inaccuracies or other inadequacies of, or contained in the Services or Third Party Services or any data given by you to us, any Third Party or Service Provider, including your failure to update; \u2022 Any delay, error, interruption or failure by us, any Third Party or Service Provider to perform or fulfill any of our obligations to you due to any cause beyond our control or their control, any system malfunctions or any technical failures; \u2022 Unsecured communication being inaccurate, intercepted, reviewed or altered by others, or not received by you; \u2022 Your access to the Services or Third Party Services, including, without limitation, any delay or inability to access the Services or Third Party Services; \u2022 Your failure to receive or view any communication that has been presented to you, and we will not be responsible for any delay, damage or inconvenience that such failure may cause; or \u2022 Your failure to fulfill any of your obligations under these Terms, including those in the \u201cSecurity\u201d section of these Terms, or to comply with any instructions we may provide to you from time to time in connection with the App and the Services. You release and indemnify us for any claim, cost and liability incurred: (i) as a result of your use of the App any of the Services and Third Party Services; or (ii) as a result of your breach of these Terms. Closing your Account We may terminate or suspend your access immediately, without prior notice or liability, for any reason whatsoever, including without limitation if you breach these Terms. Upon termination, your right to use the App and access Services will cease immediately. We are not responsible for any loss or inconvenience that may result in such suspension or termination. You may delete your profile and terminate your use of the App and access to the Services and these Terms at any time through the Site or by contacting us using the contact information provided in the \u201cCommunication\u201d section of these Terms. In the event of the death of a user, the Account of that user will be closed. Changes to the Terms We reserve the right, at our sole discretion, to modify or replace these Terms at any time. By continuing to access the App or use our Services after those revisions become effective, you agree to be bound by the revised terms. If you do not agree to the new terms, in whole or in part, please stop using the Services. Electronic Agreement These Terms and any related terms, conditions, policies, instructions, disclaimers or documents may be accepted in electronic form and your acceptance is binding between you and us. Neither you nor we will contest the validity or enforceability of these Terms and any related documents because they were accepted or signed in electronic form. Language This Agreement is drawn up in English at the request of both you and us. Les parties aux pr\u00e9sentes, soit vous et nous, ont express\u00e9ment convenu que ce contrat soit r\u00e9dig\u00e9 en anglais. Governing Law These Terms, together with any privacy policy that may be published on the App, constitutes the entire agreement between the parties relating to the App and Services and all related activities. These Terms are governed by the laws of the Province of Quebec and the Federal Laws of Canada. In the event of any dispute or proceeding the parties hereby agree to attorn to the exclusive jurisdiction of the Courts of the City of Montreal in the Province of Quebec. Assignment and Severability If any part of these Terms is held to be unlawful, invalid, void, or unenforceable, that part shall be deemed severed and shall not affect the validity and enforceability of the remaining provisions of these Terms. Our failure to enforce strict performance of any provisions of these Terms does not mean we have waived any provision or right. Neither the course of conduct between you and us, nor trade practice modifies any provision of these Terms. We have the right at all times to assign or transfer any or all of our rights and obligations of these Terms. You may not assign or transfer these Terms or any of the obligations or rights under these Terms to any other person whether voluntarily or, by operation of law. Additional Terms relating to the App Compliance and Prohibitions. Appropriate use of the App. When using the App and accessing the Services, you may not: \u2022 Provide untrue, inaccurate and incomplete information; \u2022 Use the App or access the Services for any illegal, fraudulent, malicious, harassing or defamatory activity or purpose; \u2022 Use any robot, spider or other indexing device when using the App or accessing the Services; \u2022 Use any part of the Services to provide internet, service bureau, outsourcing or third- party services or redistribute all or any part of the Services; \u2022 Take steps or actions that could or do undermine the security, integrity, effectiveness, goodwill or connectivity of the App or the Services (including illegal, fraudulent, malicious, defamatory or other activities that threaten to harm or cause harm to any other person); or \u2022 Reverse engineer or reverse compile the source code for the App or any of the service technology. Ownership. You can use it, but you can\u2019t keep it. We grant you a non-exclusive and non-transferable single-user (non-concurrent) license to use the App, in accordance with these Terms. At any time, and at our sole discretion, we may limit, restrict, suspend, declare a moratorium on, or terminate your ability to access the App, or any of the Services, or both; and with notice to you, we may end the terms relating to the App, including the Services. If these Terms are terminated, you will destroy all copies of the App and all copies of any documentation for the App then in your possession. The grant of this license may not be assigned by you unless agreed upon in writing by us. We retain at all times all ownership rights, including without limitation, copyright, in the App. You agree not to copy, reproduce, transfer copies or reverse engineer the App and not to disclose or distribute the App to Third Parties. We have no obligation to provide any training, maintenance, or other assistance for the App. Finaptic is the owner, or licensee, of all intellectual property rights subsisting on each screen made available through the App. Unless otherwise indicated, trademarks and logos, and all works, including texts, images, illustrations, software, HTML codes, audio clips and videos appearing on the Services are the property of Finaptic., or those of our licensors, and without our express written permission, may not be reproduced, republished, downloaded, posted, transmitted, distributed or modified, in whole or in part, in any form whatsoever, except for personal and non-commercial use, including viewing, printing or archiving of electronic copies of your App activities, in accordance with these Terms and as we may further instruct you. Nothing in these Terms or on the App is to be interpreted as conferring a right to use our works, trademarks or logos in any other way, or those of Finaptic or our Service Providers. App Rules for downloading the App. By choosing to install the App on your Device for the purpose of accessing the Services you consent to the installation of the App and any future updates or upgrades to the App. You may withdraw your consent by deleting the App from your Device. Our mailing address is Belmont Ave, Montreal, QC Push Notifications. We may sometimes need to send information to your Device about the Services. You authorize us to send push notifications to your Device in relation to the Services. In order to enable or to disable push notifications, you must adjust the settings on your Device. You understand that push notifications are unsecure and not encrypted and can be read by others if you allow them to view your Device. We provide push notifications for convenience and information purposes only. Voluntary Participation. Your use of a Device to access certain of the Services through the App is voluntary. If you choose to use your Device to access the Services by installing the App, you warrant that you are the legal owner of your Device. You also warrant that you have legal ownership of the Devices used by children you have invited to use the App. Contact Us with any Questions or Complaints at pilot.feedback@finaptic.com or by mail at: 611 Belmont Ave Westmount, QC, H3Y 2W1.","title":"Finaptic App Terms of Use"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_electronic_communications_agreement/","text":"Finaptic Electronic Communications Agreement Consent to Sign and Receive Documents Electronically Before proceeding, your consent is required. In order to electronically receive or sign this agreement, you must provide express consent to do so. References to \u201cyou\u201d, \u201cI\u201d or \u201cme\u201d means you as an applicant or an account holder. Please review this consent agreement carefully before electronically signing. Consent to using an electronic signature You understand and agree to use an electronic signature (\u201cE-Signature\u201d), which may include a click to accept to sign, documents from us which may include, but are not limited to, application forms, disclosures, agreements, and other documents or other information or materials relating to solutions and/or services offered or provided by us (\u201cDocuments\u201d). You understand and agree that your E-Signature is legally binding and has the same effect as if you were signing with pen and paper. Consent to electronic delivery of documents You consent to receive the Documents in electronic form only. You also consent to receive Information, which includes Documents, in electronic form only. You designate your email service provider as your designated information system for this purpose until the Finaptic App has the technical capability to present Documents and Information to you. Information includes monthly or periodic account statements, disclosures, notices, confirmations, certificates, tax documents, terms and conditions, prospectuses or other offering documents, account opening applications, agreements and amendments applicable to your accounts, or other information we may be required or permitted to send to you now or in the future under legislation for your accounts. How Electronic Documents Will Be Delivered to You When new Information in electronic form is available for you to access, we will email it to you at the email address you have provided to us. When the technical capability is available, we will send a message to the message centre in the Finaptic App. We may also send you an email or text alert (but only if you have provided us with your email address and mobile telephone number) to notify you regarding Information. Please note that email communication is not secure or reliable and email notifications may not be received by you in a timely manner or at all. We will not be responsible to you for any damages or costs resulting from your failure to receive an email notification. You may opt-out of email notifications by changing your email preferences in the Finaptic App. Technical Requirements Your device must have the minimum software requirement to operate the Finaptic App, as updated from time to time. Information may be presented as PDF files and may require you to have Adobe Reader or other third-party software installed on your Device. We do not own or operate, and are not responsible for, Adobe Reader or any other third-party software. Document Delivery Your Information is deemed to be delivered to you on the day we send it and not on the day that you actually access it through your email service provider and through the Finaptic App. Your Responsibility to Access Electronic Documents By consenting to electronic delivery of documents, you understand that you must check your email mailbox and access the Finaptic App to access your Information and agree to do so on a regular basis but in any event, not less than once every thirty (30) days). Receiving an email or text notification does not change your obligation to access your Documents in the Finaptic App. We will not be responsible to you for any damages or costs resulting from your failure to access your Information. Contact Information You will advise us of any changes to your contact information that you have provided in connection with, including any change in your email address or mobile telephone number. Availability Electronic Information will be available for up to 7 years as long as your Account remains open. Language This Agreement is drawn up in English at the request of both you and us. Les parties aux pr\u00e9sentes, soit vous et nous, ont express\u00e9ment convenu que ce contrat soit r\u00e9dig\u00e9 en anglais.","title":"Finaptic electronic communications agreement"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/","text":"Finaptic Privacy Policy \u00b6 Last updated: August 27, 2021 Please read this Privacy Policy before you give your consent. \u00b6 When you give us your consent, you are agreeing to the collection, use and sharing of your personal information as described in this Privacy Policy. Personal information means any information that can identify an individual. This Privacy Policy describes how Finaptic Technologies Inc. collects, uses, shares, and protects your personal information when you use our products and services. It also tells you about your privacy rights and responsibilities. If you have questions, you can contact our Privacy Officer by email at privacy@finaptic.com or by mail at: Privacy Officer, 611 Belmont Ave Westmount, QC, H3Y 2W1 Personal Information You Give to Us \u00b6 To be able to offer the products and services you want, we need you to provide us some information about yourself. We only collect information that we need to provide you with the products and services you request. In addition, certain laws and regulations require us to gather specific information about you, including information about your identity and the source of funds for your accounts. We need to know your residency to comply with tax legislation. If you open an account that earns interest we will need to know your SIN so that we can issue tax receipts and report your earnings to the government. Information We Collect About You \u00b6 For certain products or services, we may need to collect information about you from third parties and will do so with your consent. For example, for credit products, we may need to contact other lenders, financial institutions and credit bureaus to get your credit history and determine if you qualify. We may record your communications with us, such as a telephone discussion or mobile chat discussions with our representatives. The purpose of the recording will be explained each time you are recorded. Information We Collect Through the App \u00b6 Usage information is collected automatically when you use Finaptic App. Usage information may include information such as your device's Internet Protocol address (e.g. IP address), browser type, browser version, unique device identifiers and other diagnostic data. We may collect certain information automatically, including, but not limited to, the type of mobile device you use, your mobile device unique ID, the IP address of your mobile device, your mobile operating system, the type of mobile internet browser you use, the pages you visit, the time and date of your visit, the time spent on those pages, unique device identifiers and other diagnostic data. We may also collect information that your browser sends when you access Finaptic App through a mobile device. While using Finaptic App, in order to provide certain features, we may collect, with your prior permission: Information regarding your location Information from your mobile device's phone book (contacts list) Pictures and other information from your mobile device's camera and photo library We use this information to provide features, to improve and customize our products and services. You can enable or disable access to this information at any time, through your Device settings. Sharing your Information \u00b6 We share your information with the financial institution that supports the banking services for which you apply and are approved. In certain instances we are required to share your information even if you are not approved for a product or service in order to comply with legal and regulatory obligations. We use the services of other companies (service providers) to perform certain services for us such as verifying your identity or supplying bank cards. Our service providers are carefully selected and are required to sign a contract that requires them to protect your personal information just as we would. Services providers are only given access to personal information necessary to perform the services in the agreement. That means we anonymize or de-identify your personal information when we share it as a default. There are certain situations where we are legally permitted or required to disclose information about you. We may disclose your information to various government authorities or agencies, including international authorities, including those in the United States. If we are involved in court proceedings, we may have to disclose personal information about you. We are also authorized to investigate any suspected criminal activity. If needed, we will contact the authorities and share personal information. Keeping your Information Accurate \u00b6 You are responsible to inform us of any change, errors or inaccuracies concerning your information. We take reasonable measures to keep personal information as accurate, complete and current as possible. Keeping your Information Safe \u00b6 We take reasonable precautions to safeguard your information from loss, theft and destruction, and from unauthorized access, disclosure, duplication, use or modification, regardless of how or where it is stored. We do this by using security controls and limiting access to your personal personal information only to employees who need authorization for work purposes. We don\u2019t know your usernames, passwords and personal identification numbers (PIN). For your own safety and security, do not share this information with anyone. Storing and Destroying your Information \u00b6 We keep your information only as long as it is needed. If you stop doing business with us, we must retain certain information in order to, among other reasons, comply with laws, settle future transactions or obtain proof of past transactions. When this information is no longer necessary, it is destroyed. Only authorized employees are permitted to access information and destroy it. Accessing your Information \u00b6 Unless legal restrictions apply, you have the right to access the information we hold about you free of charge. You must send your request in writing to privacy@finaptic.com. We will respond to your request within 30 days of receipt, unless we inform you that it will take longer, as permitted by law under certain circumstances. Children under 13 \u00b6 We do not knowingly collect personally identifiable information from anyone under the age of 13, unless it is with the consent of a parent or guardian of the child. If you are a parent or guardian and you are aware that Your child has provided us with personal information, please contact Us. If we become aware that we have collected personal information from anyone under the age of 13 without verification of parental consent, we will take steps to remove that information from our systems. Changes to this Privacy Policy \u00b6 We may update this policy from time to time. Any changes will come into effect on the date of the most recent update which will be written at the top of the Privacy Policy and posted on Finaptic App or Finaptic Dev website. We will notify you of any updates when you log in the Finaptic App. The most up to date Privacy Policy is always accessible on the Finaptic App and Finaptic Dev website. Questions, Comments or Complaints \u00b6 If you have any questions, comments or complaints about how we handle your personal information, please contact our Privacy Officer at privacy@finaptic.com or by mail at: 611 Belmont Ave Westmount, QC, H3Y 2W1 If you have a complaint, you also have the option of contacting the federal privacy commissioner and provincial privacy commissioner of your province. Office of the Privacy Commissioner of Canada 30 Victoria Street Gatineau, Quebec K1A 1H3 Toll-free: 1-800-282-1376 www.priv.gc.ca Commission d\u2019acc\u00e8s \u00e0 l\u2019information du Qu\u00e9bec 575 Saint-Amable Street, Suite 1.10 Quebec City, Quebec G1R 1G4 Tel.: 418-528-7741 Toll-free in Quebec: 1-888-528-7741 www.cai.gouv.qc.ca Office of the Information and Privacy Commissioner of Alberta 9925-109 Street, Suite 410 Edmonton, Alberta T5K 2J8 Tel: 780 422-6860 Toll-free: 1-888-878-4044 www.oipc.ab.ca Office of the Information and Privacy Commissioner for British Columbia P.O. Box 9038, Stn. Prov. Govt. Victoria, British Columbia V8W 9A4 Tel: 250-387-5629 Toll-free in British Columbia: 1-800-663-7867 www.oipc.bc.ca","title":"Finaptic Privacy Policy"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#finaptic-privacy-policy","text":"Last updated: August 27, 2021","title":"Finaptic Privacy Policy"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#please-read-this-privacy-policy-before-you-give-your-consent","text":"When you give us your consent, you are agreeing to the collection, use and sharing of your personal information as described in this Privacy Policy. Personal information means any information that can identify an individual. This Privacy Policy describes how Finaptic Technologies Inc. collects, uses, shares, and protects your personal information when you use our products and services. It also tells you about your privacy rights and responsibilities. If you have questions, you can contact our Privacy Officer by email at privacy@finaptic.com or by mail at: Privacy Officer, 611 Belmont Ave Westmount, QC, H3Y 2W1","title":"Please read this Privacy Policy before you give your consent."},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#personal-information-you-give-to-us","text":"To be able to offer the products and services you want, we need you to provide us some information about yourself. We only collect information that we need to provide you with the products and services you request. In addition, certain laws and regulations require us to gather specific information about you, including information about your identity and the source of funds for your accounts. We need to know your residency to comply with tax legislation. If you open an account that earns interest we will need to know your SIN so that we can issue tax receipts and report your earnings to the government.","title":"Personal Information You Give to Us"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#information-we-collect-about-you","text":"For certain products or services, we may need to collect information about you from third parties and will do so with your consent. For example, for credit products, we may need to contact other lenders, financial institutions and credit bureaus to get your credit history and determine if you qualify. We may record your communications with us, such as a telephone discussion or mobile chat discussions with our representatives. The purpose of the recording will be explained each time you are recorded.","title":"Information We Collect About You"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#information-we-collect-through-the-app","text":"Usage information is collected automatically when you use Finaptic App. Usage information may include information such as your device's Internet Protocol address (e.g. IP address), browser type, browser version, unique device identifiers and other diagnostic data. We may collect certain information automatically, including, but not limited to, the type of mobile device you use, your mobile device unique ID, the IP address of your mobile device, your mobile operating system, the type of mobile internet browser you use, the pages you visit, the time and date of your visit, the time spent on those pages, unique device identifiers and other diagnostic data. We may also collect information that your browser sends when you access Finaptic App through a mobile device. While using Finaptic App, in order to provide certain features, we may collect, with your prior permission: Information regarding your location Information from your mobile device's phone book (contacts list) Pictures and other information from your mobile device's camera and photo library We use this information to provide features, to improve and customize our products and services. You can enable or disable access to this information at any time, through your Device settings.","title":"Information We Collect Through the App"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#sharing-your-information","text":"We share your information with the financial institution that supports the banking services for which you apply and are approved. In certain instances we are required to share your information even if you are not approved for a product or service in order to comply with legal and regulatory obligations. We use the services of other companies (service providers) to perform certain services for us such as verifying your identity or supplying bank cards. Our service providers are carefully selected and are required to sign a contract that requires them to protect your personal information just as we would. Services providers are only given access to personal information necessary to perform the services in the agreement. That means we anonymize or de-identify your personal information when we share it as a default. There are certain situations where we are legally permitted or required to disclose information about you. We may disclose your information to various government authorities or agencies, including international authorities, including those in the United States. If we are involved in court proceedings, we may have to disclose personal information about you. We are also authorized to investigate any suspected criminal activity. If needed, we will contact the authorities and share personal information.","title":"Sharing your Information"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#keeping-your-information-accurate","text":"You are responsible to inform us of any change, errors or inaccuracies concerning your information. We take reasonable measures to keep personal information as accurate, complete and current as possible.","title":"Keeping your Information Accurate"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#keeping-your-information-safe","text":"We take reasonable precautions to safeguard your information from loss, theft and destruction, and from unauthorized access, disclosure, duplication, use or modification, regardless of how or where it is stored. We do this by using security controls and limiting access to your personal personal information only to employees who need authorization for work purposes. We don\u2019t know your usernames, passwords and personal identification numbers (PIN). For your own safety and security, do not share this information with anyone.","title":"Keeping your Information Safe"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#storing-and-destroying-your-information","text":"We keep your information only as long as it is needed. If you stop doing business with us, we must retain certain information in order to, among other reasons, comply with laws, settle future transactions or obtain proof of past transactions. When this information is no longer necessary, it is destroyed. Only authorized employees are permitted to access information and destroy it.","title":"Storing and Destroying your Information"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#accessing-your-information","text":"Unless legal restrictions apply, you have the right to access the information we hold about you free of charge. You must send your request in writing to privacy@finaptic.com. We will respond to your request within 30 days of receipt, unless we inform you that it will take longer, as permitted by law under certain circumstances.","title":"Accessing your Information"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#children-under-13","text":"We do not knowingly collect personally identifiable information from anyone under the age of 13, unless it is with the consent of a parent or guardian of the child. If you are a parent or guardian and you are aware that Your child has provided us with personal information, please contact Us. If we become aware that we have collected personal information from anyone under the age of 13 without verification of parental consent, we will take steps to remove that information from our systems.","title":"Children under 13"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#changes-to-this-privacy-policy","text":"We may update this policy from time to time. Any changes will come into effect on the date of the most recent update which will be written at the top of the Privacy Policy and posted on Finaptic App or Finaptic Dev website. We will notify you of any updates when you log in the Finaptic App. The most up to date Privacy Policy is always accessible on the Finaptic App and Finaptic Dev website.","title":"Changes to this Privacy Policy"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/finaptic_privacy_policy/#questions-comments-or-complaints","text":"If you have any questions, comments or complaints about how we handle your personal information, please contact our Privacy Officer at privacy@finaptic.com or by mail at: 611 Belmont Ave Westmount, QC, H3Y 2W1 If you have a complaint, you also have the option of contacting the federal privacy commissioner and provincial privacy commissioner of your province. Office of the Privacy Commissioner of Canada 30 Victoria Street Gatineau, Quebec K1A 1H3 Toll-free: 1-800-282-1376 www.priv.gc.ca Commission d\u2019acc\u00e8s \u00e0 l\u2019information du Qu\u00e9bec 575 Saint-Amable Street, Suite 1.10 Quebec City, Quebec G1R 1G4 Tel.: 418-528-7741 Toll-free in Quebec: 1-888-528-7741 www.cai.gouv.qc.ca Office of the Information and Privacy Commissioner of Alberta 9925-109 Street, Suite 410 Edmonton, Alberta T5K 2J8 Tel: 780 422-6860 Toll-free: 1-888-878-4044 www.oipc.ab.ca Office of the Information and Privacy Commissioner for British Columbia P.O. Box 9038, Stn. Prov. Govt. Victoria, British Columbia V8W 9A4 Tel: 250-387-5629 Toll-free in British Columbia: 1-800-663-7867 www.oipc.bc.ca","title":"Questions, Comments or Complaints"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/","text":"Legal and Compliance On Screen Requirements \u00b6 Sales Practice \u00b6 Before starting the onboarding sequence, prospective customers must have had the opportunity to review your product offering(s) and been presented with different options should you offer them. The information you present should educate and assist the prospective customer to determine whether your products and services are suitable for their needs and budget. You will take measures to avoid the risk of mis-selling, tied selling and breaches of market conduct obligations, such as using pressure tactics, and placing sales and rewards ahead of customer needs. A self-guided discovery processs should allow the prospective customer to ask questions, seek objective advice and take time to decide whether to proceed to open or apply for a product with you. Clear, simple and not misleading \u00b6 All of your communications must be \"clear, simple and not misleading\" . This includes advertising, product descriptions, agreements on screen content, and communication with consumers. Consumer protection provisions explicitly call out these requirements when communicating about financial products and services. In its document CG-3 on Clear Language, the Financial Consumer Agency of Canada (FCAC) sets out its expectations on how financial institutions can ensure clear language and presentation in their communications with their consumers by applying the following 5 principles: Know your audience. Make your material understandable by planning your text. Write clearly. Use the visual presentation to enhance your text. Test your material. The Competition Act more generally applies the 'clear, simple and not misleading' principle to all advertising and the 'general impression test' to determine whether a representaiton is misleading. When evaluating whether your advertising, consider how the 'ordinary hurried purchaser' (or 'credulous and inexperienced consumer') would understand the essential elements of your offer. Disclaimers Try to avoid the use of marketing disclaimers. The use of footnotes and fine print could raise questions about the veracity of the marketing offer and suggest obfuscation of the entire story. However, if you choose to or need to use a disclaimer, keep the following principles from the Competiton Bureau in mind: 1. A disclaimer that expands on or clarifies possible ambiguities in the main body of an advertisement is unlikely to mislead consumers; assuming that the general impression of the advertisement is not otherwise misleading Given space constraints and to avoid aesthetic clutter in the main body of an ad, fine print can be perfectly legitimate if it adds useful information to a truthful ad. A disclaimer that is used to restrict, contradict or somehow negate the message to which it relates likely confuses consumers and is deceptive If the main body of the ad creates a deceptive general impression in itself, the fine print disclaimer may not do much to alter that deception. Additional guidance: Disclaimer should be prominent, clear and close to main claim being clarified Main claim in the advertisement should be able to stand alone, without a disclaimer Disclaimer must be likely to be read and not likely to alter the general impression of the ad Ask yourself Here are some questions to guide the writing, graphics, design and presentation of your content Is it clear? Is it simple? Is it not misleading? Is all of it true? Is any information missing? Is any information buried in disclaimers Does the illustration match the words? Finally: imagine your customer as Homer Simpson. Does it still work? *Resources * FCAC CG-3 Clear language and presentation principles and guidelines for the industry - Canada.ca Competition Bureau Canada Ensuring truth in advertising - Competition Bureau Canada Competition Bureau Canada Application of the Competition Act to representations on the Internet : enforcement guidelines : Iu54-1/2009E-PDF - Publications du gouvernement du Canada - Canada.ca Federal Trade Commission - while not law in Canada, the FTC provides practical guidance for advertising and marketing Advertising and Marketing | Federal Trade Commission Federal Trade Commission - guidance on electronic disclosures https://www.ftc.gov/sites/default/files/attachments/press-releases/ftc-staff-revises-online-advertising-disclosure-guidelines/130312dotcomdisclosures.pdf Product Advertising Regulations \u00b6 In addition to the requirement to be clear, simple and not misleading in advertisements, some banking products have disclosure requirements specific to when the product is being promoted. Finaptic will provide the information required if you offer the product. You will be responsible for on screen presentment. Deposit Accounts can't advertise interest-bearing deposit or debt obligations unless the advertisement discloses, in accordance with the regulations, how the amount of interest is to be calculated. Credit Cards solicitations (typically means direct advertising) must specify the fixed rate of interest, the annual interest rate, (example: Purchase Intereste Rate and Cash Advance Interest Rate) or the variable interest rate (more specific details required) the day on or after which interest accrues and information concerning any grace period that applies (example: Interest-free Grace Period at least 21 days); and the amount of any non-interest charges (examples: annual fee, cash advance fee, overlimit fee, dishonoured payment) Tip: the Information Box could be used to provide this information for ease of reference and to avoid any errors. advertising (typically means public advertising) must specify Annual Fees and Interest Rates (both must have same prominence on screen) Product Disclosure Requirements \u00b6 Banking products all have disclosure requirements to inform the prospective customer of important details like charges and interest rates. The disclosures for Deposit Accounts do not need to appear in a specified format. The disclosures for Credit Cards and Prepaid Product must be presented in a prescribed Information Box format. Finaptic will provide this information. Deposit Accounts Charges: you must disclose to your customers and the public charges that apply to deposit accounts in writing on your website and points of service through which products or services are offered in Canada. Even though the app is not defined as a 'point of service' we require you to include this information on the app. Changes or new charges: each customer in whose name a deposit account is kept (or to whom the customer has instructed to send the notice) must receive written notice: (a) if the customer is provided a statement of account: at least 30 days before effective date of increase or new charge. (b) if the customer is not provided a statement of account: by means of a notice on your website and app, and by electronic notice at least 60 days before effective date of increase or new charge. Credit Cards To be added: sample Information Box CDIC Coverage \u00b6 Information about CDIC Coverage, deposit insurance, is on the product agreements. Wording to use in advertising will be added here in the coming weeks. Onboarding \u00b6 The onboarding sequence starts from legal and compliance screens. Ideally the applicant would agree to the app terms and conditions, privacy policy and electronic communications agreement, before they provide any personal information. You may allow an applicant to enter personal data and provide consent to the terms and conditions after; but before the identification process. However, it is prohibited to store any personal data of the applicant before they agree to the Privacy Policy. Obtaining Meaningful Consent \u00b6 Under privacy laws, organizations are generally required to obtain meaningful consent for the collection, use and disclosure of personal information. Banking regulations require financial institutions to obtain express consent for financial products and services. Documents In order to obtain meaningful consent to an agreement, the person must have at the very least been presented with the agreement. That means any content that is not presented on screen, like a document that requires an action to be viewed, must be opened by the user before consent can be requested. Language Communication seeking consent must be clear, simple and not misleading. Examples of express consent (not fancy, but clear): \"I have read and agree to the App Terms and Conditions.\" \"Yes, I read and accept the Privacy Policy.\" \"I consent to opening a deposit account. I have read and agree to the deposit account fee guide and agreement.\" In order for the consents to be binding, applicants must have read and agreed to the Electronic Communications Agreement, which includes provisions regarding electronic signatures and receiving regulatory documents electronically. Resources FCAC B-5 Consent for new products or services - Canada.ca OPC Guidelines for obtaining meaningful consent - Office of the Privacy Commissioner of Canada Commission d\u2019acc\u00e8s \u00e0 l\u2019information du Qu\u00e9bec www.cai.gouv.qc.ca Office of the Information and Privacy Commissioner of Alberta www.oipc.ab.ca Office of the Information and Privacy Commissioner for British Columbia www.oipc.bc.ca \u00b6 Tax Residency - FATCA AND CRS \u00b6 To comply with the Common Reporting Standard (CRS), you must collect specific tax information from each account holder at sign-up. You must also determine whether the account holder is subject to US tax law to comply with the Foreign Account Tax Compliance Act (FATCA). We currently decline applicants who are residents of another country. The following error message will appear: Error Message: At this time we are not accepting applicants who are also a US citizen or a resident of a country other than Canada for tax purposes. Future scope will permit US citizens and foreign tax residents to apply and that time it will be mandatory for applicants to provide both their international TIN/SSN as well as Canadian SIN. We have drafted on screen questions and an explanation about why we need to collect this information. We recommend that you use the same language. Country of residence for tax purposes \ud83d\udca1To comply with tax law we must ask if you are a resident of any country other than Canada for tax purposes and if you are a US citizen. This information must be collected and may be shared with the Canada Revenue Agency (CRA) and the tax authorities of other countries by the CRA. OR \ud83d\udca1Under Part XVIII and XIX of Income Tax Act, Canadian financial institutions are required to collect the information you provide on this form to determine if they must report your financial account to the Canadian Revenue Agency (CRA). CRA may share that information with the government of a foreign jurisdiction that you are a resident for tax purposes, or to the U.S. government if you are a citizen of said country. You may ask your financial institution about the nature of the information exchanged. Each account holder of a joint account must fill out a CRS-FACTCA Self-Certification form. Other On Screen Functional Requirements and Guidance \u00b6 Requirements At any given point during the application process, the applicant must be able to cancel their application and it must be clear to them that they have withdrawn their application. Guidance/Tips - let us know if you have more customer friendly language Name: present an tooltip so that the applicant's ID verification is not automaticaly rejected. \ud83d\udca1The name you provide here must match your name as written on your government issued ID. Phone Number: clarify what type of phone number you are collecting on screen. Use \"Mobile Phone Number\" or \"Cell Phone Number\"; rather than the generic \"Phone Number\" because you will not know whether it is a landline or mobile number. This may create communication errors if notifications or communications are delivered via SMS. Middle Name: while optional, if an applicant has a middle name providing it will assist with Know Your Client (KYC) verification. You may want to present a tooltip or FAQ on this topic. Employment status: We want applicants to be truthful.\ud83d\udca1 If you are currently unemployed, please select \"Unemployed\". Your employment status does not have a negative impact on your application to open an account but will be considered if you are applying for credit. ID Verification and Selfie: Explain the purpose of collecting the ID and selfie (privacy compliance - in time disclosure): \ud83d\udca1 We are required to verify your identity. We use a secure system to do this. You will need to scan a government issued ID and take a live picture of your face using your mobile device. Your government issued ID must be authentic, valid and current (not expired). We do not keep a copy of your ID or your picture and the whole process is encrypted to keep your personal information safe. If an individual can't or doesn't want to share their ID or photo, you can inform them that they won't be able to apply. \ud83d\udca1Sorry! At this time, we can only process your application through a mobile app. \ud83d\udca1If you don't have your government issued ID handy or want to take your selfie later, you will need to come back and start over. It's also good practice to use express consent language, even though the applicant agreed to the collection and use of their ID and selfie photo in the privacy policy, like \"I agree\" \"Yes, Scan my ID\" \"Yes, use my ID\". Adding an Authorized User: This process is in fact an invitation to an individual identified by the Account Holder to become an Authorized User on the Account. The Authorized User must agree to the App Terms and Conditions, Privacy Policy and Electronic Communications Agreement in order to be able to go through the application process. Be clear that \"adding\" an Authorized User does not actually allow that individual to use the account until they have Onboarded and have been approved as an Authorized User. Consider reminding the Account Holder that they remain liable and responsible for the Authorizer User's actions on the account. Disclosure referencing the Account holder's responsibility with regards to the liability of the authorized user. The Account Holder should also provide express consent that they want to add an Authorized User. \ud83d\udca1Just a reminder that you remain liable for the Authorized User's activity on your account. App Additional Sections \u00b6 Your app should have a section(s) that gives your customers access to Most recent documents App Terms and Conditions Privacy Policy Electronic Communications Agreement Product Agreements Notifications Information about \"Tied Selling\" Trade-mark legal disclosures How we will communicate with you Customer Support You can name and organize the above sections to suit your app and brand. Current Agreements \u00b6 Documents drafted by Finaptic will be stored and maintained by Finaptic. The customer needs to be able to download, save or print the documents to which they have consented. App Terms and Conditions - this is your app terms and conditions. Finaptic will review. Privacy Policy - this is your Privacy Policy, but must include the clauses from the Finaptic Privacy Policy. Finaptic will review. Electronic Communications Agreement - Finaptic drafted document but can have your brand. Product Fee Guide and Account Agreement - Finaptic drafted document but can have your brand. The agreement will include Fees, regulatory details, information about CDIC coverage and How to make a Complaint. Tied Selling (in app Content) \u00b6 What is coercive tied selling? Banks in Canada are not allowed to engage in \u201ccoercive tied selling\u201d or \u201cforced purchases.\u201d While this is a requirement for banks, as a distributor of banking products, we also respect this prohibition. This means that we are not allowed to unduly pressure or coerce you into obtaining a banking product or service from us, as a condition for obtaining another banking product or service from us. This practice, called coercive tied selling, is illegal in Canada for banks. For example, if you apply for a credit card, we cannot make you buy another product or service, like requiring you to open a deposit account, as a condition for obtaining a credit card. What is not coercive tied selling? However, banks (and their affiliates) are allowed to offer consumers, in conjunction with one of their products, another product or service on more favourable terms than they normally would provide. This is similar to a company offering a deal or discount to its customers if they purchase more than one item from the company. For example, if you apply for a credit card, we might offer you a lower annual fee if you also open a deposit account. Trademark Legal Disclosures (in app Content TBC) \u00b6 (R) NATSOLUTION is a registered trade-mark of Nat Can Trust Company, used under license. (R) Mastercard is a registered trade-mark or service mark of Mastercard or its subsidiaries in Canada, used under license . (R) Cirrus is a registered trade-mark or service mark of Mastercard or its subsidiaries in Canada. (R) Interac e-Transfer is a registered trade-mark of Interac Corp., used under license. How we will communicate with you (in app Content) \u00b6 We will never ask you to provide personal, login or account information by email. If we need to reach you, we will send you a chat message in app or we will call you at the telephone number you have provided us. If you want to reach us, please use the in app chat. You may also check out the Customer Support section for more information. How to Reach Customer Support \u00b6 Topics below are recommended, with the exception of How to Make a Complaint which is mandatory. How to make a complaint information will be included in the Product Agreements. How to Make a Complaint Contact Customer Service If you are dissatisfied with the service you have received, the first step is to contact us. Very often, your request can be resolved quickly and with no hassle. Make sure you have all your information available when you contact us. How to Contact Us [PARTNER TO ADD CONTACT INFO and Provide to Finaptic] If you are still dissatisfied, you can ask for a written response and ask us to include the following information: details of the complaint the proposed resolution an explanation for the proposed resolution and proceed to step 2 . Contact the Office of the Ombudsman for Clients In the event that a complaint has not been settled to your satisfaction, you can submit a formal complaint to the Office of the National Bank Ombudsman for Clients. Why National Bank of Canada? Our products are issued by NATSOLUTION, a subsidiary of National Bank of Canada.The Office of the Ombudsman for Clients will get back to you within two business days. Complete the form If you are dissatisfied with the conclusion rendered by the Office of the Ombudsman for Clients, proceed to step 3 . Submit your complaint to an external organization If you are still not satisfied, you can submit your file to an external organization. If your complaint is about a banking product or service, contact the ADR Chambers Banking Ombuds Office . If your complaint is about National Bank Investments, National Bank Trust, National Bank Direct Brokerage or National Bank Financial, contact the Ombudsman for Banking Services and Investments* . Other external organizations may be authorized to intervene. You will be notified if this is the case. Complaints to the Financial Consumer Agency of Canada (FCAC) You can contact the Financial Consumer Agency of Canada (FCAC) if you have a complaint that relates to a possible breach of market conduct obligations under federal regulations. FCAC investigates complaints on a case-by-case basis to determine whether a federal consumer protection issue exists, and if so, what necessary action should be taken. Keep in mind that FCAC doesn\u2019t provide redress or compensation and can\u2019t get involved in individual disputes such as pricing, billing errors or quality of service. For those disputes you must contact us. Contact FCAC toll-free at 1-866-461-3222 or send a message . Financial Consumer Agency of Canada Enterprise Building, 6th Floor 427 Laurier Avenue West Ottawa, ON K1R 1B9 Toll-free: 1-866-461-3222 www.fcac-acfc.gc.ca How to report a Lost/Stolen Card How to report fraud How to dispute a transaction How to make an Interac e-Transfer How to find my balance How to read transaction information","title":"Legal and Compliance On Screen Requirements"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#legal-and-compliance-on-screen-requirements","text":"","title":"Legal and Compliance On Screen Requirements"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#sales-practice","text":"Before starting the onboarding sequence, prospective customers must have had the opportunity to review your product offering(s) and been presented with different options should you offer them. The information you present should educate and assist the prospective customer to determine whether your products and services are suitable for their needs and budget. You will take measures to avoid the risk of mis-selling, tied selling and breaches of market conduct obligations, such as using pressure tactics, and placing sales and rewards ahead of customer needs. A self-guided discovery processs should allow the prospective customer to ask questions, seek objective advice and take time to decide whether to proceed to open or apply for a product with you.","title":"Sales Practice"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#clear-simple-and-not-misleading","text":"All of your communications must be \"clear, simple and not misleading\" . This includes advertising, product descriptions, agreements on screen content, and communication with consumers. Consumer protection provisions explicitly call out these requirements when communicating about financial products and services. In its document CG-3 on Clear Language, the Financial Consumer Agency of Canada (FCAC) sets out its expectations on how financial institutions can ensure clear language and presentation in their communications with their consumers by applying the following 5 principles: Know your audience. Make your material understandable by planning your text. Write clearly. Use the visual presentation to enhance your text. Test your material. The Competition Act more generally applies the 'clear, simple and not misleading' principle to all advertising and the 'general impression test' to determine whether a representaiton is misleading. When evaluating whether your advertising, consider how the 'ordinary hurried purchaser' (or 'credulous and inexperienced consumer') would understand the essential elements of your offer. Disclaimers Try to avoid the use of marketing disclaimers. The use of footnotes and fine print could raise questions about the veracity of the marketing offer and suggest obfuscation of the entire story. However, if you choose to or need to use a disclaimer, keep the following principles from the Competiton Bureau in mind: 1. A disclaimer that expands on or clarifies possible ambiguities in the main body of an advertisement is unlikely to mislead consumers; assuming that the general impression of the advertisement is not otherwise misleading Given space constraints and to avoid aesthetic clutter in the main body of an ad, fine print can be perfectly legitimate if it adds useful information to a truthful ad. A disclaimer that is used to restrict, contradict or somehow negate the message to which it relates likely confuses consumers and is deceptive If the main body of the ad creates a deceptive general impression in itself, the fine print disclaimer may not do much to alter that deception. Additional guidance: Disclaimer should be prominent, clear and close to main claim being clarified Main claim in the advertisement should be able to stand alone, without a disclaimer Disclaimer must be likely to be read and not likely to alter the general impression of the ad Ask yourself Here are some questions to guide the writing, graphics, design and presentation of your content Is it clear? Is it simple? Is it not misleading? Is all of it true? Is any information missing? Is any information buried in disclaimers Does the illustration match the words? Finally: imagine your customer as Homer Simpson. Does it still work? *Resources * FCAC CG-3 Clear language and presentation principles and guidelines for the industry - Canada.ca Competition Bureau Canada Ensuring truth in advertising - Competition Bureau Canada Competition Bureau Canada Application of the Competition Act to representations on the Internet : enforcement guidelines : Iu54-1/2009E-PDF - Publications du gouvernement du Canada - Canada.ca Federal Trade Commission - while not law in Canada, the FTC provides practical guidance for advertising and marketing Advertising and Marketing | Federal Trade Commission Federal Trade Commission - guidance on electronic disclosures https://www.ftc.gov/sites/default/files/attachments/press-releases/ftc-staff-revises-online-advertising-disclosure-guidelines/130312dotcomdisclosures.pdf","title":"Clear, simple and not misleading"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#product-advertising-regulations","text":"In addition to the requirement to be clear, simple and not misleading in advertisements, some banking products have disclosure requirements specific to when the product is being promoted. Finaptic will provide the information required if you offer the product. You will be responsible for on screen presentment. Deposit Accounts can't advertise interest-bearing deposit or debt obligations unless the advertisement discloses, in accordance with the regulations, how the amount of interest is to be calculated. Credit Cards solicitations (typically means direct advertising) must specify the fixed rate of interest, the annual interest rate, (example: Purchase Intereste Rate and Cash Advance Interest Rate) or the variable interest rate (more specific details required) the day on or after which interest accrues and information concerning any grace period that applies (example: Interest-free Grace Period at least 21 days); and the amount of any non-interest charges (examples: annual fee, cash advance fee, overlimit fee, dishonoured payment) Tip: the Information Box could be used to provide this information for ease of reference and to avoid any errors. advertising (typically means public advertising) must specify Annual Fees and Interest Rates (both must have same prominence on screen)","title":"Product Advertising Regulations"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#product-disclosure-requirements","text":"Banking products all have disclosure requirements to inform the prospective customer of important details like charges and interest rates. The disclosures for Deposit Accounts do not need to appear in a specified format. The disclosures for Credit Cards and Prepaid Product must be presented in a prescribed Information Box format. Finaptic will provide this information. Deposit Accounts Charges: you must disclose to your customers and the public charges that apply to deposit accounts in writing on your website and points of service through which products or services are offered in Canada. Even though the app is not defined as a 'point of service' we require you to include this information on the app. Changes or new charges: each customer in whose name a deposit account is kept (or to whom the customer has instructed to send the notice) must receive written notice: (a) if the customer is provided a statement of account: at least 30 days before effective date of increase or new charge. (b) if the customer is not provided a statement of account: by means of a notice on your website and app, and by electronic notice at least 60 days before effective date of increase or new charge. Credit Cards To be added: sample Information Box","title":"Product Disclosure Requirements"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#cdic-coverage","text":"Information about CDIC Coverage, deposit insurance, is on the product agreements. Wording to use in advertising will be added here in the coming weeks.","title":"CDIC Coverage"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#onboarding","text":"The onboarding sequence starts from legal and compliance screens. Ideally the applicant would agree to the app terms and conditions, privacy policy and electronic communications agreement, before they provide any personal information. You may allow an applicant to enter personal data and provide consent to the terms and conditions after; but before the identification process. However, it is prohibited to store any personal data of the applicant before they agree to the Privacy Policy.","title":"Onboarding"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#obtaining-meaningful-consent","text":"Under privacy laws, organizations are generally required to obtain meaningful consent for the collection, use and disclosure of personal information. Banking regulations require financial institutions to obtain express consent for financial products and services. Documents In order to obtain meaningful consent to an agreement, the person must have at the very least been presented with the agreement. That means any content that is not presented on screen, like a document that requires an action to be viewed, must be opened by the user before consent can be requested. Language Communication seeking consent must be clear, simple and not misleading. Examples of express consent (not fancy, but clear): \"I have read and agree to the App Terms and Conditions.\" \"Yes, I read and accept the Privacy Policy.\" \"I consent to opening a deposit account. I have read and agree to the deposit account fee guide and agreement.\" In order for the consents to be binding, applicants must have read and agreed to the Electronic Communications Agreement, which includes provisions regarding electronic signatures and receiving regulatory documents electronically. Resources FCAC B-5 Consent for new products or services - Canada.ca OPC Guidelines for obtaining meaningful consent - Office of the Privacy Commissioner of Canada Commission d\u2019acc\u00e8s \u00e0 l\u2019information du Qu\u00e9bec www.cai.gouv.qc.ca Office of the Information and Privacy Commissioner of Alberta www.oipc.ab.ca Office of the Information and Privacy Commissioner for British Columbia www.oipc.bc.ca","title":"Obtaining Meaningful Consent"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#_1","text":"","title":""},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#tax-residency-fatca-and-crs","text":"To comply with the Common Reporting Standard (CRS), you must collect specific tax information from each account holder at sign-up. You must also determine whether the account holder is subject to US tax law to comply with the Foreign Account Tax Compliance Act (FATCA). We currently decline applicants who are residents of another country. The following error message will appear: Error Message: At this time we are not accepting applicants who are also a US citizen or a resident of a country other than Canada for tax purposes. Future scope will permit US citizens and foreign tax residents to apply and that time it will be mandatory for applicants to provide both their international TIN/SSN as well as Canadian SIN. We have drafted on screen questions and an explanation about why we need to collect this information. We recommend that you use the same language. Country of residence for tax purposes \ud83d\udca1To comply with tax law we must ask if you are a resident of any country other than Canada for tax purposes and if you are a US citizen. This information must be collected and may be shared with the Canada Revenue Agency (CRA) and the tax authorities of other countries by the CRA. OR \ud83d\udca1Under Part XVIII and XIX of Income Tax Act, Canadian financial institutions are required to collect the information you provide on this form to determine if they must report your financial account to the Canadian Revenue Agency (CRA). CRA may share that information with the government of a foreign jurisdiction that you are a resident for tax purposes, or to the U.S. government if you are a citizen of said country. You may ask your financial institution about the nature of the information exchanged. Each account holder of a joint account must fill out a CRS-FACTCA Self-Certification form.","title":"Tax Residency - FATCA AND CRS"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#other-on-screen-functional-requirements-and-guidance","text":"Requirements At any given point during the application process, the applicant must be able to cancel their application and it must be clear to them that they have withdrawn their application. Guidance/Tips - let us know if you have more customer friendly language Name: present an tooltip so that the applicant's ID verification is not automaticaly rejected. \ud83d\udca1The name you provide here must match your name as written on your government issued ID. Phone Number: clarify what type of phone number you are collecting on screen. Use \"Mobile Phone Number\" or \"Cell Phone Number\"; rather than the generic \"Phone Number\" because you will not know whether it is a landline or mobile number. This may create communication errors if notifications or communications are delivered via SMS. Middle Name: while optional, if an applicant has a middle name providing it will assist with Know Your Client (KYC) verification. You may want to present a tooltip or FAQ on this topic. Employment status: We want applicants to be truthful.\ud83d\udca1 If you are currently unemployed, please select \"Unemployed\". Your employment status does not have a negative impact on your application to open an account but will be considered if you are applying for credit. ID Verification and Selfie: Explain the purpose of collecting the ID and selfie (privacy compliance - in time disclosure): \ud83d\udca1 We are required to verify your identity. We use a secure system to do this. You will need to scan a government issued ID and take a live picture of your face using your mobile device. Your government issued ID must be authentic, valid and current (not expired). We do not keep a copy of your ID or your picture and the whole process is encrypted to keep your personal information safe. If an individual can't or doesn't want to share their ID or photo, you can inform them that they won't be able to apply. \ud83d\udca1Sorry! At this time, we can only process your application through a mobile app. \ud83d\udca1If you don't have your government issued ID handy or want to take your selfie later, you will need to come back and start over. It's also good practice to use express consent language, even though the applicant agreed to the collection and use of their ID and selfie photo in the privacy policy, like \"I agree\" \"Yes, Scan my ID\" \"Yes, use my ID\". Adding an Authorized User: This process is in fact an invitation to an individual identified by the Account Holder to become an Authorized User on the Account. The Authorized User must agree to the App Terms and Conditions, Privacy Policy and Electronic Communications Agreement in order to be able to go through the application process. Be clear that \"adding\" an Authorized User does not actually allow that individual to use the account until they have Onboarded and have been approved as an Authorized User. Consider reminding the Account Holder that they remain liable and responsible for the Authorizer User's actions on the account. Disclosure referencing the Account holder's responsibility with regards to the liability of the authorized user. The Account Holder should also provide express consent that they want to add an Authorized User. \ud83d\udca1Just a reminder that you remain liable for the Authorized User's activity on your account.","title":"Other On Screen Functional Requirements and Guidance"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#app-additional-sections","text":"Your app should have a section(s) that gives your customers access to Most recent documents App Terms and Conditions Privacy Policy Electronic Communications Agreement Product Agreements Notifications Information about \"Tied Selling\" Trade-mark legal disclosures How we will communicate with you Customer Support You can name and organize the above sections to suit your app and brand.","title":"App Additional Sections"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#current-agreements","text":"Documents drafted by Finaptic will be stored and maintained by Finaptic. The customer needs to be able to download, save or print the documents to which they have consented. App Terms and Conditions - this is your app terms and conditions. Finaptic will review. Privacy Policy - this is your Privacy Policy, but must include the clauses from the Finaptic Privacy Policy. Finaptic will review. Electronic Communications Agreement - Finaptic drafted document but can have your brand. Product Fee Guide and Account Agreement - Finaptic drafted document but can have your brand. The agreement will include Fees, regulatory details, information about CDIC coverage and How to make a Complaint.","title":"Current Agreements"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#tied-selling-in-app-content","text":"What is coercive tied selling? Banks in Canada are not allowed to engage in \u201ccoercive tied selling\u201d or \u201cforced purchases.\u201d While this is a requirement for banks, as a distributor of banking products, we also respect this prohibition. This means that we are not allowed to unduly pressure or coerce you into obtaining a banking product or service from us, as a condition for obtaining another banking product or service from us. This practice, called coercive tied selling, is illegal in Canada for banks. For example, if you apply for a credit card, we cannot make you buy another product or service, like requiring you to open a deposit account, as a condition for obtaining a credit card. What is not coercive tied selling? However, banks (and their affiliates) are allowed to offer consumers, in conjunction with one of their products, another product or service on more favourable terms than they normally would provide. This is similar to a company offering a deal or discount to its customers if they purchase more than one item from the company. For example, if you apply for a credit card, we might offer you a lower annual fee if you also open a deposit account.","title":"Tied Selling (in app Content)"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#trademark-legal-disclosures-in-app-content-tbc","text":"(R) NATSOLUTION is a registered trade-mark of Nat Can Trust Company, used under license. (R) Mastercard is a registered trade-mark or service mark of Mastercard or its subsidiaries in Canada, used under license . (R) Cirrus is a registered trade-mark or service mark of Mastercard or its subsidiaries in Canada. (R) Interac e-Transfer is a registered trade-mark of Interac Corp., used under license.","title":"Trademark Legal Disclosures (in app Content TBC)"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#how-we-will-communicate-with-you-in-app-content","text":"We will never ask you to provide personal, login or account information by email. If we need to reach you, we will send you a chat message in app or we will call you at the telephone number you have provided us. If you want to reach us, please use the in app chat. You may also check out the Customer Support section for more information.","title":"How we will communicate with you (in app Content)"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/legal_compliance_on_screen/#how-to-reach-customer-support","text":"Topics below are recommended, with the exception of How to Make a Complaint which is mandatory. How to make a complaint information will be included in the Product Agreements. How to Make a Complaint Contact Customer Service If you are dissatisfied with the service you have received, the first step is to contact us. Very often, your request can be resolved quickly and with no hassle. Make sure you have all your information available when you contact us. How to Contact Us [PARTNER TO ADD CONTACT INFO and Provide to Finaptic] If you are still dissatisfied, you can ask for a written response and ask us to include the following information: details of the complaint the proposed resolution an explanation for the proposed resolution and proceed to step 2 . Contact the Office of the Ombudsman for Clients In the event that a complaint has not been settled to your satisfaction, you can submit a formal complaint to the Office of the National Bank Ombudsman for Clients. Why National Bank of Canada? Our products are issued by NATSOLUTION, a subsidiary of National Bank of Canada.The Office of the Ombudsman for Clients will get back to you within two business days. Complete the form If you are dissatisfied with the conclusion rendered by the Office of the Ombudsman for Clients, proceed to step 3 . Submit your complaint to an external organization If you are still not satisfied, you can submit your file to an external organization. If your complaint is about a banking product or service, contact the ADR Chambers Banking Ombuds Office . If your complaint is about National Bank Investments, National Bank Trust, National Bank Direct Brokerage or National Bank Financial, contact the Ombudsman for Banking Services and Investments* . Other external organizations may be authorized to intervene. You will be notified if this is the case. Complaints to the Financial Consumer Agency of Canada (FCAC) You can contact the Financial Consumer Agency of Canada (FCAC) if you have a complaint that relates to a possible breach of market conduct obligations under federal regulations. FCAC investigates complaints on a case-by-case basis to determine whether a federal consumer protection issue exists, and if so, what necessary action should be taken. Keep in mind that FCAC doesn\u2019t provide redress or compensation and can\u2019t get involved in individual disputes such as pricing, billing errors or quality of service. For those disputes you must contact us. Contact FCAC toll-free at 1-866-461-3222 or send a message . Financial Consumer Agency of Canada Enterprise Building, 6th Floor 427 Laurier Avenue West Ottawa, ON K1R 1B9 Toll-free: 1-866-461-3222 www.fcac-acfc.gc.ca How to report a Lost/Stolen Card How to report fraud How to dispute a transaction How to make an Interac e-Transfer How to find my balance How to read transaction information","title":"How to Reach Customer Support"},{"location":"Implementation-Guide/Legal-And-Regulatory-Compliance/restricted_industries/","text":"Restricted Industries Distribution Partners shall not operate in the following industries: Cannabis; Foreign exchange offices; Money Service Businesses (MSB) (except with the prior written approval of Bank); Cheque cashing services; Wire transfer or other fund transfer services (except with the prior written approval of Bank); Cashing or sale of money order, travelers' cheques or other similar instruments; Dealers of Bitcoin or other virtual currency; Private automated teller operators; Pawn shops; Adult entertainment; Vehicle exporter intermediaries that only use the Bank's export financial services such as credit advising or discounting; Online casino operations and online games. Distribution Partners shall not operate primarily in the following industries: Cryptocurrency.","title":"Restricted industries"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/","text":"Onboarding Overview \u00b6 Welcome to Finaptic's end-to-end Onboarding Service. We make it simple to build trust in a digital world and easy to welcome new customers. This documentation includes comprehensive information for building a compliant customer onboarding experience and integrating with Finaptic's Onboarding Service. Guide Purpose \u00b6 This guide will Educate you on Finaptic's Onboarding Service for a Primary Account Holder Arm you with an API Guide for effective integration Links to related Onboarding topics Onboarding Sequence Diagram Finaptic's Authorized User Policies Productless Onboarding Architecture to Onboard an Authorized User Test profiles to test your onboarding flow What is Onboarding? \u00b6 Onboarding is the process of welcoming and establishing a relationship with new customers including adding new products to existing customers. Steps are anchored to obtain a customer's consent to collect their personal information and verify their identity to provide banking products and services and establish a relationship. About the Platform \u00b6 Finaptic's Onboarding Service processes high volumes of identity checks annually and inherits all scalability, reliability, and security features of the core platform. Three Pillars of Onboarding \u00b6 Pillar 1 Customer Information Pillar 2 Digital ID Verification Pillar 3 Onboarding Agreements Pillar 1 | Customer Information \u00b6 In order to satisfy regulatory obligations such as Know Your Customer (KYC) and Account Opening requirements there are 4 categories of information type that must be collected from the applicant. In total, there are about 15-24 data fields or questions to complete. CATEGORIES RATIONALE FIELDS API CALLS PERSONAL Collect basic applicant information for communication & vetting purposes - Full Legal Name - Middle Name (optional) - Alias (optional) - Residential Address - Date of Birth - Phone Number - Phone Number Type (Mobile or Landline) - Email Address - Language Preferences - Social Insurance Number 1 (Interest bearing products only)* Personal Details Contact Details Address TAX RESIDENCY 2 Identifying tax residency during account opening to comply with regulation - Canadian Tax Residency Status - US Citizen - Another Country Tax Residency Status If the applicant is a tax resident of Another Country (including the US), or a US Citizen, then the tax identification number for that country and Canadian SIN must be collected Tax Residency Other Residency EMPLOYMENT Support with Anti-Money Laundering filtering - Employment Status - Employment Occupation - Industry - Employer Name - Employer Address - Employer Phone Number - Employed Since Date (optional) - Income (optional) Employment ACCOUNT PURPOSE (Deposit Products) Support with Anti-Money Laundering filtering - Account Opening Purpose - Account Source of Funds - Third Party Declaration Account Purpose 1 \"Social Insurance Number\" is currently not built and will be released later in 2022 2 Note, at this time we do not support ID verification for Canadian Residents who are also Tax Residents of another country \u00b6 Onboarding a Sole Proprietor \u00b6 A Sole Proprietor is also governed by the same \"Know Your Client\" regulations; and what may appear as an outlier field like \"Residential Address\" is required. Below is a breakdown of fields required for a Sole Proprietor. CATEGORIES RATIONALE FIELDS API CALLS PERSONAL Collect basic applicant information for communication & vetting purposes - Full Legal Name - Middle Name (optional) - Alias (optional) - Residential Address - Date of Birth - Phone Number - Phone Number Type (Mobile or Landline) - Email Address - Language Preferences Personal Details Contact Details Address TAX RESIDENCY 2 Identifying tax residency during account opening to comply with regulation - Canadian Tax Residency Status - US Citizen - Another Country Tax Residency Status If the applicant is a tax resident of Another Country (including the US), or a US Citizen, then the tax identification number for that country and Canadian SIN must be collected Tax Residency Other Residency EMPLOYMENT Support with Anti-Money Laundering filtering - Employment Status - Employment Occupation - Industry - Employer Name - Business Address - Employer Phone Number - Employed Since Date (optional) Employment ACCOUNT PURPOSE (Deposit Products) Support with Anti-Money Laundering filtering - Account Purpose - Account Source of Funds - Third Party Declaration Account Purpose 2 Note, at this time we do not support ID verification for Canadian Residents who are also Tax Residents of another country Reference data sets for select fields \u00b6 CATEGORIES LIST OF OPTIONS PRESENTED EMPLOYMENT STATUS - Employed - Unemployed - Retired - Student-Unemployed - Student-Employed - Self-employed - Homemaker PRIMARY ACCOUNT USAGE - Everyday transactions - Everyday Business transactions (for Sole Proprietors only) - Paying for school - Travelling - Buying property/Renovations - Buying a car - Savings - Other PRIMARY SOURCE OF FUNDS - Employment Income (Salary / Self-employment Income) - Sale of Assets/Capital Gains (House, Car, etc.) - Trust / Inheritance/ Family income - Loans - Government Payments / Social Assistance - Support Payments - Grants/Scholarships or Bursaries - Work-Related Retirement or Disability Pension - Rental Income - Investment Income - Savings (Dividends / Interest) - Royalty Income - Tips/Commissions - Gifts - Insurance Claims / Payments - Pension / Retirement Income - Windfall (Lottery winnings, casino, etc.) OCCUPATION INDUSTRY The \u201cOccupation\u201d and \u201cIndustry\u201d fields are required to comply with Anti-Money Laundering and Anti-Terrorist Financing regulations. We use the National Occupational Classification (NOC) list for Occupations National Occupational Classification - Canada.ca and the North American Industry Classification System (Canada) (NAICS) for Industries Industry classifications . The NOC list may not include newer titles such as \u201cinfluencer\u201d, \u201cbrand ambassador\u201d, or \u201csocial media guru\u201d, however, the traditional classification of \u201cpublicist\u201d or \u201cprofessional in marketing\u201d would be an equivalent or a close enough approximation that customers can select to identify their occupation. Pillar 2 | Digital ID Verification \u00b6 This process verifies a person's identity by using computer technology. We screen for bad actors and potential device level frauds and validate the person's documentation and liveness. How does Finaptic's Onboarding Sevice help your business? \u00b6 Our approach helps prevent fraud, money laundering and terrorist funding. Using leading ID verification partner technologies that leverage artificial intelligence technology; providing document and biometric authentication with liveness tests to truly verify if the person applying for a financial product is who they say they are. Working in real time, we will eliminate manual screening errors, speed up the document inspection process, and significantly reduce employee intervention, operating costs and customer inconvenience. Requirements for Digital ID Verification \u00b6 The identification document has to be authentic, valid, and original. A valid (unexpired) identification document as listed in the Accepted Forms of Identity Documentation for Digital Identification Verification section. A mobile device with a functional camera for a selfie. Digital ID Verification Decision Making \u00b6 Finaptic will render a decision of either Approved or Declined within 90 seconds from the point of application submission. During those 90 seconds, Finaptic will complete the following process to screen for bad actors and potential fraud with every applicant: Cross referenced against up-to-date Sanctions lists, Politically Exposed Persons, and other Watchlists Validate for potential device & IP level fraud Facial Recognition Match will include a liveness test. A liveness test ensures that there is a real person present instead of a photo, video playback or even a mask An applicant will be permitted up to 3 retries for common applicant error types (ex. name mismatch, incorrect date of birth, etc.). An applicant will not be permitted to re-apply if the reason for a decline is Fraud or Sanctions related. Visualizing Digital ID Verification \u00b6 The DocumentInfo API is a message containing the details of an onboarding document collected from the customer to prove identity. TIP | As a Partner, you can re-brand the Digital ID Verification experience to reflect your brand's colour & tone; with the exeption of when your camera is attempting to take a picture. Accepted forms of identity documentation for Digital ID Verification \u00b6 At this moment, Finaptic will accept select Valid (unexpired) Government issued identification. Note, damaged and worn identification documents will not be accepted. Valid (unexpired) Government Issued Identification \u00b6 Canadian Passport (front page only) Canadian Permanent Resident Card Canada (front & backpages) Canadian Citizenship card (issued prior to 2012) Canada (front & backpages) Valid (unexpired) Canadian Government Driver's Licence Identification \u00b6 British Columbia Driver's License British Columbia, Canada Alberta Driver's License Alberta, Canada Ontario Driver's License Ontario, Canada Saskatchewan Driver's License Saskatchewan, Canada Manitoba Driver's License Manitoba, Canada Quebec Driver's License Quebec, Canada New Brunswick Driver's License New Brunswick, Canada Nova Scotia Driver's License Nova Scotia, Canada Prince Edward Island Driver's License Prince Edward Island, Canada Newfoundland and Labrador Driver's License Newfoundland & Labrador, Canada Yukon Driver's License Yukon, Canada Northwest Territories Driver's License Northwest Territories, Canada Nunavut Driver's License Nunavut, Canada Valid (unexpired) Canadian Provincial services cards \u00b6 British Columbia Services Card British Columbia, Canada Valid (unexpired) Canadian Provincial or territorial identity cards \u00b6 British Columbia Enhanced ID British Columbia, Canada Alberta Photo Identification Card Alberta, Canada Saskatchewan Non-driver photo ID Saskatchewan, Canada Manitoba Enhanced Identification Card Manitoba, Canada Ontario Photo Card Ontario, Canada New Brunswick Photo ID Card New Brunswick, Canada Nova Scotia Identification Card Nova Scotia, Canada Prince Edward Island Voluntary ID Prince Edward Island, Canada Newfoundland and Labrador Photo Identification Card Newfoundland and Labrador, Canada Northwest Territories General Identification Card Northwest Territories, Canada Nunavut General Identification Card Nunavut, Canada Onboarding a Minor \u00b6 Finaptic's Onboarding Service is ready to onboard minors and is subject to Finaptic ID Verification Policies listed below. Age Brackets FINTRAC Requirement Finaptic Technology Policy Available 0 - 11 years of age ID Verification is Optional Don't ID Verify Child Must ID Verify Parent/Guardian Details below : Parent/Guardian ID must be verified (ID does not be re-verified if on file but parent/guardian should be authenticated or provide acknowledgment) Yes 12 - 15 years of age ID Verification is Optional Same as above; 0-11 years of age Yes 16+ years of age ID Verification is Required Must ID Verify like an Adult No Data Retention Guidelines \u00b6 For how long are the Personal Identity and Selfie information stored? Our third party vendor, Acuant, which receives the selfie and and Personal ID is permitted to store the photo and ID solely for the purposes of verifying the identity of the applicant and verifying that the identification document is authentic, valid and current, and for providing us the information extracted from the personal identification. Acuant expunges the selfie and the personal identification from their system within **24 hours**. If the applicant is approved to open an account, Finaptic receives the following information regarding the identification document used to verify the applicant\u2019s identification, which Finaptic will store for 7 years after the customer\u2019s account is closed ; retained data points include Person\u2019s Name Date on which the person\u2019s identity was verified Type of document used (for example, driver's licence, passport, etc.) Unique identifying number of the document used Jurisdiction (province or state) and country of issue of the document Expiry date of the document, if available (if this information appears on the document or card, we must record it) In case of a malfunction in the onboarding process or the user doesn\u2019t complete the process, a garbage collection will delete picture within 24 hours. All retained data is stored in the Google Cloud Platform's GCS Encrypted buckets. Pillar 3 | Onboarding Agreements \u00b6 In addition to the agreements presented to your customer to upload your app, such as an End User License Agreement and Terms of Use, your customer must read and agree to a number of additional agreements before being able to proceed with the application. As part of Onboarding, these include the Electronic Communications Agreement and Privacy Policy. Documents that are presented later in the app, and that are related to your specific use case, including product disclosures, product applications and agreements are covered under the product sections of this guide. There are 2 notable APIs to refer to: The Consent API is a message indicating the receipt of a requested customer Consent. The Disclosure API is a message indicating the receipt of a requested customer Disclosure. The Agreements \u00b6 There are 4 primary agreement types with each tailored to the partner agreement. Finaptic Account Fee Guide and Agreement Finaptic App Terms of User Finaptic Electronic Communications Agreement Finaptic Privacy Policy Making the agreement available within your app; SDK Guides \u00b6 Customers must be able to easily access each agreement from your app. Best practice is to send the agreement to the customer's in app Message Centre noting their consent. You must also have the most recent version of the agreement displayed in the \"Legal\" section of the app or other obvious section that can be easily found.","title":"Onboarding Overview"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#onboarding-overview","text":"Welcome to Finaptic's end-to-end Onboarding Service. We make it simple to build trust in a digital world and easy to welcome new customers. This documentation includes comprehensive information for building a compliant customer onboarding experience and integrating with Finaptic's Onboarding Service.","title":"Onboarding Overview"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#guide-purpose","text":"This guide will Educate you on Finaptic's Onboarding Service for a Primary Account Holder Arm you with an API Guide for effective integration Links to related Onboarding topics Onboarding Sequence Diagram Finaptic's Authorized User Policies Productless Onboarding Architecture to Onboard an Authorized User Test profiles to test your onboarding flow","title":"Guide Purpose"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#what-is-onboarding","text":"Onboarding is the process of welcoming and establishing a relationship with new customers including adding new products to existing customers. Steps are anchored to obtain a customer's consent to collect their personal information and verify their identity to provide banking products and services and establish a relationship.","title":"What is Onboarding?"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#about-the-platform","text":"Finaptic's Onboarding Service processes high volumes of identity checks annually and inherits all scalability, reliability, and security features of the core platform.","title":"About the Platform"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#three-pillars-of-onboarding","text":"Pillar 1 Customer Information Pillar 2 Digital ID Verification Pillar 3 Onboarding Agreements","title":"Three Pillars of Onboarding"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#pillar-1-customer-information","text":"In order to satisfy regulatory obligations such as Know Your Customer (KYC) and Account Opening requirements there are 4 categories of information type that must be collected from the applicant. In total, there are about 15-24 data fields or questions to complete. CATEGORIES RATIONALE FIELDS API CALLS PERSONAL Collect basic applicant information for communication & vetting purposes - Full Legal Name - Middle Name (optional) - Alias (optional) - Residential Address - Date of Birth - Phone Number - Phone Number Type (Mobile or Landline) - Email Address - Language Preferences - Social Insurance Number 1 (Interest bearing products only)* Personal Details Contact Details Address TAX RESIDENCY 2 Identifying tax residency during account opening to comply with regulation - Canadian Tax Residency Status - US Citizen - Another Country Tax Residency Status If the applicant is a tax resident of Another Country (including the US), or a US Citizen, then the tax identification number for that country and Canadian SIN must be collected Tax Residency Other Residency EMPLOYMENT Support with Anti-Money Laundering filtering - Employment Status - Employment Occupation - Industry - Employer Name - Employer Address - Employer Phone Number - Employed Since Date (optional) - Income (optional) Employment ACCOUNT PURPOSE (Deposit Products) Support with Anti-Money Laundering filtering - Account Opening Purpose - Account Source of Funds - Third Party Declaration Account Purpose 1 \"Social Insurance Number\" is currently not built and will be released later in 2022 2 Note, at this time we do not support ID verification for Canadian Residents who are also Tax Residents of another country","title":"Pillar 1 | Customer Information"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#_1","text":"","title":""},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#onboarding-a-sole-proprietor","text":"A Sole Proprietor is also governed by the same \"Know Your Client\" regulations; and what may appear as an outlier field like \"Residential Address\" is required. Below is a breakdown of fields required for a Sole Proprietor. CATEGORIES RATIONALE FIELDS API CALLS PERSONAL Collect basic applicant information for communication & vetting purposes - Full Legal Name - Middle Name (optional) - Alias (optional) - Residential Address - Date of Birth - Phone Number - Phone Number Type (Mobile or Landline) - Email Address - Language Preferences Personal Details Contact Details Address TAX RESIDENCY 2 Identifying tax residency during account opening to comply with regulation - Canadian Tax Residency Status - US Citizen - Another Country Tax Residency Status If the applicant is a tax resident of Another Country (including the US), or a US Citizen, then the tax identification number for that country and Canadian SIN must be collected Tax Residency Other Residency EMPLOYMENT Support with Anti-Money Laundering filtering - Employment Status - Employment Occupation - Industry - Employer Name - Business Address - Employer Phone Number - Employed Since Date (optional) Employment ACCOUNT PURPOSE (Deposit Products) Support with Anti-Money Laundering filtering - Account Purpose - Account Source of Funds - Third Party Declaration Account Purpose 2 Note, at this time we do not support ID verification for Canadian Residents who are also Tax Residents of another country","title":"Onboarding a Sole Proprietor"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#reference-data-sets-for-select-fields","text":"CATEGORIES LIST OF OPTIONS PRESENTED EMPLOYMENT STATUS - Employed - Unemployed - Retired - Student-Unemployed - Student-Employed - Self-employed - Homemaker PRIMARY ACCOUNT USAGE - Everyday transactions - Everyday Business transactions (for Sole Proprietors only) - Paying for school - Travelling - Buying property/Renovations - Buying a car - Savings - Other PRIMARY SOURCE OF FUNDS - Employment Income (Salary / Self-employment Income) - Sale of Assets/Capital Gains (House, Car, etc.) - Trust / Inheritance/ Family income - Loans - Government Payments / Social Assistance - Support Payments - Grants/Scholarships or Bursaries - Work-Related Retirement or Disability Pension - Rental Income - Investment Income - Savings (Dividends / Interest) - Royalty Income - Tips/Commissions - Gifts - Insurance Claims / Payments - Pension / Retirement Income - Windfall (Lottery winnings, casino, etc.) OCCUPATION INDUSTRY The \u201cOccupation\u201d and \u201cIndustry\u201d fields are required to comply with Anti-Money Laundering and Anti-Terrorist Financing regulations. We use the National Occupational Classification (NOC) list for Occupations National Occupational Classification - Canada.ca and the North American Industry Classification System (Canada) (NAICS) for Industries Industry classifications . The NOC list may not include newer titles such as \u201cinfluencer\u201d, \u201cbrand ambassador\u201d, or \u201csocial media guru\u201d, however, the traditional classification of \u201cpublicist\u201d or \u201cprofessional in marketing\u201d would be an equivalent or a close enough approximation that customers can select to identify their occupation.","title":"Reference data sets for select fields"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#pillar-2-digital-id-verification","text":"This process verifies a person's identity by using computer technology. We screen for bad actors and potential device level frauds and validate the person's documentation and liveness.","title":"Pillar 2 | Digital ID Verification"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#how-does-finaptics-onboarding-sevice-help-your-business","text":"Our approach helps prevent fraud, money laundering and terrorist funding. Using leading ID verification partner technologies that leverage artificial intelligence technology; providing document and biometric authentication with liveness tests to truly verify if the person applying for a financial product is who they say they are. Working in real time, we will eliminate manual screening errors, speed up the document inspection process, and significantly reduce employee intervention, operating costs and customer inconvenience.","title":"How does Finaptic's Onboarding Sevice help your business?"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#requirements-for-digital-id-verification","text":"The identification document has to be authentic, valid, and original. A valid (unexpired) identification document as listed in the Accepted Forms of Identity Documentation for Digital Identification Verification section. A mobile device with a functional camera for a selfie.","title":"Requirements for Digital ID Verification"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#digital-id-verification-decision-making","text":"Finaptic will render a decision of either Approved or Declined within 90 seconds from the point of application submission. During those 90 seconds, Finaptic will complete the following process to screen for bad actors and potential fraud with every applicant: Cross referenced against up-to-date Sanctions lists, Politically Exposed Persons, and other Watchlists Validate for potential device & IP level fraud Facial Recognition Match will include a liveness test. A liveness test ensures that there is a real person present instead of a photo, video playback or even a mask An applicant will be permitted up to 3 retries for common applicant error types (ex. name mismatch, incorrect date of birth, etc.). An applicant will not be permitted to re-apply if the reason for a decline is Fraud or Sanctions related.","title":"Digital ID Verification Decision Making"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#visualizing-digital-id-verification","text":"The DocumentInfo API is a message containing the details of an onboarding document collected from the customer to prove identity. TIP | As a Partner, you can re-brand the Digital ID Verification experience to reflect your brand's colour & tone; with the exeption of when your camera is attempting to take a picture.","title":"Visualizing Digital ID Verification"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#accepted-forms-of-identity-documentation-for-digital-id-verification","text":"At this moment, Finaptic will accept select Valid (unexpired) Government issued identification. Note, damaged and worn identification documents will not be accepted.","title":"Accepted forms of identity documentation for Digital ID Verification"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#valid-unexpired-government-issued-identification","text":"Canadian Passport (front page only) Canadian Permanent Resident Card Canada (front & backpages) Canadian Citizenship card (issued prior to 2012) Canada (front & backpages)","title":"Valid (unexpired) Government Issued Identification"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#valid-unexpired-canadian-government-drivers-licence-identification","text":"British Columbia Driver's License British Columbia, Canada Alberta Driver's License Alberta, Canada Ontario Driver's License Ontario, Canada Saskatchewan Driver's License Saskatchewan, Canada Manitoba Driver's License Manitoba, Canada Quebec Driver's License Quebec, Canada New Brunswick Driver's License New Brunswick, Canada Nova Scotia Driver's License Nova Scotia, Canada Prince Edward Island Driver's License Prince Edward Island, Canada Newfoundland and Labrador Driver's License Newfoundland & Labrador, Canada Yukon Driver's License Yukon, Canada Northwest Territories Driver's License Northwest Territories, Canada Nunavut Driver's License Nunavut, Canada","title":"Valid (unexpired) Canadian Government Driver's Licence Identification"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#valid-unexpired-canadian-provincial-services-cards","text":"British Columbia Services Card British Columbia, Canada","title":"Valid (unexpired) Canadian Provincial services cards"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#valid-unexpired-canadian-provincial-or-territorial-identity-cards","text":"British Columbia Enhanced ID British Columbia, Canada Alberta Photo Identification Card Alberta, Canada Saskatchewan Non-driver photo ID Saskatchewan, Canada Manitoba Enhanced Identification Card Manitoba, Canada Ontario Photo Card Ontario, Canada New Brunswick Photo ID Card New Brunswick, Canada Nova Scotia Identification Card Nova Scotia, Canada Prince Edward Island Voluntary ID Prince Edward Island, Canada Newfoundland and Labrador Photo Identification Card Newfoundland and Labrador, Canada Northwest Territories General Identification Card Northwest Territories, Canada Nunavut General Identification Card Nunavut, Canada","title":"Valid (unexpired) Canadian Provincial or territorial identity cards"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#onboarding-a-minor","text":"Finaptic's Onboarding Service is ready to onboard minors and is subject to Finaptic ID Verification Policies listed below. Age Brackets FINTRAC Requirement Finaptic Technology Policy Available 0 - 11 years of age ID Verification is Optional Don't ID Verify Child Must ID Verify Parent/Guardian Details below : Parent/Guardian ID must be verified (ID does not be re-verified if on file but parent/guardian should be authenticated or provide acknowledgment) Yes 12 - 15 years of age ID Verification is Optional Same as above; 0-11 years of age Yes 16+ years of age ID Verification is Required Must ID Verify like an Adult No","title":"Onboarding a Minor"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#data-retention-guidelines","text":"For how long are the Personal Identity and Selfie information stored? Our third party vendor, Acuant, which receives the selfie and and Personal ID is permitted to store the photo and ID solely for the purposes of verifying the identity of the applicant and verifying that the identification document is authentic, valid and current, and for providing us the information extracted from the personal identification. Acuant expunges the selfie and the personal identification from their system within **24 hours**. If the applicant is approved to open an account, Finaptic receives the following information regarding the identification document used to verify the applicant\u2019s identification, which Finaptic will store for 7 years after the customer\u2019s account is closed ; retained data points include Person\u2019s Name Date on which the person\u2019s identity was verified Type of document used (for example, driver's licence, passport, etc.) Unique identifying number of the document used Jurisdiction (province or state) and country of issue of the document Expiry date of the document, if available (if this information appears on the document or card, we must record it) In case of a malfunction in the onboarding process or the user doesn\u2019t complete the process, a garbage collection will delete picture within 24 hours. All retained data is stored in the Google Cloud Platform's GCS Encrypted buckets.","title":"Data Retention Guidelines"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#pillar-3-onboarding-agreements","text":"In addition to the agreements presented to your customer to upload your app, such as an End User License Agreement and Terms of Use, your customer must read and agree to a number of additional agreements before being able to proceed with the application. As part of Onboarding, these include the Electronic Communications Agreement and Privacy Policy. Documents that are presented later in the app, and that are related to your specific use case, including product disclosures, product applications and agreements are covered under the product sections of this guide. There are 2 notable APIs to refer to: The Consent API is a message indicating the receipt of a requested customer Consent. The Disclosure API is a message indicating the receipt of a requested customer Disclosure.","title":"Pillar 3 | Onboarding Agreements"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#the-agreements","text":"There are 4 primary agreement types with each tailored to the partner agreement. Finaptic Account Fee Guide and Agreement Finaptic App Terms of User Finaptic Electronic Communications Agreement Finaptic Privacy Policy","title":"The Agreements"},{"location":"Implementation-Guide/Onboarding/OnboardingDocumentation/#making-the-agreement-available-within-your-app-sdk-guides","text":"Customers must be able to easily access each agreement from your app. Best practice is to send the agreement to the customer's in app Message Centre noting their consent. You must also have the most recent version of the agreement displayed in the \"Legal\" section of the app or other obvious section that can be easily found.","title":"Making the agreement available within your app; SDK Guides"},{"location":"Implementation-Guide/Onboarding/OnboardingSequenceDoc/","text":"Onboarding Sequence Diagram \u00b6 Guide Purpose \u00b6 This guide will Give you an overview of the onboarding flow Links to related Onboarding topics Onboarding Overview Finaptic's Authorized User Policies Productless Onboarding Architecture to Onboard an Authorized User Test profiles to test your onboarding flow What is a Sequence Diagram? \u00b6 A sequence diagram shows object interactions arranged in time sequence. It depicts the objects involved in the scenario and the sequence of messages exchanged between the objects needed to carry out the functionality of the scenario. Sequence diagrams are typically associated with use case realizations in the logical view of the system under development. Sequence diagrams are sometimes called event diagrams or event scenarios . A sequence diagram shows, as parallel vertical lines ( lifelines ), different processes or objects that live simultaneously, and, as horizontal arrows, the messages exchanged between them, in the order in which they occur. This allows the specification of simple runtime scenarios in a graphical manner.","title":"Onboarding Sequence Diagram"},{"location":"Implementation-Guide/Onboarding/OnboardingSequenceDoc/#onboarding-sequence-diagram","text":"","title":"Onboarding Sequence Diagram"},{"location":"Implementation-Guide/Onboarding/OnboardingSequenceDoc/#guide-purpose","text":"This guide will Give you an overview of the onboarding flow Links to related Onboarding topics Onboarding Overview Finaptic's Authorized User Policies Productless Onboarding Architecture to Onboard an Authorized User Test profiles to test your onboarding flow","title":"Guide Purpose"},{"location":"Implementation-Guide/Onboarding/OnboardingSequenceDoc/#what-is-a-sequence-diagram","text":"A sequence diagram shows object interactions arranged in time sequence. It depicts the objects involved in the scenario and the sequence of messages exchanged between the objects needed to carry out the functionality of the scenario. Sequence diagrams are typically associated with use case realizations in the logical view of the system under development. Sequence diagrams are sometimes called event diagrams or event scenarios . A sequence diagram shows, as parallel vertical lines ( lifelines ), different processes or objects that live simultaneously, and, as horizontal arrows, the messages exchanged between them, in the order in which they occur. This allows the specification of simple runtime scenarios in a graphical manner.","title":"What is a Sequence Diagram?"},{"location":"Implementation-Guide/Onboarding/OnboardingTestProfiles/","text":"Test profiles \u00b6 Guide Purpose \u00b6 This guide will Give you details on how to test onboarding applications that perform KYC checks Links to related Onboarding topics Onboarding Overview Onboarding Sequence Diagram Finaptic's Authorized User Policies Productless Onboarding Architecture to Onboard an Authorized User Profiles \u00b6 In order to ease development and testing, we've provided test profiles at your disposal. Note that : Any application that performs KYC and uses these names will trigger the rules regardless of the rest of the application. The application still needs to have a valid Canadian address (Verified against a 3rd party during the updateAddresses call) Age of the applicant must be equal or above the age of majority for the specified province of residency. Description Firstname Middle Lastname Returned in FailureStatusCodes after ValidateDocument/Selfie Returned in FailureStatusCodes after ValidateDocument/Selfie Customer that passes the KYC check succesfully John success Doe None None Customer that provided a DoB different than the one on the ID (Photo not clear enough) John dob-match Doe FAILURE_CODE_ID_DOB_MATCH FAILURE_CODE_ID_DOB_MATCH Customer provided an ID that we were unable to verify John id-validation Doe FAILURE_CODE_ID_VALIDATION FAILURE_CODE_ID_VALIDATION Customer provided a Selfie that we were unable to verify John selfie-validation Doe FAILURE_CODE_SELFIE_VALIDATION FAILURE_CODE_SELFIE_VALIDATION Customer that provided an ID that is expired John id-expired Doe FAILURE_CODE_ID_EXPIRED FAILURE_CODE_ID_EXPIRED Customer that provided an ID that we were unable to validate (worn or damaged) John id-verification Doe FAILURE_CODE_ID_VERIFICATION FAILURE_CODE_ID_VERIFICATION Customer that provided a name that does not match the name on the ID John name-match Doe FAILURE_CODE_ID_NAME_MATCH FAILURE_CODE_ID_NAME_MATCH Customer that provided a Selfie that does not match the photo on the ID John selfie-match Doe FAILURE_CODE_ID_SELFIE_MATCH FAILURE_CODE_ID_SELFIE_MATCH Customer that is rejected during KYC check because he is on a sanctioned list John sanctioned Doe None FAILURE_CODE_DEFAULT Customer that is rejected during KYC with a general error message John default Doe None FAILURE_CODE_DEFAULT","title":"Test profiles"},{"location":"Implementation-Guide/Onboarding/OnboardingTestProfiles/#test-profiles","text":"","title":"Test profiles"},{"location":"Implementation-Guide/Onboarding/OnboardingTestProfiles/#guide-purpose","text":"This guide will Give you details on how to test onboarding applications that perform KYC checks Links to related Onboarding topics Onboarding Overview Onboarding Sequence Diagram Finaptic's Authorized User Policies Productless Onboarding Architecture to Onboard an Authorized User","title":"Guide Purpose"},{"location":"Implementation-Guide/Onboarding/OnboardingTestProfiles/#profiles","text":"In order to ease development and testing, we've provided test profiles at your disposal. Note that : Any application that performs KYC and uses these names will trigger the rules regardless of the rest of the application. The application still needs to have a valid Canadian address (Verified against a 3rd party during the updateAddresses call) Age of the applicant must be equal or above the age of majority for the specified province of residency. Description Firstname Middle Lastname Returned in FailureStatusCodes after ValidateDocument/Selfie Returned in FailureStatusCodes after ValidateDocument/Selfie Customer that passes the KYC check succesfully John success Doe None None Customer that provided a DoB different than the one on the ID (Photo not clear enough) John dob-match Doe FAILURE_CODE_ID_DOB_MATCH FAILURE_CODE_ID_DOB_MATCH Customer provided an ID that we were unable to verify John id-validation Doe FAILURE_CODE_ID_VALIDATION FAILURE_CODE_ID_VALIDATION Customer provided a Selfie that we were unable to verify John selfie-validation Doe FAILURE_CODE_SELFIE_VALIDATION FAILURE_CODE_SELFIE_VALIDATION Customer that provided an ID that is expired John id-expired Doe FAILURE_CODE_ID_EXPIRED FAILURE_CODE_ID_EXPIRED Customer that provided an ID that we were unable to validate (worn or damaged) John id-verification Doe FAILURE_CODE_ID_VERIFICATION FAILURE_CODE_ID_VERIFICATION Customer that provided a name that does not match the name on the ID John name-match Doe FAILURE_CODE_ID_NAME_MATCH FAILURE_CODE_ID_NAME_MATCH Customer that provided a Selfie that does not match the photo on the ID John selfie-match Doe FAILURE_CODE_ID_SELFIE_MATCH FAILURE_CODE_ID_SELFIE_MATCH Customer that is rejected during KYC check because he is on a sanctioned list John sanctioned Doe None FAILURE_CODE_DEFAULT Customer that is rejected during KYC with a general error message John default Doe None FAILURE_CODE_DEFAULT","title":"Profiles"},{"location":"Implementation-Guide/Onboarding/ProductlessOnboardingDoc/","text":"Productless Onboarding \u00b6 Guide Purpose \u00b6 This guide will Educate you on how an Authorized User is Onboarded Links to related Onboarding topics Onboarding Overview Onboarding Sequence Diagram Finaptic's Authorized User Policies Test profiles to test your onboarding flow What is a Productless Onboarding? \u00b6 Productless Onboarding is the foundation on which an Authorized User is Onboarded to the platform without the actual creation of a product post the successful completion of onboarding. Productless Onboarding will apply to applicants who may or may not require AML & KYC identity validation. The Productless Onboarding Architecture \u00b6 An Authorized User is onboarded to the platform via the Productless Onboarding Flow; representing a minimum 5 steps to be onboarded . Make a valid request to the InitiateApplicationRequest with BundleID productlessV1 Make a valid request to UpdatePersonalDetailsRequest Make a valid request to UpdateContactDetailsRequest Make a valid request to AcceptApplicationRequest Make a valid request to FinalizeApplicationCreateCustomerRequest , this is the end of the flow. Note that application status status is now Application Processed","title":"Productless Onboarding"},{"location":"Implementation-Guide/Onboarding/ProductlessOnboardingDoc/#productless-onboarding","text":"","title":"Productless Onboarding"},{"location":"Implementation-Guide/Onboarding/ProductlessOnboardingDoc/#guide-purpose","text":"This guide will Educate you on how an Authorized User is Onboarded Links to related Onboarding topics Onboarding Overview Onboarding Sequence Diagram Finaptic's Authorized User Policies Test profiles to test your onboarding flow","title":"Guide Purpose"},{"location":"Implementation-Guide/Onboarding/ProductlessOnboardingDoc/#what-is-a-productless-onboarding","text":"Productless Onboarding is the foundation on which an Authorized User is Onboarded to the platform without the actual creation of a product post the successful completion of onboarding. Productless Onboarding will apply to applicants who may or may not require AML & KYC identity validation.","title":"What is a Productless Onboarding?"},{"location":"Implementation-Guide/Onboarding/ProductlessOnboardingDoc/#the-productless-onboarding-architecture","text":"An Authorized User is onboarded to the platform via the Productless Onboarding Flow; representing a minimum 5 steps to be onboarded . Make a valid request to the InitiateApplicationRequest with BundleID productlessV1 Make a valid request to UpdatePersonalDetailsRequest Make a valid request to UpdateContactDetailsRequest Make a valid request to AcceptApplicationRequest Make a valid request to FinalizeApplicationCreateCustomerRequest , this is the end of the flow. Note that application status status is now Application Processed","title":"The Productless Onboarding Architecture"},{"location":"Implementation-Guide/Personal-Financial-Management/","text":"PFM Overview \u00b6 Welcome to Finaptic\u2019s Personal Financial Management (PFM) Service that will help you deliver timely, relevant, contextialized and actionable digital-first communications. Guide Purpose \u00b6 This guide will Educate you on Finaptic\u2019s Personal Financial Management Service Highlight our Release Plan Bridge to our API specifications What is Personal Financial Management or PFM? \u00b6 PFM is the concept of enhancing account level monitoring and enabling better control of your everyday banking. This service is developed to help customers gain insights and better manage both money-in & money-out transactions. A customer will be able to track finances in real time, giving them a view of their past transactions while protecting them under layers of security and keeping your personal information secure. Finaptic delivers a customizable offering \u00b6 We believe that Personal Financial Management should inform , guide and empower customers to stay on top of their finances. Three underlying guiding principles to our approach \u00b6 Delivery of real-time notifications Given criticality of staying informed, alerts and communications should be near real-time.\u200b Contextuality drives value Finances are personal and so should the insights & communications generated.\u200b Orchestration to personalize Ability to set controls to avoid burdening the customers with messaging. What to expect in our Initial Release? \u00b6 Category Feature Initial Release Future Release Transactions Notifications 1 - Yes History 2 Yes Enhanced Filtering 3 Yes Enhanced Geo-locate Transactions - Yes Daily Spend Alerts - Yes Orchestration Push Notifications - Yes SMS Notifications - Yes Email Notifications - Yes Notifications Off - Yes In-App Event Yes - 1 Transaction Notifications: Allows the customer to receive a push notification every time a transaction affects the balance of their account. For the initial release the customers will only be notified for the following transaction types: Credits, Debits, and Refunds. 2 Transaction History: Viewing a list of all the transactions occurred on their accounts. For the initial release, customers will only be able to view the following types of transactions: Credits, Debits, and Refunds. 3 Transaction Filtering: Filter transactions by User, Account, Account type, Time Period, User Device & Transaction Type. API Overview \u00b6 There are 4 foundational Transactions related API Calls GetTransactionsRequest This API call represents a message being passed as a parameter to the GetTransactions operation. This API is the initiator that will make the request to extract transactions for a specific account including setting the maximum count of transactions to view and the order in which to filter. GetTransactionsResponse This API call represents the response of a successful GetTransactions request. Here the API call will generate a response to list transactions including the order in which they should be sorted. Transaction This API call represents the details about the transaction and information regarding the account the transaction has occurred on. A customer will received enriched information about their transaction; the transaction state, amount, time & date of transaction, updated balance and merchant. TransactionCreatedEvent TransactionCreatedEvent event is raised when a Transaction occurs. This API call represents the creation of a transaction by time & date, who initiated the transaction and reflecting with both primary & authorized users. Complete details of the PFM API specifications can be found here . Glossary | Common Transaction \"States\" \u00b6 Posted The transaction that has completed its life cycle and the settlement process is completed Pending The transaction that is still to go through its lifecycle and pending settlement Authorized An approval from a card issuer, usually through a card processor, that the customer has sufficient funds to cover the cost of the transaction. Debit A charge to a customer\u2019s bank card account. Cards tied to a checqing or savings account are often called debit cards. Refund The creation of a credit to a cardholder account, usually as a result of a product or service return. Declined A card will be Declined if the the Card is not in good standing condition, insufficient funds in the account and a varied number of business reasons implemented by the issuing institution. Chargeback Occurs when a charge is reversed, returning credit to a card customer from a merchant. Credit A transfer of money to a customer\u2019s bank account via the card. E-transfer States: Deposited: The e-transfer service is successfully deposited into the customer account. Rejected: The e-transfer service is rejected due to a varied no of reasons: The reason of rejection must be presented.","title":"PFM Overview"},{"location":"Implementation-Guide/Personal-Financial-Management/#pfm-overview","text":"Welcome to Finaptic\u2019s Personal Financial Management (PFM) Service that will help you deliver timely, relevant, contextialized and actionable digital-first communications.","title":"PFM Overview"},{"location":"Implementation-Guide/Personal-Financial-Management/#guide-purpose","text":"This guide will Educate you on Finaptic\u2019s Personal Financial Management Service Highlight our Release Plan Bridge to our API specifications","title":"Guide Purpose"},{"location":"Implementation-Guide/Personal-Financial-Management/#what-is-personal-financial-management-or-pfm","text":"PFM is the concept of enhancing account level monitoring and enabling better control of your everyday banking. This service is developed to help customers gain insights and better manage both money-in & money-out transactions. A customer will be able to track finances in real time, giving them a view of their past transactions while protecting them under layers of security and keeping your personal information secure.","title":"What is Personal Financial Management or PFM?"},{"location":"Implementation-Guide/Personal-Financial-Management/#finaptic-delivers-a-customizable-offering","text":"We believe that Personal Financial Management should inform , guide and empower customers to stay on top of their finances.","title":"Finaptic delivers a customizable offering"},{"location":"Implementation-Guide/Personal-Financial-Management/#three-underlying-guiding-principles-to-our-approach","text":"Delivery of real-time notifications Given criticality of staying informed, alerts and communications should be near real-time.\u200b Contextuality drives value Finances are personal and so should the insights & communications generated.\u200b Orchestration to personalize Ability to set controls to avoid burdening the customers with messaging.","title":"Three underlying guiding principles to our approach"},{"location":"Implementation-Guide/Personal-Financial-Management/#what-to-expect-in-our-initial-release","text":"Category Feature Initial Release Future Release Transactions Notifications 1 - Yes History 2 Yes Enhanced Filtering 3 Yes Enhanced Geo-locate Transactions - Yes Daily Spend Alerts - Yes Orchestration Push Notifications - Yes SMS Notifications - Yes Email Notifications - Yes Notifications Off - Yes In-App Event Yes - 1 Transaction Notifications: Allows the customer to receive a push notification every time a transaction affects the balance of their account. For the initial release the customers will only be notified for the following transaction types: Credits, Debits, and Refunds. 2 Transaction History: Viewing a list of all the transactions occurred on their accounts. For the initial release, customers will only be able to view the following types of transactions: Credits, Debits, and Refunds. 3 Transaction Filtering: Filter transactions by User, Account, Account type, Time Period, User Device & Transaction Type.","title":"What to expect in our Initial Release?"},{"location":"Implementation-Guide/Personal-Financial-Management/#api-overview","text":"There are 4 foundational Transactions related API Calls GetTransactionsRequest This API call represents a message being passed as a parameter to the GetTransactions operation. This API is the initiator that will make the request to extract transactions for a specific account including setting the maximum count of transactions to view and the order in which to filter. GetTransactionsResponse This API call represents the response of a successful GetTransactions request. Here the API call will generate a response to list transactions including the order in which they should be sorted. Transaction This API call represents the details about the transaction and information regarding the account the transaction has occurred on. A customer will received enriched information about their transaction; the transaction state, amount, time & date of transaction, updated balance and merchant. TransactionCreatedEvent TransactionCreatedEvent event is raised when a Transaction occurs. This API call represents the creation of a transaction by time & date, who initiated the transaction and reflecting with both primary & authorized users. Complete details of the PFM API specifications can be found here .","title":"API Overview"},{"location":"Implementation-Guide/Personal-Financial-Management/#glossary-common-transaction-states","text":"Posted The transaction that has completed its life cycle and the settlement process is completed Pending The transaction that is still to go through its lifecycle and pending settlement Authorized An approval from a card issuer, usually through a card processor, that the customer has sufficient funds to cover the cost of the transaction. Debit A charge to a customer\u2019s bank card account. Cards tied to a checqing or savings account are often called debit cards. Refund The creation of a credit to a cardholder account, usually as a result of a product or service return. Declined A card will be Declined if the the Card is not in good standing condition, insufficient funds in the account and a varied number of business reasons implemented by the issuing institution. Chargeback Occurs when a charge is reversed, returning credit to a card customer from a merchant. Credit A transfer of money to a customer\u2019s bank account via the card. E-transfer States: Deposited: The e-transfer service is successfully deposited into the customer account. Rejected: The e-transfer service is rejected due to a varied no of reasons: The reason of rejection must be presented.","title":"Glossary | Common Transaction \"States\""},{"location":"Implementation-Guide/Transactions/transactions/","text":"Transactions Overview \u00b6 Content to be populated \u00b6","title":"Transactions Overview"},{"location":"Implementation-Guide/Transactions/transactions/#transactions-overview","text":"","title":"Transactions Overview"},{"location":"Implementation-Guide/Transactions/transactions/#content-to-be-populated","text":"","title":"Content to be populated"},{"location":"Implementation-Guide/Transfers/EFT/electronicfundstransfer/","text":"Electronic Funds Transfer \u00b6 Content to be populated \u00b6","title":"Electronic Funds Transfer"},{"location":"Implementation-Guide/Transfers/EFT/electronicfundstransfer/#electronic-funds-transfer","text":"","title":"Electronic Funds Transfer"},{"location":"Implementation-Guide/Transfers/EFT/electronicfundstransfer/#content-to-be-populated","text":"","title":"Content to be populated"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/","text":"Auto-Deposit Overview \u00b6 Introduction \u00b6 Finaptic offers its customers access to the Interac payments network. Multiple products are available for Interac, and are accessible via the Core Transfers endpoint. This endpopint gives Finaptic customers the ability to initiate Interac payment processes. Guide Purpose \u00b6 This guide will: Provide an overview on Interac services available to Finaptic customers Provide an API overview for effective integration About the Product \u00b6 What is Interac? \u00b6 Interac is a Canadian payment network that provides interbank payment capabilities via a number of products; with the predominant funds transfer network via its e-Transfer service. Common Terminology \u00b6 e-Transfer or simply transfer \u2013 means an INTERAC e-Transfer, the transaction by which money is transferred using the INTERAC e-Transfer service Sender \u2013 a customer who sends money to another customer using INTERAC e-Transfer Recipient \u2013 a customer who receives an INTERAC e-Transfer ANR or Account Number Routing \u2013 a customer can fund their account \u00b6 What is Interac e-Transfer? \u00b6 Interac e-Transfer is a secure, fast, and convenient way to send, request, and receive money from a person or a business with an email address or a valid Canadian mobile number, and an eligible bank account with a participating Canadian financial institution . Most transfers complete within one minute but some may take up to 30 minutes. To send money using the Interac e-Transfer service, the account number of the recipient does not need to be known \u2013 only their email address or mobile number is required. Which Interac features does Finaptic offer? \u00b6 There are 5 core Interac features that support money movement . Feature Description How Partner Availability Interac Receive Email, SMS & ANR Ability to receive money into your account via Email or SMS or ANR Email SMS ANR Yes Interac Autodeposit A convenient feature that saves you time; the money you receive using Interac e-Transfer can automatically be deposited into your account without requiring you to sign-in Email Yes Interac Q&A If you are sent money to your email or mobile number using Interac e-Transfer and are not registered for Autodeposit, you will first need to answer a security question provided by the sender in order to deposit the funds Email SMS Planned for 2022 Interac Send Ability to send money via Email or SMS Email SMS Planned for 2022 Interac Request Ability to request money via Email or SMS Email SMS Planned for 2022 \u00b6 What is Finaptic referred to as when selecting a Financial Institution to e-Transfer money to? \u00b6 Within Interac, Finaptic Technologies is referred to as NatSolutions ; example visual below. Interac Auto-Deposit \u00b6 Auto-deposit is a convenient feature that saves you time; the money you receive using Interac e-Transfer can automatically be deposited into your account without requiring you to sign-in to your account. Additionally, there is no need to go through the security Q&A process. Autodeposit API Overview \u00b6 One-Time Registration \u00b6 You just need to choose one or more email addresses to receive notifications and a dedicated account where the funds can be deposited. Any e-Transfers sent to the registered email address will automatically be deposited to the designated account. The registration request for Interac services is generated through the Interac API function. This request is generated via the CreateRegistrationRequest call. 4 data elements are required via the API call in order to generate this request: account_id - Provided for the account that the customer wishes auto-deposit transactions to be routed to account_alias - This is typically the user's email address, which can be used for both the account_alias field and the alias_email field alias_email alias_phone_number All other details from the customer file that are required for registration will be retrieved by Finaptic during the registration process. In the event that a user wants to change their registration to a different account, a new call with the new account ID must be made, at which point, the same process is to be followed. Registration Errors \u00b6 A number of errors could occur in the registration process. These errors will be communicated either via our asynchronous API surface, or via the synchronous SDK capabilities which can be found in our SDK Guide . Error possibilities at time of registration are as follows: Code Description 301 Customer does not exist 379 Invalid mobile phone area code 380 Invalid mobile phone number 400 Mutually exclusive options are specified in the request 410 Customer is disabled 422 Retail name missing 451 Customer not registered for transfer product, currency code combination 540 Invalid bank account 543 Account-alias handle is already defined in e-Transfer system 545 Duplicated participant account-alias reference number 546 Invalid account-alias registration notification preference 547 Maximum number of account-alias registrations threshold exceeded 567 Invalid UUID format 591 Sender Account Identifier and Service Type combination is not supported. Managing Registrations \u00b6 A customer can set up multiple Autodeposit registrations, subject to a global limit (currently 5 for retail customers, 100 for small business customers, and 500 for corporate customers). Each email address or phone number can only be registered once across the entire e-Transfer network; however multiple email addresses and phone numbers can be registered to the same account. In online banking, the Recipient must be able to see a list of their Autodeposit registrations, showing the email address or phone number, the bank account associated with each, and the status of the registration (pending or active). For each Autodeposit registration, online banking gives the customer the option of cancelling a registration, or modifying it. Allowed modifications are changing the account details or notification preferences. The customer cannot change the email address or phone number associated with a registration \u2013 each new email address or phone number requires the creation of a new registration. A customer can initiate a new Autodeposit registration for an email address or mobile phone number that is already registered for Autodeposit. In this case, the verification notification explicitly asks the customer if they want to replace the old registration with the new one. The old registration remains active until such time as the new registration goes active (i.e. the customer has responded to the verification notification to confirm that they want to transfer the registration to the new account, and the new registration has been reviewed and allowed from the fraud perspective). Once the new registration goes active, the previous registration is automatically made inactive. Fraud Check of Autodeposit Registrations \u00b6 The biggest concern with Autodeposit registrations is the potential for a criminal to register someone else\u2019s email address or phone number to an account that the criminal has access to. Therefore, the registration process must be monitored. When the customer clicks the validation link from the notification to activate a new Autodeposit registration, the registration is scored by the fraud detection system. If nothing is suspicious, the registration becomes active immediately and the customer is informed of that. Registrations that appear suspicious are blocked until an Interac fraud analyst has had a chance to review the registration. In those cases the customer is told that the registration is being processed. If the registration seems legitimate, the fraud analyst unblocks it at which point it becomes active (and a confirmation notification is sent to the customer). As long as a registration is not active (e.g. is blocked), the associated email address or phone number is not used for Autodeposit. Anyone sending an transfer to that email address or phone number has to send a normal INTERAC e-Transfer (i.e. with security question and answer). Even after a registration has been activated, an Interac fraud analyst can block the registration if it becomes clear that the registration is not legitimate. This action will be used very sparingly, since there is significant impact on both senders and the recipient. Expiration of Registrations \u00b6 If an Autodeposit Registration remains unused for a long period of time, it will be removed from the system. For email addresses the period is 12 months ; for phone numbers it is 3 months . Whenever the registration is used for receiving an INTERAC e-Transfer, the timer is reset so the registration will not expire for another 3 or 12 months. A week before the registration is due to expire, the INTERAC e-Transfer system sends a notification to the email address or phone number associated with the registration, that allows the Recipient to renew the registration for another period by simply clicking on a confirmation button. There is an option to cancel or report the registration on the same notification as well. In case the recipient does not take any action on the sent expiry reminder notification, the Autodeposit registration is expired by the system and a de-registration notification is sent to the recipient. Deposits \u00b6 When a deposit is sent to a customer who has registered for the Interac Autodeposit service, transactions will be routed to the account specified by the user during the registration call. The process is automated, and the customer will be notified via an email or text message generated by Interac. Interac Autodeposit transactions can be retrieved from the Core Transfers domain and from the Personal Financial Management domain. The PFM domain contains basic summary information regarding the transaction, while the Transfers domain contains a complete data set which may or may not be required for the end user to identify the transaction. When funds have been receieved by the user, the deposit can exist in 3 states: Begin Commited Reversed All deposit states will appear in the transaction history. Account Closures and Deposit Failures \u00b6 A successful Autodeposit transfer depends on the success of the deposit action. If the deposit does not succeed at first, different things may happen: If the financial institution (FI) indicates a soft error (e.g. systems unavailable) then Interac retries the deposit a few times until failing the transfer. Failing the transfer means that the Sender will need to reclaim the funds (or, if Auto Reclaim is active, the funds will be pushed back to the Sender automatically). If the FI indicates a hard error (e.g. account is closed) then Interac not only fails the transfer, but deletes the Autodeposit registration. Visualizing the Autodeposit Experience \u00b6 Autodeposit Registration \u00b6 Finaptic has provided the screen elements below for reference purposes. This process outlines a possible user flow representation of what your customer experience could resemble. Registration Confirmation \u00b6 Once a registration request is submitted, Interac and Finaptic take care of the rest of the process. Users will receive an email at the email address that they provided from Interac, which will ask them to verify that they have selected NatSolutions as their auto-deposit provider. Once this verification step is complete, the registration process is also complete, which will result in a confirmation email being generated from Interac. \u00b6","title":"Auto-Deposit Overview"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#auto-deposit-overview","text":"","title":"Auto-Deposit Overview"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#introduction","text":"Finaptic offers its customers access to the Interac payments network. Multiple products are available for Interac, and are accessible via the Core Transfers endpoint. This endpopint gives Finaptic customers the ability to initiate Interac payment processes.","title":"Introduction"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#guide-purpose","text":"This guide will: Provide an overview on Interac services available to Finaptic customers Provide an API overview for effective integration","title":"Guide Purpose"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#about-the-product","text":"","title":"About the Product"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#what-is-interac","text":"Interac is a Canadian payment network that provides interbank payment capabilities via a number of products; with the predominant funds transfer network via its e-Transfer service.","title":"What is Interac?"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#common-terminology","text":"e-Transfer or simply transfer \u2013 means an INTERAC e-Transfer, the transaction by which money is transferred using the INTERAC e-Transfer service Sender \u2013 a customer who sends money to another customer using INTERAC e-Transfer Recipient \u2013 a customer who receives an INTERAC e-Transfer ANR or Account Number Routing \u2013 a customer can fund their account","title":"Common Terminology"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#_1","text":"","title":""},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#what-is-interac-e-transfer","text":"Interac e-Transfer is a secure, fast, and convenient way to send, request, and receive money from a person or a business with an email address or a valid Canadian mobile number, and an eligible bank account with a participating Canadian financial institution . Most transfers complete within one minute but some may take up to 30 minutes. To send money using the Interac e-Transfer service, the account number of the recipient does not need to be known \u2013 only their email address or mobile number is required.","title":"What is Interac e-Transfer?"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#which-interac-features-does-finaptic-offer","text":"There are 5 core Interac features that support money movement . Feature Description How Partner Availability Interac Receive Email, SMS & ANR Ability to receive money into your account via Email or SMS or ANR Email SMS ANR Yes Interac Autodeposit A convenient feature that saves you time; the money you receive using Interac e-Transfer can automatically be deposited into your account without requiring you to sign-in Email Yes Interac Q&A If you are sent money to your email or mobile number using Interac e-Transfer and are not registered for Autodeposit, you will first need to answer a security question provided by the sender in order to deposit the funds Email SMS Planned for 2022 Interac Send Ability to send money via Email or SMS Email SMS Planned for 2022 Interac Request Ability to request money via Email or SMS Email SMS Planned for 2022","title":"Which Interac features does Finaptic offer?"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#_2","text":"","title":""},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#what-is-finaptic-referred-to-as-when-selecting-a-financial-institution-to-e-transfer-money-to","text":"Within Interac, Finaptic Technologies is referred to as NatSolutions ; example visual below.","title":"What is Finaptic referred to as when selecting a Financial Institution to e-Transfer money to?"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#interac-auto-deposit","text":"Auto-deposit is a convenient feature that saves you time; the money you receive using Interac e-Transfer can automatically be deposited into your account without requiring you to sign-in to your account. Additionally, there is no need to go through the security Q&A process.","title":"Interac Auto-Deposit"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#autodeposit-api-overview","text":"","title":"Autodeposit API Overview"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#one-time-registration","text":"You just need to choose one or more email addresses to receive notifications and a dedicated account where the funds can be deposited. Any e-Transfers sent to the registered email address will automatically be deposited to the designated account. The registration request for Interac services is generated through the Interac API function. This request is generated via the CreateRegistrationRequest call. 4 data elements are required via the API call in order to generate this request: account_id - Provided for the account that the customer wishes auto-deposit transactions to be routed to account_alias - This is typically the user's email address, which can be used for both the account_alias field and the alias_email field alias_email alias_phone_number All other details from the customer file that are required for registration will be retrieved by Finaptic during the registration process. In the event that a user wants to change their registration to a different account, a new call with the new account ID must be made, at which point, the same process is to be followed.","title":"One-Time Registration"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#registration-errors","text":"A number of errors could occur in the registration process. These errors will be communicated either via our asynchronous API surface, or via the synchronous SDK capabilities which can be found in our SDK Guide . Error possibilities at time of registration are as follows: Code Description 301 Customer does not exist 379 Invalid mobile phone area code 380 Invalid mobile phone number 400 Mutually exclusive options are specified in the request 410 Customer is disabled 422 Retail name missing 451 Customer not registered for transfer product, currency code combination 540 Invalid bank account 543 Account-alias handle is already defined in e-Transfer system 545 Duplicated participant account-alias reference number 546 Invalid account-alias registration notification preference 547 Maximum number of account-alias registrations threshold exceeded 567 Invalid UUID format 591 Sender Account Identifier and Service Type combination is not supported.","title":"Registration Errors"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#managing-registrations","text":"A customer can set up multiple Autodeposit registrations, subject to a global limit (currently 5 for retail customers, 100 for small business customers, and 500 for corporate customers). Each email address or phone number can only be registered once across the entire e-Transfer network; however multiple email addresses and phone numbers can be registered to the same account. In online banking, the Recipient must be able to see a list of their Autodeposit registrations, showing the email address or phone number, the bank account associated with each, and the status of the registration (pending or active). For each Autodeposit registration, online banking gives the customer the option of cancelling a registration, or modifying it. Allowed modifications are changing the account details or notification preferences. The customer cannot change the email address or phone number associated with a registration \u2013 each new email address or phone number requires the creation of a new registration. A customer can initiate a new Autodeposit registration for an email address or mobile phone number that is already registered for Autodeposit. In this case, the verification notification explicitly asks the customer if they want to replace the old registration with the new one. The old registration remains active until such time as the new registration goes active (i.e. the customer has responded to the verification notification to confirm that they want to transfer the registration to the new account, and the new registration has been reviewed and allowed from the fraud perspective). Once the new registration goes active, the previous registration is automatically made inactive.","title":"Managing Registrations"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#fraud-check-of-autodeposit-registrations","text":"The biggest concern with Autodeposit registrations is the potential for a criminal to register someone else\u2019s email address or phone number to an account that the criminal has access to. Therefore, the registration process must be monitored. When the customer clicks the validation link from the notification to activate a new Autodeposit registration, the registration is scored by the fraud detection system. If nothing is suspicious, the registration becomes active immediately and the customer is informed of that. Registrations that appear suspicious are blocked until an Interac fraud analyst has had a chance to review the registration. In those cases the customer is told that the registration is being processed. If the registration seems legitimate, the fraud analyst unblocks it at which point it becomes active (and a confirmation notification is sent to the customer). As long as a registration is not active (e.g. is blocked), the associated email address or phone number is not used for Autodeposit. Anyone sending an transfer to that email address or phone number has to send a normal INTERAC e-Transfer (i.e. with security question and answer). Even after a registration has been activated, an Interac fraud analyst can block the registration if it becomes clear that the registration is not legitimate. This action will be used very sparingly, since there is significant impact on both senders and the recipient.","title":"Fraud Check of Autodeposit Registrations"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#expiration-of-registrations","text":"If an Autodeposit Registration remains unused for a long period of time, it will be removed from the system. For email addresses the period is 12 months ; for phone numbers it is 3 months . Whenever the registration is used for receiving an INTERAC e-Transfer, the timer is reset so the registration will not expire for another 3 or 12 months. A week before the registration is due to expire, the INTERAC e-Transfer system sends a notification to the email address or phone number associated with the registration, that allows the Recipient to renew the registration for another period by simply clicking on a confirmation button. There is an option to cancel or report the registration on the same notification as well. In case the recipient does not take any action on the sent expiry reminder notification, the Autodeposit registration is expired by the system and a de-registration notification is sent to the recipient.","title":"Expiration of Registrations"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#deposits","text":"When a deposit is sent to a customer who has registered for the Interac Autodeposit service, transactions will be routed to the account specified by the user during the registration call. The process is automated, and the customer will be notified via an email or text message generated by Interac. Interac Autodeposit transactions can be retrieved from the Core Transfers domain and from the Personal Financial Management domain. The PFM domain contains basic summary information regarding the transaction, while the Transfers domain contains a complete data set which may or may not be required for the end user to identify the transaction. When funds have been receieved by the user, the deposit can exist in 3 states: Begin Commited Reversed All deposit states will appear in the transaction history.","title":"Deposits"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#account-closures-and-deposit-failures","text":"A successful Autodeposit transfer depends on the success of the deposit action. If the deposit does not succeed at first, different things may happen: If the financial institution (FI) indicates a soft error (e.g. systems unavailable) then Interac retries the deposit a few times until failing the transfer. Failing the transfer means that the Sender will need to reclaim the funds (or, if Auto Reclaim is active, the funds will be pushed back to the Sender automatically). If the FI indicates a hard error (e.g. account is closed) then Interac not only fails the transfer, but deletes the Autodeposit registration.","title":"Account Closures and Deposit Failures"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#visualizing-the-autodeposit-experience","text":"","title":"Visualizing the Autodeposit Experience"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#autodeposit-registration","text":"Finaptic has provided the screen elements below for reference purposes. This process outlines a possible user flow representation of what your customer experience could resemble.","title":"Autodeposit Registration"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#registration-confirmation","text":"Once a registration request is submitted, Interac and Finaptic take care of the rest of the process. Users will receive an email at the email address that they provided from Interac, which will ask them to verify that they have selected NatSolutions as their auto-deposit provider. Once this verification step is complete, the registration process is also complete, which will result in a confirmation email being generated from Interac.","title":"Registration Confirmation"},{"location":"Implementation-Guide/Transfers/Interac/autodeposit/#_3","text":"","title":""},{"location":"Implementation-Guide/Transfers/Internal%20Transfers/Internal%20Transfers/","text":"Internal Transfers Overview \u00b6 Welcome to Finaptic\u2019s Internal Transfers Product that offers the ability to move money between 2 accounts owned by the same account owner. Guide Purpose \u00b6 This guide will Educate you on Finaptic\u2019s Account to Account Product Arm you with an API specifications for effective integration Visualizing Critical Experiences \u00b6 Internal Transfers \u00b6 Defined as the ability to move money between owned deposit accounts. Below is a visualization of Internal Transfers Money Movement . \u00b6 API Overview \u00b6 An overview of our Core Transfers API types are discoverable on the Core Transfers API Specification section.","title":"Internal Transfers Overview"},{"location":"Implementation-Guide/Transfers/Internal%20Transfers/Internal%20Transfers/#internal-transfers-overview","text":"Welcome to Finaptic\u2019s Internal Transfers Product that offers the ability to move money between 2 accounts owned by the same account owner.","title":"Internal Transfers Overview"},{"location":"Implementation-Guide/Transfers/Internal%20Transfers/Internal%20Transfers/#guide-purpose","text":"This guide will Educate you on Finaptic\u2019s Account to Account Product Arm you with an API specifications for effective integration","title":"Guide Purpose"},{"location":"Implementation-Guide/Transfers/Internal%20Transfers/Internal%20Transfers/#visualizing-critical-experiences","text":"","title":"Visualizing Critical Experiences"},{"location":"Implementation-Guide/Transfers/Internal%20Transfers/Internal%20Transfers/#internal-transfers","text":"Defined as the ability to move money between owned deposit accounts. Below is a visualization of Internal Transfers Money Movement .","title":"Internal Transfers"},{"location":"Implementation-Guide/Transfers/Internal%20Transfers/Internal%20Transfers/#_1","text":"","title":""},{"location":"Implementation-Guide/Transfers/Internal%20Transfers/Internal%20Transfers/#api-overview","text":"An overview of our Core Transfers API types are discoverable on the Core Transfers API Specification section.","title":"API Overview"},{"location":"SDK-Guide/","text":"SDK Guide \u00b6 This section contains information about our SDK offering. Two platform options are available at this time: Android SDK iOS SDK","title":"SDK Guide"},{"location":"SDK-Guide/#sdk-guide","text":"This section contains information about our SDK offering. Two platform options are available at this time: Android SDK iOS SDK","title":"SDK Guide"},{"location":"SDK-Guide/android-sdk/","text":"Finaptic Android SDK \u00b6 The Finaptic Android SDK provides a way to consume Finaptic APIs from your Android application. It is written in Kotlin. Note that the Finaptic APIs are strictly accessed through the SDK because it hides the underlying implementation that could change in the future. Android API version 27 or newer is required. Sample application \u00b6 A sample application demonstrates what is explained in the document. Make sure you can run it using your own SDK key. Here are the steps to run the sample app: Open the file MainActivity.kt and replace the SDK key with the one provided to you. The key is configured in the FinapticSDK.init(...) call. Run the sample app on a device or simulator. Press the button at the bottom of the first screen to execute the onboarding flow. Check the logs in Logcat (filter with \"Finaptic\"). You will see the sample app logs as well as the SDK logs. Let the whole flow execute. It can take more than one minute. In a sandbox environment, you may experience delays when using a client for the first time or after a small inactivity period. It is due to the backend services cold start. If an error arises, a dialog will be presented with the error. The flow couldn't complete properly and the full exception stack will be logged in Logcat. In this case, make sure the SDK key is the right one and retry. If the flow completes without error (no more requests are executing), you are good to integrate the SDK in your own app. ID and face capture with Acuant \u00b6 Please take a look at AcuantSample on how to use Acuant for document and face capture. You can read their official documentation here . Installation \u00b6 Copy Finaptic SDK contract and implementation aar files to app/libs . Require the following permissions in your AndroidManifest.xml file. <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\"> <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> <!-- Acuant --> <uses-permission android:name=\"android.permission.CAMERA\" /> <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/> <uses-feature android:name=\"android.hardware.camera\" /> <uses-feature android:name=\"android.hardware.camera.autofocus\" /> <meta-data android:name=\"com.google.android.gms.vision.DEPENDENCIES\" android:value=\"barcode,face\" tools:replace=\"android:value\"/> </manifest> Make sure you have these flags in your gradle.properties . android.enableJetifier=true android.useAndroidX=true Add the Finaptic SDK repositories in build.gradle . allprojects { repositories { google() mavenCentral() jcenter() // SDK libs path flatDir { dirs 'libs' } maven { url 'https://jitpack.io' } // Acuant maven { url 'https://raw.githubusercontent.com/Acuant/AndroidSdkMaven/main/maven/' } maven { url 'https://raw.githubusercontent.com/iProov/android/master/maven/' } } } Update app/build.gradle and sync. Add the Manifest Placeholders for the Auth0 Domain and the Auth0 Scheme properties. android { defaultConfig { // Auth0 domain and scheme provided by Finaptic manifestPlaceholders = [auth0Domain: \"\", auth0Scheme: \"demo\"] } } Target Java 8 byte code for Android and Kotlin plugins respectively. android { compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } kotlinOptions { jvmTarget = '1.8' } } Add the Finaptic SDK dependencies. Because the SDK is provided as aar files instead of maven-like dependencies, you must also add the direct SDK dependencies. dependencies { // Finaptic SDK in libs directory implementation(name:'finaptic-sdk-contract', ext:'aar') implementation(name:'finaptic-sdk-implementation', ext:'aar') // Finaptic SDK dependencies implementation 'io.grpc:grpc-okhttp:1.37.0' implementation 'io.grpc:grpc-stub:1.37.0' implementation(\"io.grpc:grpc-kotlin-stub-lite:1.0.0\") implementation platform('com.google.firebase:firebase-bom:27.0.0') implementation 'com.google.firebase:firebase-analytics-ktx' implementation 'com.google.firebase:firebase-auth-ktx' implementation('com.google.firebase:firebase-firestore-ktx') implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.4.1' implementation 'com.auth0.android:auth0:2.2.0' implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.1\") implementation 'com.amazonaws:aws-android-sdk-core:2.40.0' implementation 'com.amazonaws:aws-android-sdk-connect:2.40.0' implementation 'com.amazonaws:aws-android-sdk-connectparticipant:2.40.0' implementation 'com.amazonaws:aws-android-sdk-mobile-client:2.40.0' implementation \"com.squareup.okhttp3:okhttp:4.9.0\" implementation 'com.github.babbel:okhttp-aws-signer:1.0.1' // Acuant dependencies implementation 'com.acuant:acuantcommon:11.4.12' implementation 'com.acuant:acuantcamera:11.4.12' implementation 'com.acuant:acuantimagepreparation:11.4.12' implementation 'com.acuant:acuantdocumentprocessing:11.4.12' implementation 'com.acuant:acuantfacematch:11.4.12' implementation 'com.acuant:acuantfacecapture:11.4.12' implementation 'com.acuant:acuantpassiveliveness:11.4.12' } Initialization \u00b6 The SDK must be initialized before you can make any call. The FinapticSDK.init function must be invoked as a coroutine. The first parameter is a Context (ex: Activity, ApplicationContext). GlobalScope.launch { // Initialize the SDK with the key provided by Finaptic sdk = FinapticSDK.init(this@MainActivity, \"ewogICJzeW5jT25ib2...\") } The init function can be called multiple times, but a single instance will be returned (the first one created). This means you can't change the context or SDK key to get another instance. The context is used for initialization only and won't be retained by the SDK. It is recommended to initialize the SDK once and store the returned instance in your own variable or container. You can now start to use the SDK through multiple clients. OnboardingClient \u00b6 Onboarding flow consist of initiate, get, update, validate and finalize calls. Initiate application initiateApplication Get information getConsentElectronicCommunication getConsentPrivacyPolicy getConsentTermsOfUse getConsentProductAgreement Update information updatePersonalDetails updateContactDetails updateAccountDetails updateAddresses updateConsents updateCustomerResidency updateDisclosures updateEmployment updateCommunicationPreferences Validate application validateDocuments validateSelfie validateApplication acceptApplication Finalize application finalizeApplicationCreateCustomer finalizeApplicationCreateProduct OnboardingOperationResponseDetails \u00b6 OnboardingOperationResponseDetails are the common response fields for an onboarding application create or update message. applicationId : The UUID of the application the response is for. onboardingApplicationStatus : The updated application status. The value here is one of the following: \"UNDEFINED\" is reserved for error detection purposes. It should not be used directly. \"New Application\" describes an Application that has just been created. \"Data Collection describes an Application that has successfully performed an Update call or failed a ValidateSelfieRequest or a ValidateDocumentsRequest. \"KYC In Progress\" describes an Application that has successfully performed a ValidateSelfieRequest or ValidateDocumentsRequest. \"KYC Success\" describes an Application that has successfully performed KYC checks as a result of a ValidateApplicationRequest. \"KYC Failed\" describes an Application that has failed KYC as a result of a ValidateApplicationRequest. \"KYC Rejected\" describes an Application that has no remaining KYC attempts. \"Application Accepted\" describes an application that has successfully completed an AcceptApplicationRequest. \"Application Processed\" describes an application that has been successfully completed. \"Application Cancelled\" describes an application that has been cancelled by the customer. \"Application Rejected\" describes an application that has been rejected and cannot be continued. This is used when a more descriptive rejection status is not available. requestStatus : The success status of the request. requestStatusReason : The detailed reason for the request status. Deprecated : Use requestReasonCodes instead. remainingAllowedRetries : The remaining KYC retries allowed. failureStatusCodes : The list of codes explaining the reason of the request outcome. This list will only be populated when request status is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The list will otherwise be empty. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.FAILURE_CODE . verificationNeeded : The list of verifications that will be needed be performed in order to complete the application. See OnboardingVerification . consents : The list of Consents required as part of this onboarding application. See TermsAndConditions . disclosures : The list of Consents required as part of this onboarding application. See TermsAndConditions . OnboardingVerification \u00b6 Verification needed for an onboarding application name : The name of the OnboardingVerification. \"KYC\" means this application will perform KYC validation during the validate phase (ValidateDocumentsRequest, ValidateSelfieRequest and ValidateApplicationRequest) before being able to complete onboarding application. \"ProfileCreation\" means that this application requires input of basic customer information, without doing full KYC, before being able to complete onboarding application. \"AccountUsage\" means that this application needs to collect Account Usage information using UpdateAccountDetailsRequest before being able to complete onboarding application. requiredUpdates : The list of all Update request that are required as part of this verification (eg : [UpdateAccountDetailsRequest, UpdateConsentsRequest]). TermsAndConditions \u00b6 TermsAndConditions is either a consent or a disclosure. documentType : The type of the terms and conditions. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.CONSENT_TYPE or ReferenceDataTypes.DISCLOSURE_TYPE . documentNameAndVersion : The URL of the versioned terms and conditions document the customer needs to review and accept. neededBeforeValidation : Whether or not the terms and conditions need to be accepted before calling any of the validate requests. initiateApplication \u00b6 This is the only call that must be executed prior any other one when processing an onboarding application. val response = sdk.onboardingClient.initiateApplication( InitiateApplicationRequest( productId = \"prepaidV1\" ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } val applicationId = response.basicDetails.applicationId Log.d(TAG, \"Verification needed for an onboarding application:\") initiateApplicationResponse.basicDetails.verificationNeeded.forEach { Log.d(TAG, it.toString()) } InitiateApplicationRequest \u00b6 bundleId : The unique identifier of the bundle being applied for. \"despositV1\" : Deposit account without card. \"prepaidV1\" : Account and prepaid-card. \"creditcardV1\" : Account with credit card. \"productlessV1\" : Onboard a customer and do not validate his identity. \"kycV1\" : Onboard a customer, but do validate his identity. InitiateApplicationResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . The returned application CONSENT TYPE and DOCUMENT NAME AND VERSION are required in consent update request. getConsentElectronicCommunication \u00b6 val response = sdk.onboardingClient.getConsentElectronicCommunication() getConsentTermsOfUse \u00b6 val response = sdk.onboardingClient.getConsentTermsOfUse() getConsentProductAgreement \u00b6 val response = sdk.onboardingClient.getConsentProductAgreement() getConsentPrivacyPolicy \u00b6 val response = sdk.onboardingClient.getConsentPrivacyPolicy() The returned application ID is required in every other request. updatePersonalDetails \u00b6 val response = sdk.onboardingClient.updatePersonalDetails( UpdatePersonalDetailsRequest( onboardingApplicationId = applicationId, customerPersonalDetails = PersonalDetails( firstName = \"John\", middleName = null, lastName = \"Miller\", dateOfBirth = LocalDate.of(1941, 5, 24), alias = null ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } UpdatePersonalDetailsRequest \u00b6 Used to update the customer personal details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerPersonalDetails : See personal details . UpdatePersonalDetailsResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . PersonalDetails \u00b6 firstName : The customer first name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. middleName : The customer middle name. This value is optional and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. lastName : The customer last name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. dateOfBirth : The customer's date of birth. alias : The customer alias. This value is optional and has a maximum of 20 characters. Accepts alphanumeric input without special characters. updateContactDetails \u00b6 val contactPhoneNumber = PhoneNumber(smsCompatible = true, number = \"+15141234567\") val response = sdk.onboardingClient.updateContactDetails( UpdateContactDetailsRequest( onboardingApplicationId = applicationId, customerContactDetails = ContactDetails( customerEmail = \"john.miller@mail.com\", contactPhoneNumber = contactPhoneNumber ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } UpdateContactDetailsRequest \u00b6 Used to update the customer contact details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerContactDetails : See contact details . UpdateContactDetailsResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . ContactDetails \u00b6 contactPhoneNumber : The contact phone number. This value is optional and must be in a valid phone number format. customerEmail : The contact email address. This value is required and must be in a valid email address format. updateAccountDetails \u00b6 Fetch account purpose and source of funds values from reference data client . dataType = ReferenceDataTypes.ACCOUNT_PURPOSE dataType = ReferenceDataTypes.SOURCE_OF_FUNDS val response = sdk.onboardingClient.updateAccountDetails( UpdateAccountDetailsRequest( onboardingApplicationId = applicationId, accountDetails = AccountUsageDetails( accountPurpose = accountPurposeCode, primarySourceOfFunds = listOf(sourceOfFundsCode), authorizedThirdPartyUsage = authorizedThirdPartyUsage ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } UpdateAccountDetailsRequest \u00b6 Used to update the customer account details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. accountDetails : See account usage details . UpdateAccountDetailsResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . AccountUsageDetails \u00b6 Providing the source of funds and purpose for applying for an Account. accountPurpose : The intended purpose of the Account. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.ACCOUNT_PURPOSE . primarySourceOfFunds : The values stored here are a collection of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.SOURCE_OF_FUNDS . authorizedThirdPartyUsage : Indicates wether or not the account will be used on behalf of third parties not otherwise identified as owners or authorized users. True means that account will be used on behalf of third parties while false means that account will not be used on behalf of third parties. updateAddresses \u00b6 You need to use AddressClient to get the user's address. val response = sdk.onboardingClient.updateAddresses( UpdateAddressesRequest( onboardingApplicationId = applicationId, addresses = listOf(address) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } UpdateAddressesRequest \u00b6 Used to update the addresses occupied by the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. addresses : Collection of addresses occupied by the customer. See Address . UpdateAddressesResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . Address \u00b6 type : The type of Address being represented. Must be either \"HOME\" or \"WORK\" (required). organization : The first line of the Address. This value is required and has a maximum of 300 characters. line1 : The first line of the Address. This value is required and has a maximum of 300 characters. line2 : The second line of the Address. This value is optional, and has a maximum of 300 characters. line3 : The third line of the Address. This value is optional, and has a maximum of 300 characters. line4 : The fourth line of the Address. This value is optional, and has a maximum of 300 characters. line5 : The fifth line of the Address. This value is optional, and has a maximum of 300 characters. line6 : The sixth line of the Address. This value is optional, and has a maximum of 300 characters. line7 : The seventh line of the Address. This value is optional, and has a maximum of 300 characters. line8 : The eighth line of the Address. This value is optional, and has a maximum of 300 characters. locality : The local sub administrative area such as the municipality or community name. In Canadian and US addresses, this corresponds to the city or town name. This value is optional and has a maximum of 150 characters. e.g. Toronto, Orlando. dependentLocality : The municipality or community name of the major postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. doubleDependentLocality : The municipality or community name of the local postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. administrativeArea : The name of the first level administrative area. This value is optional and has a maximum of 150 characters. e.g. For US this would be 'State' and Canada this would be 'Province' subAdministrativeArea : The name of the second level administrative area. This value is optional and has a maximum of 150 characters. e.g. For a city use 'City', county use 'County', etc. area : The name of country first level administrative subdivision area in the address. For Canada, this is name of the province and for the US this is the name of the State. This field is required and has postalCode : The local postal code for routing mail to the address and should contain the ZIP code for US addresses. This field is required and has a maximum of 150 characters. country : The name of the country for the Address. This value is required and has a maximum of 50 characters. updateConsents \u00b6 Fetch consent values from reference data client with dataType = ReferenceDataTypes.CONSENT_TYPE . val response = sdk.onboardingClient.updateConsents( UpdateConsentsRequest( onboardingApplicationId = applicationId, consents = listOf( Consent( consentType = consentType.code, documentNameAndVersion = \"https://must-be-a-well-formed-url.com/document/1.0\", consentTimestamp = Instant.now(), viewTimestamp = Instant.now() ) ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } UpdateConsentsRequest \u00b6 Used to update the consents received from the customer for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. consents : Collection of consents. See Consent . UpdateConsentsResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . Consent \u00b6 Consent is indicating the receipt of a requested customer Consent. consentType : The type of Consent received from the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.CONSENT_TYPE . documentNameAndVersion : The name and version of the document in URL format that the customer consented to. viewTimestamp : The UTC timestamp when the customer viewed the document. updateCustomerResidency \u00b6 val response = sdk.onboardingClient.updateCustomerResidency( UpdateCustomerResidencyRequest( onboardingApplicationId = applicationId, residency = CustomerResidency( isCanadianTaxResident = true, citizenship = \"CA\" ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } UpdateCustomerResidencyRequest \u00b6 Uused to update the customer residency status in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. residency : The customer residency status. See CustomerResidency . UpdateCustomerResidencyResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . CustomerResidency \u00b6 Contains the residency status details of the customer. isCanadianTaxResident : The Canadian residency status. This is true if the customer is a Canadian resident, false otherwise. otherResidences : A collection of other countries where the customer has residence. At least one is required if not a Canadian resident. See OtherResidence . sinToken : A tokenized UUID representation of the customer SIN number. citizenship : The primary or current citizenship of the customer. The format is an ISO 3166 Country alpha-2 code (e.g. US, CA, FR). OtherResidence \u00b6 Alternate countries and places of residence. otherResidenceCountry : The name of the other country of residence. tinToken : A tokenized UUID representation of the unique TIN for the country of residence. Optional. citizenship : The citizenship status in the country of residence. Required if residence country is US or Canada. updateDisclosures \u00b6 Fetch disclosure type values from reference data client with dataType = ReferenceDataTypes.DISCLOSURE_TYPE . val response = sdk.onboardingClient.updateDisclosures( UpdateDisclosuresRequest( onboardingApplicationId = applicationId, disclosures = listOf( Disclosure( disclosureType = disclosureType.code, documentNameAndVersion = \"https://must-be-a-well-formed-url.com/document/1.0\", timestamp = Instant.now() ) ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } UpdateDisclosuresRequest \u00b6 Used to update the disclosures received by the customer in the onboarding application onboardingApplicationId : The UUID of the onboarding application to update. disclosures : Collection of disclosures. See Disclosure . UpdateDisclosuresResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . Disclosure \u00b6 Customer receipt of a documented Disclosure. disclosureType : The type of Disclosure sent to the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.DISCLOSURE_TYPE . timestamp : The UTC timestamp when the customer viewed the document. documentNameAndVersion : Name and version of the disclosure document in URL format that the customer viewed. updateEmployment \u00b6 Fetch employment status from reference data client . dataType = ReferenceDataTypes.OCCUPATION dataType = ReferenceDataTypes.INDUSTRY dataType = ReferenceDataTypes.EMPLOYMENT_STATUS val phoneNumber = PhoneNumber(smsCompatible = true,number = \"+14507654321\") val response = sdk.onboardingClient.updateEmployment( UpdateEmploymentRequest( onboardingApplicationId = applicationId, employmentInfo = Employment( employmentStatus = employmentStatus.code, employerName = \"Finaptic\", occupation = occupation.code, industry = industry.code, workAddress = address, phoneNumber = phoneNumber, startDate = LocalDate.of(2019, 1, 1), endDate = LocalDate.of(2020, 12, 31) ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } UpdateEmploymentRequest \u00b6 Used to update the customer employment information in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. employmentInfo : Employment information. See Employment . UpdateEmploymentResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . Employment \u00b6 Employment defines the details of Employment for the customer being onboarded. employmentStatus : The status of Employment. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.EMPLOYMENT_STATUS . employerName : The full employer name. The value is required and has a maximum of 50 characters. industry : The industry code the Employment is in. This value is required and has a maximum of 50 characters. The value is retrieved from the / ReferenceDataClient with dataType set to ReferenceDataTypes.INDUSTRY . occupation : The roles and duties the customer performs for the employer. This value is optional and has a maximum of 50 characters. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.OCCUPATION . If the employment status is 'EMPLOYMENT_STATUS_UNEMPLOYED', 'EMPLOYMENT_STATUS_RETIRED', 'EMPLOYMENT_STATUS_STUDENT_UNEMPLOYED', or 'EMPLOYMENT_STATUS_HOMEMAKER' then the Occupation field must be left empty. startDate : The month and year the customer started this position. endDate : The month and year the customer no longer held this position. workAddress : The 'type' field must be set to 'WORK'. Required. See Address . phoneNumber : The phone number of the employer. Required. updateCommunicationPreferences \u00b6 Fetch communication preferences from reference data client with dataType = ReferenceDataTypes.COMMUNICATION_PREFERENCE . val response = sdk.onboardingClient.updateCommunicationPreferences( UpdateCommunicationPreferencesRequest( onboardingApplicationId = applicationId, customerCommunicationPref = communicationPreferences.code ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } UpdateCommunicationPreferencesRequest \u00b6 Used to update the communication preferences of the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerCommunicationPref : The customer communication preference. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.COMMUNICATION_PREFERENCE . customerCommunicationLanguage : The customer communication language. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.LANGUAGE . UpdateCommunicationPreferencesResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . createFileUploadURL \u00b6 Create upload url for document front, back and selfie. val fileUploadURL = sdk.onboardingClient.createFileUploadURL( CreateFileUploadUrlRequest( onboardingApplicationId = applicationId ) ) CreateFileUploadUrlRequest \u00b6 onboardingApplicationId : The UUID representing the onboarding application that requested a file upload URL. CreateFileUploadUrlResponse \u00b6 filename : The generated name for the file to upload. This value must be used for ValidateDocumentsRequest or ValidateSelfieRequest . uploadUrl : The URL to use to upload the file. validateDocuments \u00b6 Fetch document types from reference data client with dataType = ReferenceDataTypes.DOCUMENT_TYPE . val response = sdk.onboardingClient.validateDocuments( ValidateDocumentsRequest( onboardingApplicationId = applicationId, documentDetails = listOf( DocumentInfo( documentType = documentType.code, documentCountry = \"CA\", frontImageFileName = idFrontFileUpload.filename, backImageFileName = idBackFileUpload.filename, // The state issuing the document used to identify the applicant. // documentState must be set when document type is driver license. // The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataTypes.STATE concatenate with country code retrieved from dataType set to ReferenceDataTypes.COUNTRY. // e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...) documentState = documentStateType.code ) ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected ) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. val failureStatusCodes = response.basicDetails.failureStatusCodes if (failureStatusCodes.isNotEmpty()) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.FAILURE_CODE. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY Log.d(TAG, \"failureStatusCodes: $failureStatusCodes\") } } ValidateDocumentsRequest \u00b6 Used to perform operation of validating the identification documents received from the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to validate. documentDetails : Collection of documents to validate. See DocumentInfo . ValidateDocumentsResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.FAILURE_CODE . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\" DocumentInfo \u00b6 Details of an onboarding document collected from the customer to prove identity. documentType : The type of document used for identification. The value here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.DOCUMENT_TYPE . e.g. \"DOCUMENT_TYPE_CANADIAN_DRIVERS_LICENSE\" or \"DOCUMENT_TYPE_CANADIAN_PASSPORT\" . documentCountry : The country the document was issued for. frontImageFileName : The file name of the uploaded image of the front of the document. (required, file size <4MB) backImageFileName : The file name of the uploaded image of the back of the document. (required, file size <4MB) documentState : The state issuing the document used to identify the applicant. The value here is one of the code values retrieved from the ReferenceDataClient with dataType set to \"STATE_\" concatenate with country code retrieved from dataType set to ReferenceDataTypes.COUNTRY . e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...) validateSelfie \u00b6 val response = sdk.onboardingClient.validateSelfie( ValidateSelfieRequest( onboardingApplicationId = applicationId, fileName = fileUpload.filename ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected ) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. val failureStatusCodes = response.basicDetails.failureStatusCodes if (failureStatusCodes.isNotEmpty()) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.FAILURE_CODE. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY Log.d(TAG, \"failureStatusCodes: $failureStatusCodes\") } } ValidateSelfieRequest \u00b6 Used to perform operation of validating the selfie pictures received from the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to validate. fileName : The name of the selfie file to validate. (required, file size <4MB) ValidateSelfieResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.FAILURE_CODE . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\" validateApplication \u00b6 val response = sdk.onboardingClient.validateApplication( ValidateApplicationRequest( onboardingApplicationId = applicationId ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected ) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. val failureStatusCodes = response.basicDetails.failureStatusCodes if (failureStatusCodes.isNotEmpty()) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.FAILURE_CODE. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY Log.d(TAG, \"failureStatusCodes: $failureStatusCodes\") } } ValidateApplicationRequest \u00b6 Used to perform operation of validating the entire onboarding application and all documents received from the customer. onboardingApplicationId : The UUID of the onboarding application to validate. ValidateApplicationResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.FAILURE_CODE . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\" acceptApplication \u00b6 val response = sdk.onboardingClient.acceptApplication( AcceptApplicationRequest( onboardingApplicationId = applicationId ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } AcceptApplicationRequest \u00b6 Used to perform operation of accepting the onboarding application received from the customer. onboardingApplicationId : The UUID of the onboarding application to accept. AcceptApplicationResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . finalizeApplicationCreateCustomer \u00b6 The user needs to be authenticated before you create a customer. val response = sdk.onboardingClient.finalizeApplicationCreateCustomer( FinalizeApplicationCreateCustomerRequest( onboardingApplicationId = applicationId ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } FinalizeApplicationCreateCustomerRequest \u00b6 Used to perform operation of creating the customer for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to create a customer for. FinalizeApplicationCreateCustomerResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . customerId : The UUID representing the newly created customer. finalizeApplicationCreateProduct \u00b6 val response = sdk.onboardingClient.finalizeApplicationCreateProduct( FinalizeApplicationCreateProductRequest( onboardingApplicationId = applicationId ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } FinalizeApplicationCreateProductRequest \u00b6 Used to perform operation of creating the product for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to create the product for. FinalizeApplicationCreateProductResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . products : Collection of products created. See OnboardedProduct . cancelApplication \u00b6 Canceling the onboarding application. val request = CancelApplicationRequest(onboardingApplicationId = applicationId) val response = sdk.onboardingClient.cancelApplication(request) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } CancelApplicationRequest \u00b6 onboardingApplicationId : The UUID of the onboarding application to cancel. CancelApplicationResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . OnboardedProduct \u00b6 productId : The UUID of the onboarded product. sourceDomain : The source domain of the onboarded product. Authorized Users \u00b6 InviteAuthorizedUser \u00b6 try { val request = InviteAuthorizedUserRequest( invitedCustomerIdentifier = \"test@finaptic.com\", accountId = account.id) val response = sdk.onboardingClient.inviteAuthorizedUser(request) Log.d(TAG, \"Invite authorized user success with id ${response.invitation.invitationId}\") } catch (e: FinapticException) { Log.e(TAG, \"Invite authorized user error\", e) } InviteAuthorizedUserRequest \u00b6 Used to perform operation of inviting a user to join an account as an authorized user. invitedCustomerIdentifier : The identifier to be used to lookup for the invited customer. This can either the username, or the email address of the customer to invite. If the identifier does not map to any known user, the operation will succeed, if this occurs the invitation will expire automatically after a period of time, without having been accepted or declined. accountId : The ID of the account on which an authorized user is to be added. The customer issuing the request must be an Owner for the account. invitationMetadata : Optional. Additional metadata to attach to the invitation, to be consumed by the invited user before accepting the invitation. InviteAuthorizedUserResponse \u00b6 invitation : The resulting invitation created by the InviteAuthorizedUserRequest. See AuthorizedUserInvitation for details. Errors: If the customer mapping to this identifier is already an Owner or an Authorized User for the account, then the operation will fail with a FinapticExceptionCode.ALREADY_EXISTS code, and provide a message indicating the reason for the conflict. If there is already an invitation that was issued for this account, for the invited user, the operation will fail with an FinapticExceptionCode.ALREADY_EXISTS code, and provide a message indicating the reason for the conflict. If the customer issuing the request isn't an Owner, then the operation will fail with a FinapticExceptionCode.PERMISSION_DENIED code, and provide a message indicating the reason. If there is already an invitation that was issued for this account, for the invited customer, the operation will fail with a FinapticExceptionCode.ALREADY_EXISTS code, and provide a message indicating the reason for the conflict. AuthorizedUserInvitation \u00b6 invitationId : The unique identifier of the invitation. This value is required to Accept, Decline, or Confirm invitations. issuerCustomerId : The customer ID of the person that issued the invitation. invitedCustomerId : The customer ID of the person that was invited to join the account as an authorized user. accountId : The account ID for which an invitation was sent. status : The current status of the invitation. Refer to AuthorizedUserInvitationStatus enumeration for details on statuses and meaning. creationTime : The time at which the invitation was issued. expirationTime : Time at which it will no longer be possible for the invited customer to Accept the invitation. invitationMetadata : Additional metadata that has been attached to the invitation. This will contain the metadata specified by the last operation on the invitation. AuthorizedUserInvitationStatus enum \u00b6 pending : Represents an invitation that is waiting for an accept or decline response from the invited user. accepted : Represents an invitation that was accepted by the invited user, and pending completion by the issuer of the invitation. declined : Represents an invitation that was declined by the invited user. A declined invitation cannot be completed. completed : Represents an invitation that was successfully completed by the issuer of the invitation. In this status, the invited customer has successfully joined the account as an Authorized User. expired : Represents an invitation that wasn't accepted or declined within the allotted time. An expired invitation cannot be accepted or declined. AcceptAuthorizedUserInvitation \u00b6 try { val request = AcceptAuthorizedUserInvitationRequest(invitationId = invitation.invitationId) sdk.onboardingClient.acceptAuthorizedUserInvitation(request) Log.d(TAG, \"Accepted authorized user invitation\") } catch (e: FinapticException) { Log.e(TAG, \"Accept authorized user invitation error:\", e) } AcceptAuthorizedUserInvitationRequest \u00b6 Used to perform operation of accepting an invitation issued to the user to join an account as an authorized user. invitationId : The ID of the invitation to accept. This must represent a valid invitation that was issued to the current user. invitationMetadata : Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter before confirming the invitation. AcceptAuthorizedUserInvitationResponse \u00b6 Response intentionally left without fields. Errors: If the current user is not the user the invitation was issued to, then the operation will fail with a FinapticExceptionCode.PERMISSION_DENIED code, and provide a message indicating the reason for the conflict. If the invitation is not in the Pending status, the operation will fail with a FinapticExceptionCode.FAILED_PRECONDITION code, and provide a message indicating that status was invalid. If the invitation has expired, the operation will also fail with a FinapticExceptionCode.FAILED_PRECONDITION code, and provide a message indicating that invitation has expired. DeclineAuthorizedUserInvitation \u00b6 try { val request = DeclineAuthorizedUserInvitationRequest(invitationId = invitation.invitationId) sdk.onboardingClient.declineAuthorizedUserInvitation(request) Log.d(TAG, \"Declined authorized user invitation\") } catch (e: FinapticException) { Log.e(TAG, \"Decline authorized user invitation error\", e) } DeclineAuthorizedUserInvitationRequest \u00b6 invitationId : The ID of the invitation to decline. This must represent a valid invitation that was issued to the current user. invitationMetadata : Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter when reviewing invitation status. DeclineAuthorizedUserInvitationResponse \u00b6 Response intentionally left without fields. Errors: If the current user is not the user the invitation was issued to, then the operation will fail with a FinapticExceptionCode.PERMISSION_DENIED code, and provide a message indicating the reason for the conflict. If the invitation is not in the Pending status, the operation will fail with a FinapticExceptionCode.FAILED_PRECONDITION code, and provide a message indicating that status was invalid. If the invitation has expired, the operation will also fail with a FinapticExceptionCode.FAILED_PRECONDITION code, and provide a message indicating that invitation has expired. ConfirmAuthorizedUserInvitation \u00b6 try { val request = ConfirmAuthorizedUserInvitationRequest(invitationId = invitation.invitationId) sdk.onboardingClient.confirmAuthorizedUserInvitation(request) Log.d(TAG, \"Confirmed authorized user invitation\") } catch (e: FinapticException) { Log.e(TAG, \"Confirm authorized user invitation error:\", e) } ConfirmAuthorizedUserInvitationRequest \u00b6 Used to perform operation of confirming an invitation that was accepted by the invited customer. invitationId : The ID of the invitation to confirm. ConfirmAuthorizedUserInvitationResponse \u00b6 Response intentionally left without fields. Errors: If the current user is not the issuer of the invitation, then the operation will fail with a FinapticExceptionCode.PERMISSION_DENIED code, and provide a message indicating the reason for the conflict. If the invitation is not in the Accepted status, the operation will fail with a FinapticExceptionCode.FAILED_PRECONDITION code, and provide a message indicating that status was invalid. RemoveAuthorizedUser \u00b6 try { val request = RemoveAuthorizedUserRequest( accountId = invitation.accountId, authorizedUser = invitation.invitedCustomerId) sdk.onboardingClient.removeAuthorizedUser(request) Log.d(TAG, \"Removed authorized user\") } catch (e: FinapticException) { Log.e(TAG, \"Remove authorized user error:\", e) } A user can remove an authorized user only if they have completed the step up authentication with a scope set to \"remove:authorized_user\" . try { val request = SignInRequest(credential = credential, scope = \"remove:authorized_user\") sdk.authenticationClient.signIn(request) } catch(e: FinapticException) { Log.e(TAG, \"Sign in error:\", e) } RemoveAuthorizedUserRequest \u00b6 Used to remove an authorized user from the provided Account. accountId : The ID of the Account where the authorized is removed from. authorizedUser : The ID of the authorized user to add to the Account. RemoveAuthorizedUserResponse \u00b6 authorizedUsers : The resulting list of authorized users of the Account. GetInvitations \u00b6 Returns the list of invitations for the current user. This will include invitations issued by the current user, as well as invitations where the current user is the invited customer. This operation always return all invitations, including invitations that are pending, expired, have been accepted, declined, require confirmation or that have already been completed. try { val response = sdk.onboardingClient.getInvitations(request = GetAuthorizedUserInvitationsRequest()) response.invitations.forEach { Log.d(TAG, \"Invitation with ${it.status} status and id ${it.invitationId} \") } } catch (e: FinapticException) { Log.e(TAG, \"Get invitations error:\", e) } GetAuthorizedUserInvitationsRequest \u00b6 At this moment, there are no configurable options for this request. GetAuthorizedUserInvitationsResponse \u00b6 invitations : The list of invitations for the current user. See AuthorizedUserInvitation ReferenceDataClient \u00b6 ReferenceDataTypes: ADDRESS_TYPE CONSENT_TYPE DISCLOSURE_TYPE DOCUMENT_TYPE COMMUNICATION_PREFERENCE ACCOUNT_PURPOSE SOURCE_OF_FUNDS EMPLOYMENT_STATUS ONBOARDING_STATUS COUNTRY STATE OCCUPATION INDUSTRY LANGUAGE FAILURE_CODE val accountPurposes = sdk.referenceDataClient .getReferenceDataByType( GetReferenceDataByTypeRequest( dataType = ReferenceDataTypes.ACCOUNT_PURPOSE, locale = \"EN_CA\" ) ).data AddressClient \u00b6 Address client provides a list of suggested addresses. Make sure to use debouncing or throttling when calling this function on user input. val suggestionsResponse = sdk.addressClient.getSuggestions( AddressSuggestionsRequest( onboardingApplicationId = applicationId, pattern = \"123\", addressType = AddressClient.HOME_ADDRESS_TYPE ) ) AuthenticationClient \u00b6 signUp \u00b6 val credential = Credential( email = \"sample@finaptic.com\", password = \"Password1234!@#$\", username = \"Username\" ) try { sdk.authenticationClient.signUp(SignUpRequest(credential)) Log.d(TAG, \"Sign up success. Proceed to sign in.\") } catch (e: FinapticException) { Log.e(TAG, \"Sign up error\", e) } Possible error codes: FinapticExceptionCode.SIGNUP_CREDENTIAL_ERROR If the password used doesn't comply with the password policy for the connection. The user your are attempting to sign up is invalid. The chosen password is too weak FinapticExceptionCode.SIGNUP_ERROR : The chosen password is based on user information. eg. password contains email, username contains emails etc. The user you are attempting to sign up has already signed up. The username you are attempting to sign up with is already in use. The message property of FinapticException will give more information about the error. Credential \u00b6 email : Used to signUp or signIn the user. (requred for signUp) username : Username can be up to 15 characters, contain alphanumeric characters and the following characters: '_', '+', '-', '.', '!', '#', '$', ''', '^', '`', '~' and '@'.maxLength Can be used to sign up and sign in the user. It might be optional. password : Password must have at least 12 characters, 1 lowercase, 1 uppercase, 1 number and should not contain common words or email parts. signIn \u00b6 try { val signInResult = sdk.authenticationClient.signIn(SignInRequest(credential)) } catch (e: FinapticException) { Log.e(TAG, \"Sign in error\", e) } Possible error codes: FinapticExceptionCode.SIGNIN_ERROR The password provided for sign up/update has already been used (reported when password history feature is enabled). The account is blocked due to too many attempts to sign in. If the password has been leaked and a different one needs to be used. FinapticExceptionCode.SIGNIN_INVALID_PASSWORD The username and/or password used for authentication are invalid. The password provided does not match the connection's strength requirements. FinapticExceptionCode.MFA_ERROR : The multi-factor authentication (MFA) code provided by the user is invalid/expired. The administrator has required multi-factor authentication, but the user has not enrolled. The user must provide the multi-factor authentication code to authenticate. FinapticExceptionCode.SIGNIN_USER_BLOCKED : The account is blocked. You can ask the user to contact support. The message property of FinapticException will give more information about the error. currentAuthState \u00b6 If the accessToken has expired, the client automatically uses the refreshToken and renews the credentials for you. Returns null if the user is unauthenticated. val currentState = sdk.authenticationClient.currentAuthState() refreshAuthState \u00b6 Returns null if the user is unauthenticated. val currentState = sdk.authenticationClient.refreshAuthState() signOut \u00b6 sdk.authenticationClient.signOut() resetPassword \u00b6 If the call is successful and the email is registered, the user receives a password reset email. try { val email = \"sample@finaptic.com\" sdk.authenticationClient.resetPassword(request = ResetRequest(email = email)) } catch (e: FinapticException) { Log.d(TAG, \"Reset Password error\", e) } CoreBankingClient \u00b6 getAccountDetails \u00b6 val request = GetAccountDetailsRequest(accountId) val response = sdk.coreBankingClient.getAccountDetails(request) val status = response.status val accruedInterest = response.accruedInterest AuthState \u00b6 accessToken : Current access token. refreshToken : Current refresh token. CoreCardClient \u00b6 getCard \u00b6 Retrieves generic details about a single Card . try { val request = GetCardRequest(cardId = cardId) val card = sdk.coreCardClient.getCard(request) Log.d(TAG, \"Get card success with id ${response.id}\") } catch (e: FinapticException) { Log.d(TAG, \"Get card error\", e) } GetCardRequest \u00b6 cardId : The ID of the Card to retrieve. listCards \u00b6 Lists all Cards associated to the current user. try { val request = ListCardsRequest( pageSize = 10, pageToken = null) val response = sdk.coreCardClient.listCards(request) Log.d(TAG, \"List card success\") } catch (e: FinapticException) { Log.d(TAG, \"List card error\", e) } ListCardsRequest \u00b6 pageSize : The maximum number of Cards to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListCardsResponse ). When no value is specified, then the initial page will be returned. ListCardsResponse \u00b6 cards : The list of Cards requested. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListCardsRequest ). When no value is returned in this field, then no further data exists to be listed. revealCardInfo \u00b6 Reveals card information to the user. try { sdk.coreCardClient.revealCardInfo(cardId) Log.d(TAG, \"Reveal card info success\") } catch (e: FinapticException) { Log.d(TAG, \"Reveal card info error\", e) } A user can reveal card info only if they have completed the step up authentication with a scope set to \"view:card_number\" . try { val request = SignInRequest(credential = credential, scope = \"view:card_number\") sdk.authenticationClient.signIn(request) Log.d(TAG, \"You may call revealCardInfo\") } catch (e: FinapticException) { Log.d(TAG, \"Sign in error\", e) } createAuthorizedUserCard \u00b6 try { val card = AuthorizedUserCard( cardType = CardType.CARD_TYPE_PREPAID, accountId = accountId ) val request = CreateAuthorizedUserCardRequest( card = card, authorizedUserId = authorizedUserId ) val response = sdk.coreCardClient.createAuthorizedUserCard(request) Log.d(TAG, \"Create authorized user card success: ${response.card}\") } catch (e: FinapticException) { Log.d(TAG, \"Create authorized user card error\", e) } CreateAuthorizedUserCardRequest \u00b6 card : Refer to AuthorizedUserCard for details. authorizedUserId : The ID of the authorized user who will be the owner of the newly created card CreateAuthorizedUserCardResponse \u00b6 card : Refer to Card for details. Possible error codes: FinapticExceptionCode.CARDS_INVALID_ACCOUNT : If the account passed as argument does not exist or is not owned by the current user. FinapticExceptionCode.CARDS_INVALID_AUTH_USER : If the user ID passed as argument does not exist or is not an authorized user of the account. AuthorizedUserCard \u00b6 cardType : The type of the Card. See CardType . accountId : The ID of the Account that will be linked to this Card. description : Optional description for this Card. lockCard \u00b6 This feature allows customers to prevent transactions from getting authorized while they confirm if a card is effectively lost. After finding the card if it is the case, they can re-enable the card by using the unlock function, see unlockCard . try { val request = LockCardRequest(cardId = cardId) sdk.coreCardClient.lockCard(request) Log.d(TAG, \"Lock card success\") } catch (e: FinapticException) { Log.d(TAG, \"Lock card error\", e) } LockCardRequest \u00b6 cardId : The ID of the card to be locked. LockCardResponse \u00b6 card : The card in its current status as result of the operation. See Card . Errors FinapticExceptionCode.CARDS_INVALID_CARD_ID : If the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user. unlockCard \u00b6 This feature allows customers to re-enable transactions on the card if they find it after suspecting it lost. try { val request = UnlockCardRequest(cardId = cardId) sdk.coreCardClient.unlockCard(request) Log.d(TAG, \"Unlock card success\") } catch (e: FinapticException) { Log.d(TAG, \"Unlock card error\", e) } UnlockCardRequest \u00b6 cardId : The ID of the locked card to be unlocked. UnlockCardResponse \u00b6 card : The card in its current status as result of the operation. See Card . Errors FinapticExceptionCode.CARDS_INVALID_CARD_ID : If the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user. Card \u00b6 id : The ID of this Card. cardType : The type of the Card. See CardType . accountId : The ID of the Account linked to this Card. description : The description for this Card. state : Describes the current state of the card. See CardState . ownerId : The user ID of the card owner. CardType enum \u00b6 CARD_TYPE_UNSPECIFIED : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. CARD_TYPE_PREPAID : Represents a Prepaid Card. CardState enum \u00b6 CARD_STATE_UNSPECIFIED : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. CARD_STATE_ACTIVE : Indicates that the card is ready to be used. CARD_STATE_LOCKED : Indicates that the card is temporarily blocked for usage. HelpCenter \u00b6 The help center adds the ability to connect a Finaptic Customer Service agent for L2+ escalations. We provide APIs to integrate existing customer service chat / threaded conversations into your client application. The expectation is that a new chat should be triggered by an L1 customer support agent, while customers should be able to resume existing threads to provide additional information or view responses from Finaptic. Start customer support chat List chat threads Get a chat thread's history startChat \u00b6 Create StartChatRequest . displayName can be username. You can get it from AuthenticationClient's getUserInfo . subject provided by the customer when starting a new chat or from ChatThread . contactCaseId is used to resume a thread. Use null to start a new one. val request = StartChatRequest(displayName = displayName, subject = subject, contactCaseId = nil) Calling startChat will try to connect and return ChatClient . try { val chatClient = sdk.helpCenter.startChat(startChatRequest) } catch(e: FinapticException) { Log.e(TAG, \"Start chat error:\", e) } listChatThreads \u00b6 Note: This method can be called after Customer is created . Create ListChatThreadsRequest . nextToken is provided by ListChatThreadsResponse and can be used to get next page. val request = ListChatThreadsRequest(nextToken = null) On success, listChatThreads will return ListChatThreadsResponse . try { val response = sdk.helpCenter.listChatThreads(request) Log.d(TAG, \"List chat threads success. Threads: ${response.items.count()}\") } catch(e: FinapticException) { Log.e(TAG, \"List chat threads error:\", e) } ListChatThreadsResponse \u00b6 nextToken can be used to fetch next page. items is an array of ChatThread ChatThread \u00b6 id lastUpdated status is ChatThreadStatus . subject provided by the customer when starting a new chat. createdAt customerId ChatThreadStatus enum \u00b6 WAITING_FOR_AGENT WAITING_FOR_CUSTOMER when an agent has responded and needs more information from the customer. Waiting for customer should indicate there is an unread message. RESOLVED listChatHistory \u00b6 Note: This method can be called after Customer is created . Create ListChatHistoryRequest . contactId is the id of ChatThread . nextToken is provided by ListChatHistoryResponse and can be used to get next page. val request = ListChatHistoryRequest(contactId = contactId, nextToken = nil) On success, listChatHistory will return ListChatHistoryResponse . try { val response = sdk.helpCenter.listChatHistory(request) Log.d(TAG, \"List chat history success. Messages: ${response.items.count()}\") } catch(e: FinapticException) { Log.e(TAG, \"List chat history error:\", e) } ListChatHistoryResponse \u00b6 nextToken used to fetch next page. items is an array of ChatMessage ChatClient \u00b6 sendMessage \u00b6 val request = SendMessageRequest(messageContent = \"Text message\") try { chatClient.sendMessage(sendMessageRequest) Log.d(TAG, \"Chat message sent.\") } catch(e: FinapticException) { Log.e(TAG, \"Send message error:\", e) } messages \u00b6 Message history in descending order. It's a list of ChatMessage . receiveMessage \u00b6 Deliver sequence of ChatMessage over time. GlobalScope.launch(Dispatchers.IO) { chatClient.receiveMessage().collect { Log.d(TAG, \"Chat message: $it\") } } receiveEvent \u00b6 Deliver sequence of ChatEvent over time. GlobalScope.launch(Dispatchers.IO) { chatClient.receiveEvent().collect { Log.d(TAG, \"Chat events: $it\") } } connectionStatus \u00b6 Subscribing to connectionStatus publisher will deliver sequence of ChatConnectionStatus over time. GlobalScope.launch(Dispatchers.IO) { chatClient.connectionStatus().collect { Log.d(TAG, \"Chat client connection status: $it\") } } You can get the current status at any time by calling connectionStatus(). value . val connectionStatus = chatClient.connectionStatus().value stopContact \u00b6 Stops the chat, but threads are not deleted. They will show up in the help center listChatHistory API call after ~3 minutes. try { chatClient.stopContact() Log.d(TAG, \"Stop contract success.\") } catch(e: FinapticException) { Log.e(TAG, \"Stop contact error:\", e) } ChatConnectionStatus enum \u00b6 CONNECTING when ChatClient is connecting or reconnecing after connection loss. CONNECTED ENDED when stopContact is called or agent closes the case. ChatMessage \u00b6 id participantRole is ParticipantRole enum. displayName content is the text message. timestamp ParticipantRole enum \u00b6 CUSTOMER SYSTEM_MESSAGE AGENT ChatEvent \u00b6 id type is ChatEventType enum. timestamp displayName ChatEventType enum \u00b6 JOINED when agent joined the chat. TYPING when agent is typing. DistributionClient \u00b6 Distribution client exposes operations for push notification. registerChannel \u00b6 Registers a push notification channel for the specified device. try { val request = RegisterPushNotificationChannelRequest(deviceId, registrationId) sdk.distributionClient.registerChannel(request) Log.d(TAG, \"Register channel success\") } catch (e: FinapticException) { Log.d(TAG, \"Register channel error\", e) } RegisterPushNotificationChannelRequest \u00b6 deviceId for which to register the push notification channel. This can be a unique ID provided by the device vendor or an anonymous sandboxed ID that uniquely represents the device. registrationId for the respective device. This is the registration token generated by Firebase Messaging. See Firebase documentation for more information . TransactionCreatedEvent \u00b6 For each Transaction, a push notification will be sent with the following data. You can call getTransaction to get more details. { \"eventType\": \"TransactionCreatedEvent\", \"transactionId\": \"00c660a0-c03d-401d-bf77-99df3e6a157f\" \"amount\": \"12.30\", \"availableBalance\": \"120.00\", \"actualBalance\": \"100.00\", \"transactionTime\": \"2021-12-17 12:34:56.793213 +0000 UTC\", } InteracClient \u00b6 InteracClient exposes methods used to register and list/retrieve Auto Deposit Registrations. createRegistration \u00b6 Once a registration request is submitted, users will receive an email at the email address that they provided from Interac, which will ask them to confirm their auto-deposit registration. try { val registration = Registration( accountId = account.id, aliasEmail = \"test@finaptic.com\" ) val request = CreateRegistrationRequest(registration) val response = sdk.interacClient.createRegistration(request) Log.d(TAG, \"Create autodeposit registration success with email ${response.registration.aliasEmail}\") } catch (e: FinapticException) { when(e.code) { FinapticExceptionCode.UNAVAILABLE -> Log.e(TAG, \"Check your internet connection and try again\", e) FinapticExceptionCode.DEADLINE_EXCEEDED -> Log.e(TAG, \"Operation couldn't complete in the default timeout. Try again.\", e) FinapticExceptionCode.TRANS_INTERAC_INVALID_ACCOUNT -> Log.e(TAG, \"Invalid account\", e) FinapticExceptionCode.TRANS_INTERAC_ALIAS_IN_USE -> Log.e(TAG, \"Autodeposit alias in use\", e) FinapticExceptionCode.TRANS_INTERAC_REG_COUNT_EXCEEDED -> Log.e(TAG, \"Maximum number of account-alias registrations threshold exceeded\", e) FinapticExceptionCode.TRANS_INTERAC_INV_MOB_NUMBER -> Log.e(TAG, \"Invalid mobile phone number\", e) FinapticExceptionCode.TRANS_INTERAC_INV_MOB_AREACODE -> Log.e(TAG, \"Invalid mobile phone area code\", e) else -> Log.e(TAG, \"Create autodeposit registration error\", e) } } Possible error codes: FinapticExceptionCode.TRANS_INTERAC_INVALID_ACCOUNT : Invalid account. FinapticExceptionCode.TRANS_INTERAC_ALIAS_IN_USE : Autodeposit alias in use. FinapticExceptionCode.TRANS_INTERAC_REG_COUNT_EXCEEDED : Maximum number of account-alias registrations threshold exceeded. FinapticExceptionCode.TRANS_INTERAC_INV_MOB_NUMBER : Invalid mobile phone number. FinapticExceptionCode.TRANS_INTERAC_INV_MOB_AREACODE : Invalid mobile phone area code. CreateRegistrationRequest \u00b6 registration : See Registration . CreateRegistrationResponse \u00b6 registration : See Registration . Registration \u00b6 registrationId : Output only. expiryDate : Output only. accountId : Provided for the account that the customer wishes auto-deposit transactions to be routed to. aliasEmail : Email for autodeposit registation. aliasPhoneNumber : Optional. See PhoneNumber . PhoneNumber \u00b6 phoneNumber : Valid phone number. ListAutodepositRegistrations \u00b6 try { val request = ListAutodepositRegistrationsRequest(accountId = account.id) val response = sdk.interacClient.listAutodepositRegistrations(request) response.registrations.forEach { Log.d(TAG, \"Autodeposit registration for ${it.aliasEmail}\") } } catch (e: FinapticException) { Log.e(TAG, \"List autodeposit registrations error\", e) } ListAutodepositRegistrationsRequest \u00b6 accountId : The Account ID for the Registrations that are to be listed. ListAutodepositRegistrationsResponse \u00b6 registrations : The requested list of Registrations . updateRegistration \u00b6 When updating the account alias registration, minimal changes are allowed, notably it is meant to change the target account linked to the alias. Notice that it is not possible to change the account alias handle itself (e.g. email/phone number). If more important changes are needed, the customer could always use the delete registration service and start a new account alias from scratch after that. try { val request = UpdateRegistrationRequest( registrationId = registrationId, accountId = accountId) val response = sdk.interacClient.updateRegistration(request) Log.d(TAG, \"Update registration success ${response.registration}\") } catch (e: FinapticException) { when (e.code) { FinapticExceptionCode.UNAVAILABLE -> Log.e(TAG, \"Check your internet connection and try again\", e) FinapticExceptionCode.DEADLINE_EXCEEDED -> Log.e(TAG, \"Operation couldn't complete in the default timeout. Try again.\", e) FinapticExceptionCode.TRANS_INTERAC_INVALID_ACCOUNT -> Log.e(TAG, \"Invalid account.\", e) FinapticExceptionCode.UNAUTHORIZED -> Log.e(TAG, \"Registration ID passed as argument is not owned by the current user.\", e) else -> Log.e(TAG, \"Update autodeposit registration error\", e) } } UpdateRegistrationRequest \u00b6 Used to initiate the update of an existing Interac account alias registration. registrationId : The ID of the Registration to update. accountId : The ID of the Account. UpdateRegistrationResponse \u00b6 registration : See Registration . Errors: FinapticExceptionCode.INVALID_ARGUMENT : if the account ID passed as argument is not owned or authorized for the current user. FinapticExceptionCode.UNAUTHORIZED : if the registration ID passed as argument is not owned by the current user. FinapticExceptionCode.INTERNAL : if there is an unexpected error while processing the request. deleteRegistration \u00b6 Deleting an account alias registration will invalidate/inactivate the link between an account alias handle (email/phone) and an account, so that the account will no longer receive deposits automatically when sent using the given alias. At that moment, the customer is free to use the same alias handle to create a new registration pointing to the same or a different account. try { val request = DeleteRegistrationRequest (registrationId = registrationId) val response = sdk.interacClient.deleteRegistration(request) Log.d(TAG, \"Delete autodeposit registration success ${response.registration}\") } catch (e: FinapticException) { when(e.code) { FinapticExceptionCode.UNAVAILABLE -> Log.e(TAG, \"Check your internet connection and try again\", e) FinapticExceptionCode.DEADLINE_EXCEEDED -> Log.e(TAG, \"Operation couldn't complete in the default timeout. Try again.\", e) FinapticExceptionCode.UNAUTHORIZED -> Log.e(TAG, \"Registration ID passed as argument is not owned by the current user.\", e) else -> Log.e(TAG, \"Delete autodeposit registration error\", e) } } DeleteRegistrationRequest \u00b6 Used to initiate the deletion/deactivation of an existing Interac account alias registration. registrationId : The ID of the Registration to delete. UpdateRegistrationResponse \u00b6 registration : See Registration . Errors: FinapticExceptionCode.UNAUTHORIZED : if the registration ID passed as argument is not owned by the current user. FinapticExceptionCode.INTERNAL : if there is an unexpected error while processing the request. authenticateIncomingTransfer \u00b6 Used to authenticate an inbound Interac transfer. You can get the security question by calling getIncomingTransferDetails . Different errors can arise when authenticating an incoming transfer. For details see incoming transfer error codes . try { val request = AuthenticateIncomingTransferRequest( interacPaymentNumber, securityAnswer = \"string\" ) val response = sdk.interacClient.authenticateIncomingTransfer(request) Log.d(TAG, \"Authenticate incoming transfer success: $response\") } catch (e: FinapticException) { Log.e(TAG, \"Authenticate incoming transfer error\", e) } AuthenticateIncomingTransferRequest \u00b6 interacPaymentNumber : The payment number, as provided by Interac, which this request authenticates. securityAnswer : The answer to the security question as provided by the customer. AuthenticateIncomingTransferResponse \u00b6 interacPaymentNumber : The payment number. success : Indicates if the provided response was correct. retryAllowed : In case of an incorrect response (success=false), indicates if the user can try again providing a new answer. completeIncomingTransfer \u00b6 Used to complete the deposit of an inbound Interac transfer. Different errors can arise when completing an incoming transfer. For details see incoming transfer error codes . try { val request = CompleteIncomingTransferRequest( interacPaymentNumber, targetAccountId = targetAccountId, recipientMemo = \"Optional memo\" ) val response = sdk.interacClient.completeIncomingTransfer(request) Log.d(TAG, \"Complete incoming transfer success: $response\") } catch (e: FinapticException) { Log.e(TAG, \"Complete incoming transfer error\", e) } CompleteIncomingTransferRequest \u00b6 interacPaymentNumber : The payment number, as provided by Interac, for which the deposit is being completed. targetAccountId : Represents the target account ID. Current customer needs to be the owner or authorized user of the target account. Target account must be a deposit account. recipientMemo : An optional memo provided by the recipient. This memo will be sent to the sender. CompleteIncomingTransferResponse \u00b6 interacPaymentNumber : The payment number. transactionId : Represents this single financial transaction (operation). lifecycleTransactionId : Represents the overarching transaction, across all phases of its lifecycle. declineIncomingTransfer \u00b6 Used to complete the deposit of an inbound Interac transfer. Different errors can arise when declining an incoming transfer. For details see incoming transfer error codes . try { val request = DeclineIncomingTransferRequest( interacPaymentNumber, recipientMemo = \"Optional memo\" ) val response = sdk.interacClient.declineIncomingTransfer(request) Log.d(TAG, \"Decline incoming transfer success: $response\") } catch (e: FinapticException) { Log.e(TAG, \"Decline incoming transfer error\", e) } DeclineIncomingTransferRequest \u00b6 interacPaymentNumber : The payment number, as provided by Interac, for which the transfer is being declined. recipientMemo : An optional memo provided by the recipient. This memo will be sent to the sender. DeclineIncomingTransferResponse \u00b6 interacPaymentNumber : The payment number. Incoming Transfer Error Codes \u00b6 FinapticExceptionCode.TRANS_INTERAC_INVALID_TRANSFER : Transfer does not exist FinapticExceptionCode.TRANS_INTERAC_ALREADY_CANCELLED : Returned when attempting to authenticate a transfer that has already been canceled. FinapticExceptionCode.TRANS_INTERAC_ALREADY_ACCEPTED : Returned when attempting to authenticate a transfer that has already been accepted. FinapticExceptionCode.TRANS_INTERAC_PREVIOUS_TRANSFER_IN_PROGRESS : Returned when there already exists a transfer between sender and recipient that has not been completed or canceled. FinapticExceptionCode.TRANS_INTERAC_INCONSISTENT_CUSTOMER : Returned when performing any operation a transfer has been authenticated by different customer ID. FinapticExceptionCode.TRANS_INTERAC_TRANSFER_LIMITS_EXCEEDED : Rolling or per-transaction limits exceeded . FinapticExceptionCode.TRANS_INTERAC_AUTHENTICATION_REQUIRED : Returned when attempting to complete an incoming Q&A transfer whose authentication step has not yet been completed successfully. E.g. the user has not provided the correct answer to the security question. CoreTransactionClient \u00b6 listAccounts \u00b6 Lists all accounts on which the current user is the owner, or an authorized user. Uses pagination to allow listing accounts in smaller, easy to manage, chunks. try { val request = ListAccountsRequest(pageSize = 10) val response = sdk.coreTransactionClient.listAccounts(request) Log.d(TAG, \"List accounts success\") response.accounts.forEach { Log.d(TAG, \"Account with id ${it.id.toString()}\") } } catch (e: FinapticException) { Log.e(TAG, \"List accounts error\", e) } ListAccountsRequest \u00b6 pageSize : The maximum number of Accounts to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving a page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListAccountsResponse ). When no value is specified, then the initial page will be returned. ListAccountsResponse \u00b6 accounts : The requested list of Accounts. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListAccountsRequest ). When no value is returned in this field, then no further data exists to be listed. getAccount \u00b6 try { val request = GetAccountRequest(accountId) val response = sdk.coreTransactionClient.getAccount(request) Log.d(TAG, \"Get account success with id ${response.id.toString()}\") } catch (e: FinapticException) { Log.e(TAG, \"Get account error\", e) } GetAccountRequest \u00b6 accountId : The ID of the Account to retrieve. listAuthorizedUsers \u00b6 Lists all authorized users of an account. try { val request = ListAuthorizedUsersRequest(accountId) val response = sdk.coreTransactionClient.listAuthorizedUsers(request) Log.d(TAG, \"List authorized users success\") response.authorizedUsers.forEach { Log.d(TAG, \"Authorized user with id $it\") } } catch (e: FinapticException) { Log.e(TAG, \"List authorized users error\", e) } ListAuthorizedUsersRequest \u00b6 accountId : The ID of the Account for which the authorized users are to be listed. ListAuthorizedUsersResponse \u00b6 authorizedUsers : The requested list of authorized users ids. listOwners \u00b6 Lists all owners of an account if the caller as the access rights. try { val response = sdk.coreTransactionClient.listOwners(request) Log.d(TAG, \"List owners success\") response.owners.forEach { Log.d(TAG, \"Owner with id $it\") } } catch (e: FinapticException) { Log.e(TAG, \"List owners error\", e) } listTransactions \u00b6 Lists Transactions associated to the Account specified using pagination. Transactions are sorted in descending order of Transaction time. try { val request = ListTransactionsRequest( accountId = accountId, pageSize = 10) val response = sdk.coreTransactionClient.listTransactions(request) Log.d(TAG, \"List transactions success\") response.transactions.forEach { Log.d(TAG, \"Transaction with id ${it.transactionId.toString()}\") } } catch (e: FinapticException) { Log.e(TAG, \"List transactions error\", e) } ListTransactionsRequest \u00b6 accountId : The ID of the Account to list Transactions for. from : The UTC timestamp from which to list Transactions. to : The UTC timestamp until which to list Transactions. pageSize : The maximum number of Transactions to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListTransactionsResponse ). When no value is specified, then the initial page will be returned. ListTransactionsResponse \u00b6 transactions : The requested list of Transactions. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListTransactionsRequest ). When no value is returned in this field, then no further data exists to be listed. CoreTransferClient \u00b6 Exposes endpoints related to the retrieval of transfers data. getTransferDetails \u00b6 Returns the latest state of a transfer by a given transaction ID. See TransferTransactionDetails for more details. try { val request = GetTransferDetailsRequest(transactionId) val transferTransactionDetails = sdk.coreTransferClient.getTransferDetails(request) } catch (e: Throwable) { Log.d(TAG, \"Get transferTransactionDetails failed\", e) } GetTransferDetailsRequest \u00b6 transactionId : The ID of the transaction to get details for. Errors - FinapticExceptionCode.TRANS_INVALID_TRANSACTION : If a transaction ID is provided that is not found or resolves to an unauthorized account - FinapticExceptionCode.INTERNAL : If an unexpected error occurs while processing the request. The error will include a RefNumber which Finaptic can use to investigate the cause. listTargetAccounts \u00b6 Retrieves all accounts that can be used as recipient of funds for the intended type of transfer the current user wants to initiate/authorize. It is expected that after listing target accounts, one of the account IDs returned would be used by the customer for incoming transfer operations like creation of an Interac auto-deposit registration, depositing an incoming transfer or moving money between accounts. try { val request = ListTargetAccountsRequest( transferType = TransferType.INTERNAL_ACCOUNT_TO_ACCOUNT, pageSize = 10) val response = sdk.coreTransferClient.listTargetAccounts(request) Log.d(TAG, \"List Target Accounts success: $response\") } catch (e: Throwable) { Log.d(TAG, \"List Target Accounts failed\", e) } ListTargetAccountsRequest \u00b6 transferType : The type of the transfer the customer wants to initiate/authorize. See TransferType . pageSize : The maximum number of Accounts to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving a page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListTargetAccountsResponse ). When no value is specified, then the initial page will be returned. ListTargetAccountsResponse \u00b6 accounts : The resulting list of Account identifiers for selection. See AccountIdentification . nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see ListTargetAccountsRequest ). When no value is returned in this field, then no further data exists to be listed. AccountIdentification \u00b6 Used to identify which accounts can be presented to the consumer for certain selections, e.g. for selection lists while trying to perform/authorize transfers. id : The unique ID of the Account as created by its source domain. sourceDomain : The source domain which created the Account (eg: core-banking). initiateTransfer \u00b6 Create a transfer fund request between accounts owned by current customer. try { val amount = Amount(amount = BigDecimal(\"0.01\"), currency = \"CAD\") val request = InitiateTransferRequest( sourceAccountId = sourceAccountId, destinationAccountId = destinationAccountId, fundTransfer = amount ) val response = sdk.coreTransferClient.initiateTransfer(request) if (response.reason.isNotEmpty()) { Log.d(TAG, \"Initiate transfer failed with reason: ${response.reason}\") return } val transfer = response.details Log.d(TAG, \"Initiate transfer success: $transfer\") } catch (e: FinapticException) { Log.d(TAG, \"Get Transaction Details error\", e) } InitiateTransferRequest \u00b6 sourceAccountId : Represents the source account ID. Current customer needs to be owner or authorized user of the source account. Source account needs to have sufficient available balance and actual balance to be able to initiate the transfer. destinationAccountId : Represents the destination account ID. Current customer needs to be owner or authorized user of the destination account. fundTransfer : The amount of the fund transfer. The amount should be always positive. InitiateTransferResponse \u00b6 details : Details of the transaction with its status (whether the transaction is TransferStatus.completed or TransferStatus.declined ). See TransferTransactionDetails for more details. reason : Empty when status is TransferStatus.completed . Reason why transfer is declined. TransferTransactionDetails \u00b6 transactionId : Represents this single financial transaction (operation). lifecycleTransactionId : Represents the overarching transaction, across all phases of its lifecycle (e.g. authorization, settlement, reversal, ...). status : Status of the transfer. See TransferStatus enumeration for details on possible statuses. customerRole : The role played by our customer in this transaction. See CustomerRole for details on possible roles. transferType : The type of transfer for this transaction. See TransferType for details on possible types. counterparty : When transferType is INTERAC_AUTODEPOSIT , this will contain the details about the person/entity on the other side of this transfer. When transferType is INTERNAL_ACCOUNT_TO_ACCOUNT**, this will contain the details of the owner of the destination account. clearingSystemRefNumber : Unique identifier assigned to the transaction by the external payment/transfer clearing system. remittance : Includes remittance data from this transfer if it contains any. TransferStatus enum \u00b6 TRANSFER_STATUS_UNSPECIFIED : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. DECLINED : Indicates that the transfer has been declined and rollback has been performed. When transferType is INTERNAL_ACCOUNT_TO_ACCOUNT , this could be due to insufficient funds to initiate the transfer. COMPLETED : Indicates that the transfer has been successfully completed. PENDING : Indicates that the transfer is in an intermediate stage before completion. CustomerRole enum \u00b6 CUSTOMER_ROLE_UNSPECIFIED : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. RECIPIENT : Indicates that the customer is the recipient of the transfer operation. INITIATOR : Indicates that the customer is the initiator of the transfer operation. TransferType enum \u00b6 TRANSFER_STATUS_UNSPECIFIED : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. INTERNAL_ACCOUNT_TO_ACCOUNT : Indicates that the transfer was an Account to Account transfer that did not transit through external systems ( stayed within the institution ). INTERAC_AUTODEPOSIT : Indicates that the transfer came through Interac systems, and used the Interac Autodeposit mechanism. INTERAC_REGULAR_PAYMENT : Indicates that the transfer came through Interac systems, and used the Interac Q&A mechanism. Structured and Unstructured Remittance Data \u00b6 Remittance includes additional information provided by the sender giving context for a transfer for instance, a transfer may be sent to a business by one of its clients in order to pay for a bill, the remittance data will include a reference to that bill payment. Remittance data could be unstructured or structured or both. Unstructured \u00b6 The unstructured remittance data can be used for free-form text such as in a memo field. User Interface and Data Mapping Example: Label Data element Notes data Structured \u00b6 Structured remittance data can be sent in up to 5 blocks for each transaction, with each block representing a document, such as a purchase order. The structured remittance data is organized into the following groupings of information: Referred Document Information : Information about the 'invoice'. Not necessarily an invoice, but some document that outlines the context and reason for the payment. Referred Document Amount : The amount being paid in the current transfer. Creditor Reference Information : Additional reference info provided by the creditor. Invoicer : Contains information about the payee, such as contact information. Invoicee : Contains information about the payor, such as contact information. Additional remittance information : A free form text field for additional remittance information. User Interface and Data Mapping Examples: \u00b6 Payor Details \u00b6 invoicee contains information about the payor. Label Data element Name invoicee.name Address Address Type invoicee.postalAddress.addressType. code Department invoicee.postalAddress.department Sub-department invoicee.postalAddress.subDepartment Street invoicee.postalAddress.streetName Street Number invoicee.postalAddress.buildingNumber Postal Code invoicee.postalAddress.postCode City invoicee.postalAddress.townName Province invoicee.postalAddress.countrySubDivision Country invoicee.postalAddress.country Address invoicee.postalAddress.addressLine Identification Payor ID invoicee.identification.organisationIdentification.other[n].identification ID type invoicee.identification.organisationIdentification.other[n].schemeName. code Contact Details Name invoicee.contactDetails. name Phone invoicee.contactDetails.phoneNumber Mobile invoicee.contactDetails.mobileNumber Fax invoicee.contactDetails.faxNumber Email Address invoicee.contactDetails.emailAddress Payee Details \u00b6 invoicer contains information about the payee. Label Data element Name invoicer.name Address Address Type invoicer.postalAddress.addressType. code Department invoicer.postalAddress.department Sub-department invoicer.postalAddress.subDepartment Street invoicer.postalAddress.streetName Street Number invoicer.postalAddress.buildingNumber Postal Code invoicer.postalAddress.postCode City invoicer.postalAddress.townName Province invoicer.postalAddress.countrySubDivision Country invoicer.postalAddress.country Address invoicer.postalAddress.addressLine Identification Payee ID invoicer.identification.organisationIdentification.other[n]. identification ID type invoicer.identification.organisationIdentification.other[n].schemeName. code Contact Details Name invoicer.contactDetails. name Phone invoicer.contactDetails. phoneNumber Mobile invoicer.contactDetails. mobileNumber Fax invoicer.contactDetails. faxNumber Email Address invoicer.contactDetails. emailAddress Document information \u00b6 Label Data element Document Type referredDocumentInformation[n].type.codeOrProprietary. code Purchase Order Number referredDocumentInformation[n].number Issue Date referredDocumentInformation[n].relatedDate Total Amount Due referredDocumentAmount.duePayableAmount.amount referredDocumentAmount.duePayableAmount.currency Discount Amount (if creditDebitIndicator=DBIT) referredDocumentAmount.adjustmentAmountAndReason[n].amount.amount referredDocumentAmount.adjustmentAmountAndReason[n].amount.currency Credit Amount (if creditDebitIndicator=CRDT) referredDocumentAmount.adjustmentAmountAndReason[n].amount.amount referredDocumentAmount.adjustmentAmountAndReason[n].amount.currency Reason for Adjustment referredDocumentAmount.adjustmentAmountAndReason[n].reason Additional Adjustment Information referredDocumentAmount.adjustmentAmountAndReason[n].additionalInformation Amount to be Paid referredDocumentAmount.remittedAmount.amount referredDocumentAmount.remittedAmount.currency Creditor Reference Type creditorReferenceInformation.type.codeOrProprietary. code Creditor Reference creditorReferenceInformation.reference Additional remittance information \u00b6 Label Data element Additional Details additionalRemittanceInformation[n] AddressType2Code enum \u00b6 ADDR : Postal Address PBOX : POBox Address HOME : Residential Address BIZZ : Busines s Address MLTO : MailTo Address DLVY : Delivery To Address ExternalOrganisationIdentification1Code enum \u00b6 BANK : Bank ID CBID : Central Bank ID CHID : Clearing House ID CINC : Corporation COID : Country Code CUST : Customer ID DUNS : DUNS Number EMPL : Employer ID GS1G : Global Location Number SREN : SIREN code SRET : SIRET code TXID : Tax ID DocumentType6Code enum \u00b6 MSIN : Metered Service Invoice CNFA : Credit Note Related To Financial Adjustment DNFA : Debit Note Related To Financial Adjustment CINV : Commercial Invoice CREN : Credit Note DEBN : Debit Note HIRI : Hire Invoice SBIN : Self Billed Invoice CMCN : Commercial Contract SOAC : Statement Of Account DISP : Dispatch Advice BOLD : Bill Of Lading VCHR : Voucher AROI : Account Receivable Open Item TSUT : Trade Services Utility Trans action PUOR : Purchase Order DocumentType3Code enum \u00b6 RADM : Remittance Advice Message RPIN : Related Payment Instructions FXDR : Foreign Exchange Deal Reference DISP : Dispatch Advice PUOR : Purchase Order SCOR : Structured Communication Reference getIncomingTransferDetails \u00b6 Retrieves the details and state of an incoming Interac Q&A transfer. try { val request = GetIncomingTransferDetailsRequest(interacPaymentNumber) val response = sdk.coreTransferClient.getIncomingTransferDetails(request) Log.d(TAG, \"Get incoming transfer details success: ${response.transferDetails}\") } catch (e: FinapticException) { Log.e(TAG, \"Get incoming transfer details error\", e) } GetIncomingTransferDetailsRequest \u00b6 interacPaymentNumber : The payment id, as provided by custom url scheme. You need to register custom URL scheme that Finaptic will provide(e.g. finaptic://interac/deposit?lang=en&paymentid=000000000). You can find more information here . GetIncomingTransferDetailsResponse \u00b6 transferDetails : Contains details about a given inbound Interac transfer. See IncomingTransferDetails . Errors: An error with error code FinapticExceptionCode.TRANS_INTERAC_INVALID_TRANSFER msg: \"payment number is invalid\" will be generated in the following scenarios: calls made with a non-existent interacPaymentNumber An error with error code FinapticExceptionCode.TRANS_INTERAC_INCONSISTENT_CUSTOMER msg: \"Transfer was previously authenticated with a different customer ID\" will be generated when: calls made with a different customer than was previously authenticated IncomingTransferDetails \u00b6 interacPaymentNumber : The payment number, as provided by Interac, which the details of the transfer will be returned for. transferStatus : The current status of the transfer. See IncomingTransferStatus . transferAmount : The amount of the transfer. expiryDate : The timestamp when this transfer will expire. initiatorName : The name of who initiated the transfer. authenticationRequired : Indicates if this transfer requires that the recipient provide a security answer before depositing the transfer into the account. securityQuestion : If authenticationRequired is true, the field contains the security question that the user must provide the answer to in order to deposit the transfer. senderMemo : An optional memo provided by the sender. IncomingTransferStatus enum \u00b6 UNSPECIFIED : Reserved for error detection purposes. It should not be used directly. AVAILABLE : Represents that a transfer has not been processed and is in a valid state to be authorized. AUTHORIZED : Represents that a transfer has been authorized and is in a valid state to be accepted or declined. ACCEPTED : Represents that a transfer has been accepted. The transfer is complete and deposited into the target account. CANCELED : Represents that a transfer is complete and not deposited to an account. Ways to achieve this state are: if the transfer is canceled by the sender, if the receiver declines the transfer, the transfer has expired, the receiver is unable to authenticate the transfer within the allotted attempts. Personal Finance Management \u00b6 getTransactions \u00b6 Lists transactions for a given Account with pagination. try { val request = GetTransactionsRequest( accountId = accountId, pageSize = 10, sortOrder = TransactionOrder.DESCENDING) val response = sdk.personalFinanceManagementClient.getTransactions(request) Log.d(TAG, \"Get transactions success\") response.transactions.forEach { Log.d(TAG, \"Transaction with id ${it.transactionId.toString()}\") } } catch (e: FinapticException) { Log.e(TAG, \"Get transactions error\", e) } GetTransactionsRequest \u00b6 accountId : The Account ID for which Transactions are returned. pageSize : The maximum number of Transactions to return. This value must be greater or equal to one. pageToken : When retrieving page other than the initial page, the value for the page_token must be specified, and taken from the previous page's nextPageToken value (see GetTransactionsResponse ). When no value is specified, then the initial page will be returned. sortOrder : The order the returned Transactions are sorted in. Transactions are sorted by the Transaction's transactionTime field. See TransactionOrder . GetTransactionsResponse \u00b6 previousPageToken : The token to be used to retrieve the previous page of data. Must be passed in the pageToken field of the next request (see GetTransactionsRequest ). When no value is returned in this field, then there is no previous data to be listed. transactions : The requested list of Transactions . nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see GetTransactionsRequest ). When no value is returned in this field, then no further data exists to be listed. sortOrder : The order the Transactions are listed in. See TransactionOrder . getTransaction \u00b6 try { val request = GetTransactionRequest(transactionId = transactionId) val response = sdk.personalFinanceManagementClient.getTransaction(request) Log.d(TAG, \"Get transaction success with id: ${response.transaction.transactionId}\") } catch (e: FinapticException) { Log.e(TAG, \"Get transaction error\", e) } GetTransactionRequest \u00b6 transactionId : Transaction id. GetTransactionResponse \u00b6 transaction : See Transactions . TransactionOrder enum \u00b6 ORDER_UNSPECIFIED : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. Trying to make a request with this type will result in an error. DESCENDING : Represents newest first. ASCENDING : Represents oldest first. Transaction \u00b6 transactionId : Unique identifier that represents this single financial transaction. lifecycleTransactionId : Unique identifier that represents the overarching transaction, across all phases of its lifecycle. amount : The Amount of the Transaction. transactorName : The name and location of the vendor where the payment was processed. balance : The resulting Balance of the Account after the Transaction has occurred. transactionState : TransactionState enumeration represents the state of a Transaction. See TransactionState . transactionType : The TransactionType of the Transaction. See TransactionType . accountId : ID of the Account on which the Transaction was authorised. This can also be utilised to fetch the Account. category : A localized descriptor of the transaction's category (i.e. Groceries, Transport, etc.). transactionTime : The UTC timestamp when the Transaction occurred. accountDomain : The name of the domain that can be queried for additional details regarding the Account of this transaction. initiatingDomain : The name of the domain that can be queried for additional details regarding this Transaction. TransactionState enum \u00b6 TRANSACTION_STATE_UNSPECIFIED : Reserved for error detection purposes. It should not be used directly. POSTED : Represents a transaction that has been completed. PENDING : Represents a transaction in an intermediate state, dependent on the transaction type. UNKNOWN : Represents a transaction type where available information is insufficient to determine TransactionState. TransactionType enum \u00b6 TRANSACTION_TYPE_UNSPECIFIED : Reserved for error detection purposes. It should not be used directly. AUTHORIZED : Represents a transaction type that is a purchase for which the merchant has received approval from the bank. An AUTHORIZED transaction will always have state PENDING . DEBIT : Represents a transaction type when there is an addition to the amount in the customer's account. REFUND : Represents a transaction type when businesses and merchants issue a reversal of the transaction that had previously occurred (e.g. a previously credited transaction will be debited back into the customers account). CHARGEBACK : Represents a transaction type that is returned to a payment card after a customer successfully disputes an item on their account statement or transactions report. A chargeback may occur on debit cards (and the underlying bank account) or on credit cards. CREDIT : Represents a transaction type when there is a deduction to the amount in the customer's account. PRODUCT_NOT_DEFINED : Represents a transaction state where available information is insufficient to determine TransactionType. Exceptions \u00b6 Every callable method from the SDK potentially throws a FinapticException, which is a regular Java/Kotlin exception with an extra \"code\" attribute. This try-catch block can surround any SDK call. try { val initiateApplicationResponse = sdk.onboardingClient.initiateApplication( InitiateApplicationRequest( productId = \"prepaid_account\" ) ) val applicationId = initiateApplicationResponse.basicDetails.applicationId } catch (e: FinapticException) { when(e.code) { FinapticExceptionCode.UNAVAILABLE -> Log.e(TAG, \"Check your internet connection and try again\", e) FinapticExceptionCode.DEADLINE_EXCEEDED -> Log.e(TAG, \"Operation couldn't complete in the default timeout. Try again.\", e) else -> throw e } }","title":"Finaptic Android SDK"},{"location":"SDK-Guide/android-sdk/#finaptic-android-sdk","text":"The Finaptic Android SDK provides a way to consume Finaptic APIs from your Android application. It is written in Kotlin. Note that the Finaptic APIs are strictly accessed through the SDK because it hides the underlying implementation that could change in the future. Android API version 27 or newer is required.","title":"Finaptic Android SDK"},{"location":"SDK-Guide/android-sdk/#sample-application","text":"A sample application demonstrates what is explained in the document. Make sure you can run it using your own SDK key. Here are the steps to run the sample app: Open the file MainActivity.kt and replace the SDK key with the one provided to you. The key is configured in the FinapticSDK.init(...) call. Run the sample app on a device or simulator. Press the button at the bottom of the first screen to execute the onboarding flow. Check the logs in Logcat (filter with \"Finaptic\"). You will see the sample app logs as well as the SDK logs. Let the whole flow execute. It can take more than one minute. In a sandbox environment, you may experience delays when using a client for the first time or after a small inactivity period. It is due to the backend services cold start. If an error arises, a dialog will be presented with the error. The flow couldn't complete properly and the full exception stack will be logged in Logcat. In this case, make sure the SDK key is the right one and retry. If the flow completes without error (no more requests are executing), you are good to integrate the SDK in your own app.","title":"Sample application"},{"location":"SDK-Guide/android-sdk/#id-and-face-capture-with-acuant","text":"Please take a look at AcuantSample on how to use Acuant for document and face capture. You can read their official documentation here .","title":"ID and face capture with Acuant"},{"location":"SDK-Guide/android-sdk/#installation","text":"Copy Finaptic SDK contract and implementation aar files to app/libs . Require the following permissions in your AndroidManifest.xml file. <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\"> <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> <!-- Acuant --> <uses-permission android:name=\"android.permission.CAMERA\" /> <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/> <uses-feature android:name=\"android.hardware.camera\" /> <uses-feature android:name=\"android.hardware.camera.autofocus\" /> <meta-data android:name=\"com.google.android.gms.vision.DEPENDENCIES\" android:value=\"barcode,face\" tools:replace=\"android:value\"/> </manifest> Make sure you have these flags in your gradle.properties . android.enableJetifier=true android.useAndroidX=true Add the Finaptic SDK repositories in build.gradle . allprojects { repositories { google() mavenCentral() jcenter() // SDK libs path flatDir { dirs 'libs' } maven { url 'https://jitpack.io' } // Acuant maven { url 'https://raw.githubusercontent.com/Acuant/AndroidSdkMaven/main/maven/' } maven { url 'https://raw.githubusercontent.com/iProov/android/master/maven/' } } } Update app/build.gradle and sync. Add the Manifest Placeholders for the Auth0 Domain and the Auth0 Scheme properties. android { defaultConfig { // Auth0 domain and scheme provided by Finaptic manifestPlaceholders = [auth0Domain: \"\", auth0Scheme: \"demo\"] } } Target Java 8 byte code for Android and Kotlin plugins respectively. android { compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } kotlinOptions { jvmTarget = '1.8' } } Add the Finaptic SDK dependencies. Because the SDK is provided as aar files instead of maven-like dependencies, you must also add the direct SDK dependencies. dependencies { // Finaptic SDK in libs directory implementation(name:'finaptic-sdk-contract', ext:'aar') implementation(name:'finaptic-sdk-implementation', ext:'aar') // Finaptic SDK dependencies implementation 'io.grpc:grpc-okhttp:1.37.0' implementation 'io.grpc:grpc-stub:1.37.0' implementation(\"io.grpc:grpc-kotlin-stub-lite:1.0.0\") implementation platform('com.google.firebase:firebase-bom:27.0.0') implementation 'com.google.firebase:firebase-analytics-ktx' implementation 'com.google.firebase:firebase-auth-ktx' implementation('com.google.firebase:firebase-firestore-ktx') implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.4.1' implementation 'com.auth0.android:auth0:2.2.0' implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.1\") implementation 'com.amazonaws:aws-android-sdk-core:2.40.0' implementation 'com.amazonaws:aws-android-sdk-connect:2.40.0' implementation 'com.amazonaws:aws-android-sdk-connectparticipant:2.40.0' implementation 'com.amazonaws:aws-android-sdk-mobile-client:2.40.0' implementation \"com.squareup.okhttp3:okhttp:4.9.0\" implementation 'com.github.babbel:okhttp-aws-signer:1.0.1' // Acuant dependencies implementation 'com.acuant:acuantcommon:11.4.12' implementation 'com.acuant:acuantcamera:11.4.12' implementation 'com.acuant:acuantimagepreparation:11.4.12' implementation 'com.acuant:acuantdocumentprocessing:11.4.12' implementation 'com.acuant:acuantfacematch:11.4.12' implementation 'com.acuant:acuantfacecapture:11.4.12' implementation 'com.acuant:acuantpassiveliveness:11.4.12' }","title":"Installation"},{"location":"SDK-Guide/android-sdk/#initialization","text":"The SDK must be initialized before you can make any call. The FinapticSDK.init function must be invoked as a coroutine. The first parameter is a Context (ex: Activity, ApplicationContext). GlobalScope.launch { // Initialize the SDK with the key provided by Finaptic sdk = FinapticSDK.init(this@MainActivity, \"ewogICJzeW5jT25ib2...\") } The init function can be called multiple times, but a single instance will be returned (the first one created). This means you can't change the context or SDK key to get another instance. The context is used for initialization only and won't be retained by the SDK. It is recommended to initialize the SDK once and store the returned instance in your own variable or container. You can now start to use the SDK through multiple clients.","title":"Initialization"},{"location":"SDK-Guide/android-sdk/#onboardingclient","text":"Onboarding flow consist of initiate, get, update, validate and finalize calls. Initiate application initiateApplication Get information getConsentElectronicCommunication getConsentPrivacyPolicy getConsentTermsOfUse getConsentProductAgreement Update information updatePersonalDetails updateContactDetails updateAccountDetails updateAddresses updateConsents updateCustomerResidency updateDisclosures updateEmployment updateCommunicationPreferences Validate application validateDocuments validateSelfie validateApplication acceptApplication Finalize application finalizeApplicationCreateCustomer finalizeApplicationCreateProduct","title":"OnboardingClient"},{"location":"SDK-Guide/android-sdk/#onboardingoperationresponsedetails","text":"OnboardingOperationResponseDetails are the common response fields for an onboarding application create or update message. applicationId : The UUID of the application the response is for. onboardingApplicationStatus : The updated application status. The value here is one of the following: \"UNDEFINED\" is reserved for error detection purposes. It should not be used directly. \"New Application\" describes an Application that has just been created. \"Data Collection describes an Application that has successfully performed an Update call or failed a ValidateSelfieRequest or a ValidateDocumentsRequest. \"KYC In Progress\" describes an Application that has successfully performed a ValidateSelfieRequest or ValidateDocumentsRequest. \"KYC Success\" describes an Application that has successfully performed KYC checks as a result of a ValidateApplicationRequest. \"KYC Failed\" describes an Application that has failed KYC as a result of a ValidateApplicationRequest. \"KYC Rejected\" describes an Application that has no remaining KYC attempts. \"Application Accepted\" describes an application that has successfully completed an AcceptApplicationRequest. \"Application Processed\" describes an application that has been successfully completed. \"Application Cancelled\" describes an application that has been cancelled by the customer. \"Application Rejected\" describes an application that has been rejected and cannot be continued. This is used when a more descriptive rejection status is not available. requestStatus : The success status of the request. requestStatusReason : The detailed reason for the request status. Deprecated : Use requestReasonCodes instead. remainingAllowedRetries : The remaining KYC retries allowed. failureStatusCodes : The list of codes explaining the reason of the request outcome. This list will only be populated when request status is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The list will otherwise be empty. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.FAILURE_CODE . verificationNeeded : The list of verifications that will be needed be performed in order to complete the application. See OnboardingVerification . consents : The list of Consents required as part of this onboarding application. See TermsAndConditions . disclosures : The list of Consents required as part of this onboarding application. See TermsAndConditions .","title":"OnboardingOperationResponseDetails"},{"location":"SDK-Guide/android-sdk/#onboardingverification","text":"Verification needed for an onboarding application name : The name of the OnboardingVerification. \"KYC\" means this application will perform KYC validation during the validate phase (ValidateDocumentsRequest, ValidateSelfieRequest and ValidateApplicationRequest) before being able to complete onboarding application. \"ProfileCreation\" means that this application requires input of basic customer information, without doing full KYC, before being able to complete onboarding application. \"AccountUsage\" means that this application needs to collect Account Usage information using UpdateAccountDetailsRequest before being able to complete onboarding application. requiredUpdates : The list of all Update request that are required as part of this verification (eg : [UpdateAccountDetailsRequest, UpdateConsentsRequest]).","title":"OnboardingVerification"},{"location":"SDK-Guide/android-sdk/#termsandconditions","text":"TermsAndConditions is either a consent or a disclosure. documentType : The type of the terms and conditions. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.CONSENT_TYPE or ReferenceDataTypes.DISCLOSURE_TYPE . documentNameAndVersion : The URL of the versioned terms and conditions document the customer needs to review and accept. neededBeforeValidation : Whether or not the terms and conditions need to be accepted before calling any of the validate requests.","title":"TermsAndConditions"},{"location":"SDK-Guide/android-sdk/#initiateapplication","text":"This is the only call that must be executed prior any other one when processing an onboarding application. val response = sdk.onboardingClient.initiateApplication( InitiateApplicationRequest( productId = \"prepaidV1\" ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } val applicationId = response.basicDetails.applicationId Log.d(TAG, \"Verification needed for an onboarding application:\") initiateApplicationResponse.basicDetails.verificationNeeded.forEach { Log.d(TAG, it.toString()) }","title":"initiateApplication"},{"location":"SDK-Guide/android-sdk/#initiateapplicationrequest","text":"bundleId : The unique identifier of the bundle being applied for. \"despositV1\" : Deposit account without card. \"prepaidV1\" : Account and prepaid-card. \"creditcardV1\" : Account with credit card. \"productlessV1\" : Onboard a customer and do not validate his identity. \"kycV1\" : Onboard a customer, but do validate his identity.","title":"InitiateApplicationRequest"},{"location":"SDK-Guide/android-sdk/#initiateapplicationresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . The returned application CONSENT TYPE and DOCUMENT NAME AND VERSION are required in consent update request.","title":"InitiateApplicationResponse"},{"location":"SDK-Guide/android-sdk/#getconsentelectroniccommunication","text":"val response = sdk.onboardingClient.getConsentElectronicCommunication()","title":"getConsentElectronicCommunication"},{"location":"SDK-Guide/android-sdk/#getconsenttermsofuse","text":"val response = sdk.onboardingClient.getConsentTermsOfUse()","title":"getConsentTermsOfUse"},{"location":"SDK-Guide/android-sdk/#getconsentproductagreement","text":"val response = sdk.onboardingClient.getConsentProductAgreement()","title":"getConsentProductAgreement"},{"location":"SDK-Guide/android-sdk/#getconsentprivacypolicy","text":"val response = sdk.onboardingClient.getConsentPrivacyPolicy() The returned application ID is required in every other request.","title":"getConsentPrivacyPolicy"},{"location":"SDK-Guide/android-sdk/#updatepersonaldetails","text":"val response = sdk.onboardingClient.updatePersonalDetails( UpdatePersonalDetailsRequest( onboardingApplicationId = applicationId, customerPersonalDetails = PersonalDetails( firstName = \"John\", middleName = null, lastName = \"Miller\", dateOfBirth = LocalDate.of(1941, 5, 24), alias = null ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"updatePersonalDetails"},{"location":"SDK-Guide/android-sdk/#updatepersonaldetailsrequest","text":"Used to update the customer personal details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerPersonalDetails : See personal details .","title":"UpdatePersonalDetailsRequest"},{"location":"SDK-Guide/android-sdk/#updatepersonaldetailsresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdatePersonalDetailsResponse"},{"location":"SDK-Guide/android-sdk/#personaldetails","text":"firstName : The customer first name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. middleName : The customer middle name. This value is optional and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. lastName : The customer last name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. dateOfBirth : The customer's date of birth. alias : The customer alias. This value is optional and has a maximum of 20 characters. Accepts alphanumeric input without special characters.","title":"PersonalDetails"},{"location":"SDK-Guide/android-sdk/#updatecontactdetails","text":"val contactPhoneNumber = PhoneNumber(smsCompatible = true, number = \"+15141234567\") val response = sdk.onboardingClient.updateContactDetails( UpdateContactDetailsRequest( onboardingApplicationId = applicationId, customerContactDetails = ContactDetails( customerEmail = \"john.miller@mail.com\", contactPhoneNumber = contactPhoneNumber ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"updateContactDetails"},{"location":"SDK-Guide/android-sdk/#updatecontactdetailsrequest","text":"Used to update the customer contact details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerContactDetails : See contact details .","title":"UpdateContactDetailsRequest"},{"location":"SDK-Guide/android-sdk/#updatecontactdetailsresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateContactDetailsResponse"},{"location":"SDK-Guide/android-sdk/#contactdetails","text":"contactPhoneNumber : The contact phone number. This value is optional and must be in a valid phone number format. customerEmail : The contact email address. This value is required and must be in a valid email address format.","title":"ContactDetails"},{"location":"SDK-Guide/android-sdk/#updateaccountdetails","text":"Fetch account purpose and source of funds values from reference data client . dataType = ReferenceDataTypes.ACCOUNT_PURPOSE dataType = ReferenceDataTypes.SOURCE_OF_FUNDS val response = sdk.onboardingClient.updateAccountDetails( UpdateAccountDetailsRequest( onboardingApplicationId = applicationId, accountDetails = AccountUsageDetails( accountPurpose = accountPurposeCode, primarySourceOfFunds = listOf(sourceOfFundsCode), authorizedThirdPartyUsage = authorizedThirdPartyUsage ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"updateAccountDetails"},{"location":"SDK-Guide/android-sdk/#updateaccountdetailsrequest","text":"Used to update the customer account details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. accountDetails : See account usage details .","title":"UpdateAccountDetailsRequest"},{"location":"SDK-Guide/android-sdk/#updateaccountdetailsresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateAccountDetailsResponse"},{"location":"SDK-Guide/android-sdk/#accountusagedetails","text":"Providing the source of funds and purpose for applying for an Account. accountPurpose : The intended purpose of the Account. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.ACCOUNT_PURPOSE . primarySourceOfFunds : The values stored here are a collection of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.SOURCE_OF_FUNDS . authorizedThirdPartyUsage : Indicates wether or not the account will be used on behalf of third parties not otherwise identified as owners or authorized users. True means that account will be used on behalf of third parties while false means that account will not be used on behalf of third parties.","title":"AccountUsageDetails"},{"location":"SDK-Guide/android-sdk/#updateaddresses","text":"You need to use AddressClient to get the user's address. val response = sdk.onboardingClient.updateAddresses( UpdateAddressesRequest( onboardingApplicationId = applicationId, addresses = listOf(address) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"updateAddresses"},{"location":"SDK-Guide/android-sdk/#updateaddressesrequest","text":"Used to update the addresses occupied by the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. addresses : Collection of addresses occupied by the customer. See Address .","title":"UpdateAddressesRequest"},{"location":"SDK-Guide/android-sdk/#updateaddressesresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateAddressesResponse"},{"location":"SDK-Guide/android-sdk/#address","text":"type : The type of Address being represented. Must be either \"HOME\" or \"WORK\" (required). organization : The first line of the Address. This value is required and has a maximum of 300 characters. line1 : The first line of the Address. This value is required and has a maximum of 300 characters. line2 : The second line of the Address. This value is optional, and has a maximum of 300 characters. line3 : The third line of the Address. This value is optional, and has a maximum of 300 characters. line4 : The fourth line of the Address. This value is optional, and has a maximum of 300 characters. line5 : The fifth line of the Address. This value is optional, and has a maximum of 300 characters. line6 : The sixth line of the Address. This value is optional, and has a maximum of 300 characters. line7 : The seventh line of the Address. This value is optional, and has a maximum of 300 characters. line8 : The eighth line of the Address. This value is optional, and has a maximum of 300 characters. locality : The local sub administrative area such as the municipality or community name. In Canadian and US addresses, this corresponds to the city or town name. This value is optional and has a maximum of 150 characters. e.g. Toronto, Orlando. dependentLocality : The municipality or community name of the major postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. doubleDependentLocality : The municipality or community name of the local postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. administrativeArea : The name of the first level administrative area. This value is optional and has a maximum of 150 characters. e.g. For US this would be 'State' and Canada this would be 'Province' subAdministrativeArea : The name of the second level administrative area. This value is optional and has a maximum of 150 characters. e.g. For a city use 'City', county use 'County', etc. area : The name of country first level administrative subdivision area in the address. For Canada, this is name of the province and for the US this is the name of the State. This field is required and has postalCode : The local postal code for routing mail to the address and should contain the ZIP code for US addresses. This field is required and has a maximum of 150 characters. country : The name of the country for the Address. This value is required and has a maximum of 50 characters.","title":"Address"},{"location":"SDK-Guide/android-sdk/#updateconsents","text":"Fetch consent values from reference data client with dataType = ReferenceDataTypes.CONSENT_TYPE . val response = sdk.onboardingClient.updateConsents( UpdateConsentsRequest( onboardingApplicationId = applicationId, consents = listOf( Consent( consentType = consentType.code, documentNameAndVersion = \"https://must-be-a-well-formed-url.com/document/1.0\", consentTimestamp = Instant.now(), viewTimestamp = Instant.now() ) ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"updateConsents"},{"location":"SDK-Guide/android-sdk/#updateconsentsrequest","text":"Used to update the consents received from the customer for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. consents : Collection of consents. See Consent .","title":"UpdateConsentsRequest"},{"location":"SDK-Guide/android-sdk/#updateconsentsresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateConsentsResponse"},{"location":"SDK-Guide/android-sdk/#consent","text":"Consent is indicating the receipt of a requested customer Consent. consentType : The type of Consent received from the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.CONSENT_TYPE . documentNameAndVersion : The name and version of the document in URL format that the customer consented to. viewTimestamp : The UTC timestamp when the customer viewed the document.","title":"Consent"},{"location":"SDK-Guide/android-sdk/#updatecustomerresidency","text":"val response = sdk.onboardingClient.updateCustomerResidency( UpdateCustomerResidencyRequest( onboardingApplicationId = applicationId, residency = CustomerResidency( isCanadianTaxResident = true, citizenship = \"CA\" ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"updateCustomerResidency"},{"location":"SDK-Guide/android-sdk/#updatecustomerresidencyrequest","text":"Uused to update the customer residency status in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. residency : The customer residency status. See CustomerResidency .","title":"UpdateCustomerResidencyRequest"},{"location":"SDK-Guide/android-sdk/#updatecustomerresidencyresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateCustomerResidencyResponse"},{"location":"SDK-Guide/android-sdk/#customerresidency","text":"Contains the residency status details of the customer. isCanadianTaxResident : The Canadian residency status. This is true if the customer is a Canadian resident, false otherwise. otherResidences : A collection of other countries where the customer has residence. At least one is required if not a Canadian resident. See OtherResidence . sinToken : A tokenized UUID representation of the customer SIN number. citizenship : The primary or current citizenship of the customer. The format is an ISO 3166 Country alpha-2 code (e.g. US, CA, FR).","title":"CustomerResidency"},{"location":"SDK-Guide/android-sdk/#otherresidence","text":"Alternate countries and places of residence. otherResidenceCountry : The name of the other country of residence. tinToken : A tokenized UUID representation of the unique TIN for the country of residence. Optional. citizenship : The citizenship status in the country of residence. Required if residence country is US or Canada.","title":"OtherResidence"},{"location":"SDK-Guide/android-sdk/#updatedisclosures","text":"Fetch disclosure type values from reference data client with dataType = ReferenceDataTypes.DISCLOSURE_TYPE . val response = sdk.onboardingClient.updateDisclosures( UpdateDisclosuresRequest( onboardingApplicationId = applicationId, disclosures = listOf( Disclosure( disclosureType = disclosureType.code, documentNameAndVersion = \"https://must-be-a-well-formed-url.com/document/1.0\", timestamp = Instant.now() ) ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"updateDisclosures"},{"location":"SDK-Guide/android-sdk/#updatedisclosuresrequest","text":"Used to update the disclosures received by the customer in the onboarding application onboardingApplicationId : The UUID of the onboarding application to update. disclosures : Collection of disclosures. See Disclosure .","title":"UpdateDisclosuresRequest"},{"location":"SDK-Guide/android-sdk/#updatedisclosuresresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateDisclosuresResponse"},{"location":"SDK-Guide/android-sdk/#disclosure","text":"Customer receipt of a documented Disclosure. disclosureType : The type of Disclosure sent to the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.DISCLOSURE_TYPE . timestamp : The UTC timestamp when the customer viewed the document. documentNameAndVersion : Name and version of the disclosure document in URL format that the customer viewed.","title":"Disclosure"},{"location":"SDK-Guide/android-sdk/#updateemployment","text":"Fetch employment status from reference data client . dataType = ReferenceDataTypes.OCCUPATION dataType = ReferenceDataTypes.INDUSTRY dataType = ReferenceDataTypes.EMPLOYMENT_STATUS val phoneNumber = PhoneNumber(smsCompatible = true,number = \"+14507654321\") val response = sdk.onboardingClient.updateEmployment( UpdateEmploymentRequest( onboardingApplicationId = applicationId, employmentInfo = Employment( employmentStatus = employmentStatus.code, employerName = \"Finaptic\", occupation = occupation.code, industry = industry.code, workAddress = address, phoneNumber = phoneNumber, startDate = LocalDate.of(2019, 1, 1), endDate = LocalDate.of(2020, 12, 31) ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"updateEmployment"},{"location":"SDK-Guide/android-sdk/#updateemploymentrequest","text":"Used to update the customer employment information in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. employmentInfo : Employment information. See Employment .","title":"UpdateEmploymentRequest"},{"location":"SDK-Guide/android-sdk/#updateemploymentresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateEmploymentResponse"},{"location":"SDK-Guide/android-sdk/#employment","text":"Employment defines the details of Employment for the customer being onboarded. employmentStatus : The status of Employment. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.EMPLOYMENT_STATUS . employerName : The full employer name. The value is required and has a maximum of 50 characters. industry : The industry code the Employment is in. This value is required and has a maximum of 50 characters. The value is retrieved from the / ReferenceDataClient with dataType set to ReferenceDataTypes.INDUSTRY . occupation : The roles and duties the customer performs for the employer. This value is optional and has a maximum of 50 characters. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.OCCUPATION . If the employment status is 'EMPLOYMENT_STATUS_UNEMPLOYED', 'EMPLOYMENT_STATUS_RETIRED', 'EMPLOYMENT_STATUS_STUDENT_UNEMPLOYED', or 'EMPLOYMENT_STATUS_HOMEMAKER' then the Occupation field must be left empty. startDate : The month and year the customer started this position. endDate : The month and year the customer no longer held this position. workAddress : The 'type' field must be set to 'WORK'. Required. See Address . phoneNumber : The phone number of the employer. Required.","title":"Employment"},{"location":"SDK-Guide/android-sdk/#updatecommunicationpreferences","text":"Fetch communication preferences from reference data client with dataType = ReferenceDataTypes.COMMUNICATION_PREFERENCE . val response = sdk.onboardingClient.updateCommunicationPreferences( UpdateCommunicationPreferencesRequest( onboardingApplicationId = applicationId, customerCommunicationPref = communicationPreferences.code ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"updateCommunicationPreferences"},{"location":"SDK-Guide/android-sdk/#updatecommunicationpreferencesrequest","text":"Used to update the communication preferences of the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerCommunicationPref : The customer communication preference. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.COMMUNICATION_PREFERENCE . customerCommunicationLanguage : The customer communication language. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.LANGUAGE .","title":"UpdateCommunicationPreferencesRequest"},{"location":"SDK-Guide/android-sdk/#updatecommunicationpreferencesresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateCommunicationPreferencesResponse"},{"location":"SDK-Guide/android-sdk/#createfileuploadurl","text":"Create upload url for document front, back and selfie. val fileUploadURL = sdk.onboardingClient.createFileUploadURL( CreateFileUploadUrlRequest( onboardingApplicationId = applicationId ) )","title":"createFileUploadURL"},{"location":"SDK-Guide/android-sdk/#createfileuploadurlrequest","text":"onboardingApplicationId : The UUID representing the onboarding application that requested a file upload URL.","title":"CreateFileUploadUrlRequest"},{"location":"SDK-Guide/android-sdk/#createfileuploadurlresponse","text":"filename : The generated name for the file to upload. This value must be used for ValidateDocumentsRequest or ValidateSelfieRequest . uploadUrl : The URL to use to upload the file.","title":"CreateFileUploadUrlResponse"},{"location":"SDK-Guide/android-sdk/#validatedocuments","text":"Fetch document types from reference data client with dataType = ReferenceDataTypes.DOCUMENT_TYPE . val response = sdk.onboardingClient.validateDocuments( ValidateDocumentsRequest( onboardingApplicationId = applicationId, documentDetails = listOf( DocumentInfo( documentType = documentType.code, documentCountry = \"CA\", frontImageFileName = idFrontFileUpload.filename, backImageFileName = idBackFileUpload.filename, // The state issuing the document used to identify the applicant. // documentState must be set when document type is driver license. // The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataTypes.STATE concatenate with country code retrieved from dataType set to ReferenceDataTypes.COUNTRY. // e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...) documentState = documentStateType.code ) ) ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected ) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. val failureStatusCodes = response.basicDetails.failureStatusCodes if (failureStatusCodes.isNotEmpty()) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.FAILURE_CODE. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY Log.d(TAG, \"failureStatusCodes: $failureStatusCodes\") } }","title":"validateDocuments"},{"location":"SDK-Guide/android-sdk/#validatedocumentsrequest","text":"Used to perform operation of validating the identification documents received from the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to validate. documentDetails : Collection of documents to validate. See DocumentInfo .","title":"ValidateDocumentsRequest"},{"location":"SDK-Guide/android-sdk/#validatedocumentsresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.FAILURE_CODE . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\"","title":"ValidateDocumentsResponse"},{"location":"SDK-Guide/android-sdk/#documentinfo","text":"Details of an onboarding document collected from the customer to prove identity. documentType : The type of document used for identification. The value here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.DOCUMENT_TYPE . e.g. \"DOCUMENT_TYPE_CANADIAN_DRIVERS_LICENSE\" or \"DOCUMENT_TYPE_CANADIAN_PASSPORT\" . documentCountry : The country the document was issued for. frontImageFileName : The file name of the uploaded image of the front of the document. (required, file size <4MB) backImageFileName : The file name of the uploaded image of the back of the document. (required, file size <4MB) documentState : The state issuing the document used to identify the applicant. The value here is one of the code values retrieved from the ReferenceDataClient with dataType set to \"STATE_\" concatenate with country code retrieved from dataType set to ReferenceDataTypes.COUNTRY . e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...)","title":"DocumentInfo"},{"location":"SDK-Guide/android-sdk/#validateselfie","text":"val response = sdk.onboardingClient.validateSelfie( ValidateSelfieRequest( onboardingApplicationId = applicationId, fileName = fileUpload.filename ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected ) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. val failureStatusCodes = response.basicDetails.failureStatusCodes if (failureStatusCodes.isNotEmpty()) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.FAILURE_CODE. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY Log.d(TAG, \"failureStatusCodes: $failureStatusCodes\") } }","title":"validateSelfie"},{"location":"SDK-Guide/android-sdk/#validateselfierequest","text":"Used to perform operation of validating the selfie pictures received from the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to validate. fileName : The name of the selfie file to validate. (required, file size <4MB)","title":"ValidateSelfieRequest"},{"location":"SDK-Guide/android-sdk/#validateselfieresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.FAILURE_CODE . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\"","title":"ValidateSelfieResponse"},{"location":"SDK-Guide/android-sdk/#validateapplication","text":"val response = sdk.onboardingClient.validateApplication( ValidateApplicationRequest( onboardingApplicationId = applicationId ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected ) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. val failureStatusCodes = response.basicDetails.failureStatusCodes if (failureStatusCodes.isNotEmpty()) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.FAILURE_CODE. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY Log.d(TAG, \"failureStatusCodes: $failureStatusCodes\") } }","title":"validateApplication"},{"location":"SDK-Guide/android-sdk/#validateapplicationrequest","text":"Used to perform operation of validating the entire onboarding application and all documents received from the customer. onboardingApplicationId : The UUID of the onboarding application to validate.","title":"ValidateApplicationRequest"},{"location":"SDK-Guide/android-sdk/#validateapplicationresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.FAILURE_CODE . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\"","title":"ValidateApplicationResponse"},{"location":"SDK-Guide/android-sdk/#acceptapplication","text":"val response = sdk.onboardingClient.acceptApplication( AcceptApplicationRequest( onboardingApplicationId = applicationId ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"acceptApplication"},{"location":"SDK-Guide/android-sdk/#acceptapplicationrequest","text":"Used to perform operation of accepting the onboarding application received from the customer. onboardingApplicationId : The UUID of the onboarding application to accept.","title":"AcceptApplicationRequest"},{"location":"SDK-Guide/android-sdk/#acceptapplicationresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"AcceptApplicationResponse"},{"location":"SDK-Guide/android-sdk/#finalizeapplicationcreatecustomer","text":"The user needs to be authenticated before you create a customer. val response = sdk.onboardingClient.finalizeApplicationCreateCustomer( FinalizeApplicationCreateCustomerRequest( onboardingApplicationId = applicationId ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"finalizeApplicationCreateCustomer"},{"location":"SDK-Guide/android-sdk/#finalizeapplicationcreatecustomerrequest","text":"Used to perform operation of creating the customer for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to create a customer for.","title":"FinalizeApplicationCreateCustomerRequest"},{"location":"SDK-Guide/android-sdk/#finalizeapplicationcreatecustomerresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . customerId : The UUID representing the newly created customer.","title":"FinalizeApplicationCreateCustomerResponse"},{"location":"SDK-Guide/android-sdk/#finalizeapplicationcreateproduct","text":"val response = sdk.onboardingClient.finalizeApplicationCreateProduct( FinalizeApplicationCreateProductRequest( onboardingApplicationId = applicationId ) ) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"finalizeApplicationCreateProduct"},{"location":"SDK-Guide/android-sdk/#finalizeapplicationcreateproductrequest","text":"Used to perform operation of creating the product for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to create the product for.","title":"FinalizeApplicationCreateProductRequest"},{"location":"SDK-Guide/android-sdk/#finalizeapplicationcreateproductresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . products : Collection of products created. See OnboardedProduct .","title":"FinalizeApplicationCreateProductResponse"},{"location":"SDK-Guide/android-sdk/#cancelapplication","text":"Canceling the onboarding application. val request = CancelApplicationRequest(onboardingApplicationId = applicationId) val response = sdk.onboardingClient.cancelApplication(request) if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. }","title":"cancelApplication"},{"location":"SDK-Guide/android-sdk/#cancelapplicationrequest","text":"onboardingApplicationId : The UUID of the onboarding application to cancel.","title":"CancelApplicationRequest"},{"location":"SDK-Guide/android-sdk/#cancelapplicationresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"CancelApplicationResponse"},{"location":"SDK-Guide/android-sdk/#onboardedproduct","text":"productId : The UUID of the onboarded product. sourceDomain : The source domain of the onboarded product.","title":"OnboardedProduct"},{"location":"SDK-Guide/android-sdk/#authorized-users","text":"","title":"Authorized Users"},{"location":"SDK-Guide/android-sdk/#inviteauthorizeduser","text":"try { val request = InviteAuthorizedUserRequest( invitedCustomerIdentifier = \"test@finaptic.com\", accountId = account.id) val response = sdk.onboardingClient.inviteAuthorizedUser(request) Log.d(TAG, \"Invite authorized user success with id ${response.invitation.invitationId}\") } catch (e: FinapticException) { Log.e(TAG, \"Invite authorized user error\", e) }","title":"InviteAuthorizedUser"},{"location":"SDK-Guide/android-sdk/#inviteauthorizeduserrequest","text":"Used to perform operation of inviting a user to join an account as an authorized user. invitedCustomerIdentifier : The identifier to be used to lookup for the invited customer. This can either the username, or the email address of the customer to invite. If the identifier does not map to any known user, the operation will succeed, if this occurs the invitation will expire automatically after a period of time, without having been accepted or declined. accountId : The ID of the account on which an authorized user is to be added. The customer issuing the request must be an Owner for the account. invitationMetadata : Optional. Additional metadata to attach to the invitation, to be consumed by the invited user before accepting the invitation.","title":"InviteAuthorizedUserRequest"},{"location":"SDK-Guide/android-sdk/#inviteauthorizeduserresponse","text":"invitation : The resulting invitation created by the InviteAuthorizedUserRequest. See AuthorizedUserInvitation for details. Errors: If the customer mapping to this identifier is already an Owner or an Authorized User for the account, then the operation will fail with a FinapticExceptionCode.ALREADY_EXISTS code, and provide a message indicating the reason for the conflict. If there is already an invitation that was issued for this account, for the invited user, the operation will fail with an FinapticExceptionCode.ALREADY_EXISTS code, and provide a message indicating the reason for the conflict. If the customer issuing the request isn't an Owner, then the operation will fail with a FinapticExceptionCode.PERMISSION_DENIED code, and provide a message indicating the reason. If there is already an invitation that was issued for this account, for the invited customer, the operation will fail with a FinapticExceptionCode.ALREADY_EXISTS code, and provide a message indicating the reason for the conflict.","title":"InviteAuthorizedUserResponse"},{"location":"SDK-Guide/android-sdk/#authorizeduserinvitation","text":"invitationId : The unique identifier of the invitation. This value is required to Accept, Decline, or Confirm invitations. issuerCustomerId : The customer ID of the person that issued the invitation. invitedCustomerId : The customer ID of the person that was invited to join the account as an authorized user. accountId : The account ID for which an invitation was sent. status : The current status of the invitation. Refer to AuthorizedUserInvitationStatus enumeration for details on statuses and meaning. creationTime : The time at which the invitation was issued. expirationTime : Time at which it will no longer be possible for the invited customer to Accept the invitation. invitationMetadata : Additional metadata that has been attached to the invitation. This will contain the metadata specified by the last operation on the invitation.","title":"AuthorizedUserInvitation"},{"location":"SDK-Guide/android-sdk/#authorizeduserinvitationstatus-enum","text":"pending : Represents an invitation that is waiting for an accept or decline response from the invited user. accepted : Represents an invitation that was accepted by the invited user, and pending completion by the issuer of the invitation. declined : Represents an invitation that was declined by the invited user. A declined invitation cannot be completed. completed : Represents an invitation that was successfully completed by the issuer of the invitation. In this status, the invited customer has successfully joined the account as an Authorized User. expired : Represents an invitation that wasn't accepted or declined within the allotted time. An expired invitation cannot be accepted or declined.","title":"AuthorizedUserInvitationStatus enum"},{"location":"SDK-Guide/android-sdk/#acceptauthorizeduserinvitation","text":"try { val request = AcceptAuthorizedUserInvitationRequest(invitationId = invitation.invitationId) sdk.onboardingClient.acceptAuthorizedUserInvitation(request) Log.d(TAG, \"Accepted authorized user invitation\") } catch (e: FinapticException) { Log.e(TAG, \"Accept authorized user invitation error:\", e) }","title":"AcceptAuthorizedUserInvitation"},{"location":"SDK-Guide/android-sdk/#acceptauthorizeduserinvitationrequest","text":"Used to perform operation of accepting an invitation issued to the user to join an account as an authorized user. invitationId : The ID of the invitation to accept. This must represent a valid invitation that was issued to the current user. invitationMetadata : Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter before confirming the invitation.","title":"AcceptAuthorizedUserInvitationRequest"},{"location":"SDK-Guide/android-sdk/#acceptauthorizeduserinvitationresponse","text":"Response intentionally left without fields. Errors: If the current user is not the user the invitation was issued to, then the operation will fail with a FinapticExceptionCode.PERMISSION_DENIED code, and provide a message indicating the reason for the conflict. If the invitation is not in the Pending status, the operation will fail with a FinapticExceptionCode.FAILED_PRECONDITION code, and provide a message indicating that status was invalid. If the invitation has expired, the operation will also fail with a FinapticExceptionCode.FAILED_PRECONDITION code, and provide a message indicating that invitation has expired.","title":"AcceptAuthorizedUserInvitationResponse"},{"location":"SDK-Guide/android-sdk/#declineauthorizeduserinvitation","text":"try { val request = DeclineAuthorizedUserInvitationRequest(invitationId = invitation.invitationId) sdk.onboardingClient.declineAuthorizedUserInvitation(request) Log.d(TAG, \"Declined authorized user invitation\") } catch (e: FinapticException) { Log.e(TAG, \"Decline authorized user invitation error\", e) }","title":"DeclineAuthorizedUserInvitation"},{"location":"SDK-Guide/android-sdk/#declineauthorizeduserinvitationrequest","text":"invitationId : The ID of the invitation to decline. This must represent a valid invitation that was issued to the current user. invitationMetadata : Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter when reviewing invitation status.","title":"DeclineAuthorizedUserInvitationRequest"},{"location":"SDK-Guide/android-sdk/#declineauthorizeduserinvitationresponse","text":"Response intentionally left without fields. Errors: If the current user is not the user the invitation was issued to, then the operation will fail with a FinapticExceptionCode.PERMISSION_DENIED code, and provide a message indicating the reason for the conflict. If the invitation is not in the Pending status, the operation will fail with a FinapticExceptionCode.FAILED_PRECONDITION code, and provide a message indicating that status was invalid. If the invitation has expired, the operation will also fail with a FinapticExceptionCode.FAILED_PRECONDITION code, and provide a message indicating that invitation has expired.","title":"DeclineAuthorizedUserInvitationResponse"},{"location":"SDK-Guide/android-sdk/#confirmauthorizeduserinvitation","text":"try { val request = ConfirmAuthorizedUserInvitationRequest(invitationId = invitation.invitationId) sdk.onboardingClient.confirmAuthorizedUserInvitation(request) Log.d(TAG, \"Confirmed authorized user invitation\") } catch (e: FinapticException) { Log.e(TAG, \"Confirm authorized user invitation error:\", e) }","title":"ConfirmAuthorizedUserInvitation"},{"location":"SDK-Guide/android-sdk/#confirmauthorizeduserinvitationrequest","text":"Used to perform operation of confirming an invitation that was accepted by the invited customer. invitationId : The ID of the invitation to confirm.","title":"ConfirmAuthorizedUserInvitationRequest"},{"location":"SDK-Guide/android-sdk/#confirmauthorizeduserinvitationresponse","text":"Response intentionally left without fields. Errors: If the current user is not the issuer of the invitation, then the operation will fail with a FinapticExceptionCode.PERMISSION_DENIED code, and provide a message indicating the reason for the conflict. If the invitation is not in the Accepted status, the operation will fail with a FinapticExceptionCode.FAILED_PRECONDITION code, and provide a message indicating that status was invalid.","title":"ConfirmAuthorizedUserInvitationResponse"},{"location":"SDK-Guide/android-sdk/#removeauthorizeduser","text":"try { val request = RemoveAuthorizedUserRequest( accountId = invitation.accountId, authorizedUser = invitation.invitedCustomerId) sdk.onboardingClient.removeAuthorizedUser(request) Log.d(TAG, \"Removed authorized user\") } catch (e: FinapticException) { Log.e(TAG, \"Remove authorized user error:\", e) } A user can remove an authorized user only if they have completed the step up authentication with a scope set to \"remove:authorized_user\" . try { val request = SignInRequest(credential = credential, scope = \"remove:authorized_user\") sdk.authenticationClient.signIn(request) } catch(e: FinapticException) { Log.e(TAG, \"Sign in error:\", e) }","title":"RemoveAuthorizedUser"},{"location":"SDK-Guide/android-sdk/#removeauthorizeduserrequest","text":"Used to remove an authorized user from the provided Account. accountId : The ID of the Account where the authorized is removed from. authorizedUser : The ID of the authorized user to add to the Account.","title":"RemoveAuthorizedUserRequest"},{"location":"SDK-Guide/android-sdk/#removeauthorizeduserresponse","text":"authorizedUsers : The resulting list of authorized users of the Account.","title":"RemoveAuthorizedUserResponse"},{"location":"SDK-Guide/android-sdk/#getinvitations","text":"Returns the list of invitations for the current user. This will include invitations issued by the current user, as well as invitations where the current user is the invited customer. This operation always return all invitations, including invitations that are pending, expired, have been accepted, declined, require confirmation or that have already been completed. try { val response = sdk.onboardingClient.getInvitations(request = GetAuthorizedUserInvitationsRequest()) response.invitations.forEach { Log.d(TAG, \"Invitation with ${it.status} status and id ${it.invitationId} \") } } catch (e: FinapticException) { Log.e(TAG, \"Get invitations error:\", e) }","title":"GetInvitations"},{"location":"SDK-Guide/android-sdk/#getauthorizeduserinvitationsrequest","text":"At this moment, there are no configurable options for this request.","title":"GetAuthorizedUserInvitationsRequest"},{"location":"SDK-Guide/android-sdk/#getauthorizeduserinvitationsresponse","text":"invitations : The list of invitations for the current user. See AuthorizedUserInvitation","title":"GetAuthorizedUserInvitationsResponse"},{"location":"SDK-Guide/android-sdk/#referencedataclient","text":"ReferenceDataTypes: ADDRESS_TYPE CONSENT_TYPE DISCLOSURE_TYPE DOCUMENT_TYPE COMMUNICATION_PREFERENCE ACCOUNT_PURPOSE SOURCE_OF_FUNDS EMPLOYMENT_STATUS ONBOARDING_STATUS COUNTRY STATE OCCUPATION INDUSTRY LANGUAGE FAILURE_CODE val accountPurposes = sdk.referenceDataClient .getReferenceDataByType( GetReferenceDataByTypeRequest( dataType = ReferenceDataTypes.ACCOUNT_PURPOSE, locale = \"EN_CA\" ) ).data","title":"ReferenceDataClient"},{"location":"SDK-Guide/android-sdk/#addressclient","text":"Address client provides a list of suggested addresses. Make sure to use debouncing or throttling when calling this function on user input. val suggestionsResponse = sdk.addressClient.getSuggestions( AddressSuggestionsRequest( onboardingApplicationId = applicationId, pattern = \"123\", addressType = AddressClient.HOME_ADDRESS_TYPE ) )","title":"AddressClient"},{"location":"SDK-Guide/android-sdk/#authenticationclient","text":"","title":"AuthenticationClient"},{"location":"SDK-Guide/android-sdk/#signup","text":"val credential = Credential( email = \"sample@finaptic.com\", password = \"Password1234!@#$\", username = \"Username\" ) try { sdk.authenticationClient.signUp(SignUpRequest(credential)) Log.d(TAG, \"Sign up success. Proceed to sign in.\") } catch (e: FinapticException) { Log.e(TAG, \"Sign up error\", e) } Possible error codes: FinapticExceptionCode.SIGNUP_CREDENTIAL_ERROR If the password used doesn't comply with the password policy for the connection. The user your are attempting to sign up is invalid. The chosen password is too weak FinapticExceptionCode.SIGNUP_ERROR : The chosen password is based on user information. eg. password contains email, username contains emails etc. The user you are attempting to sign up has already signed up. The username you are attempting to sign up with is already in use. The message property of FinapticException will give more information about the error.","title":"signUp"},{"location":"SDK-Guide/android-sdk/#credential","text":"email : Used to signUp or signIn the user. (requred for signUp) username : Username can be up to 15 characters, contain alphanumeric characters and the following characters: '_', '+', '-', '.', '!', '#', '$', ''', '^', '`', '~' and '@'.maxLength Can be used to sign up and sign in the user. It might be optional. password : Password must have at least 12 characters, 1 lowercase, 1 uppercase, 1 number and should not contain common words or email parts.","title":"Credential"},{"location":"SDK-Guide/android-sdk/#signin","text":"try { val signInResult = sdk.authenticationClient.signIn(SignInRequest(credential)) } catch (e: FinapticException) { Log.e(TAG, \"Sign in error\", e) } Possible error codes: FinapticExceptionCode.SIGNIN_ERROR The password provided for sign up/update has already been used (reported when password history feature is enabled). The account is blocked due to too many attempts to sign in. If the password has been leaked and a different one needs to be used. FinapticExceptionCode.SIGNIN_INVALID_PASSWORD The username and/or password used for authentication are invalid. The password provided does not match the connection's strength requirements. FinapticExceptionCode.MFA_ERROR : The multi-factor authentication (MFA) code provided by the user is invalid/expired. The administrator has required multi-factor authentication, but the user has not enrolled. The user must provide the multi-factor authentication code to authenticate. FinapticExceptionCode.SIGNIN_USER_BLOCKED : The account is blocked. You can ask the user to contact support. The message property of FinapticException will give more information about the error.","title":"signIn"},{"location":"SDK-Guide/android-sdk/#currentauthstate","text":"If the accessToken has expired, the client automatically uses the refreshToken and renews the credentials for you. Returns null if the user is unauthenticated. val currentState = sdk.authenticationClient.currentAuthState()","title":"currentAuthState"},{"location":"SDK-Guide/android-sdk/#refreshauthstate","text":"Returns null if the user is unauthenticated. val currentState = sdk.authenticationClient.refreshAuthState()","title":"refreshAuthState"},{"location":"SDK-Guide/android-sdk/#signout","text":"sdk.authenticationClient.signOut()","title":"signOut"},{"location":"SDK-Guide/android-sdk/#resetpassword","text":"If the call is successful and the email is registered, the user receives a password reset email. try { val email = \"sample@finaptic.com\" sdk.authenticationClient.resetPassword(request = ResetRequest(email = email)) } catch (e: FinapticException) { Log.d(TAG, \"Reset Password error\", e) }","title":"resetPassword"},{"location":"SDK-Guide/android-sdk/#corebankingclient","text":"","title":"CoreBankingClient"},{"location":"SDK-Guide/android-sdk/#getaccountdetails","text":"val request = GetAccountDetailsRequest(accountId) val response = sdk.coreBankingClient.getAccountDetails(request) val status = response.status val accruedInterest = response.accruedInterest","title":"getAccountDetails"},{"location":"SDK-Guide/android-sdk/#authstate","text":"accessToken : Current access token. refreshToken : Current refresh token.","title":"AuthState"},{"location":"SDK-Guide/android-sdk/#corecardclient","text":"","title":"CoreCardClient"},{"location":"SDK-Guide/android-sdk/#getcard","text":"Retrieves generic details about a single Card . try { val request = GetCardRequest(cardId = cardId) val card = sdk.coreCardClient.getCard(request) Log.d(TAG, \"Get card success with id ${response.id}\") } catch (e: FinapticException) { Log.d(TAG, \"Get card error\", e) }","title":"getCard"},{"location":"SDK-Guide/android-sdk/#getcardrequest","text":"cardId : The ID of the Card to retrieve.","title":"GetCardRequest"},{"location":"SDK-Guide/android-sdk/#listcards","text":"Lists all Cards associated to the current user. try { val request = ListCardsRequest( pageSize = 10, pageToken = null) val response = sdk.coreCardClient.listCards(request) Log.d(TAG, \"List card success\") } catch (e: FinapticException) { Log.d(TAG, \"List card error\", e) }","title":"listCards"},{"location":"SDK-Guide/android-sdk/#listcardsrequest","text":"pageSize : The maximum number of Cards to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListCardsResponse ). When no value is specified, then the initial page will be returned.","title":"ListCardsRequest"},{"location":"SDK-Guide/android-sdk/#listcardsresponse","text":"cards : The list of Cards requested. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListCardsRequest ). When no value is returned in this field, then no further data exists to be listed.","title":"ListCardsResponse"},{"location":"SDK-Guide/android-sdk/#revealcardinfo","text":"Reveals card information to the user. try { sdk.coreCardClient.revealCardInfo(cardId) Log.d(TAG, \"Reveal card info success\") } catch (e: FinapticException) { Log.d(TAG, \"Reveal card info error\", e) } A user can reveal card info only if they have completed the step up authentication with a scope set to \"view:card_number\" . try { val request = SignInRequest(credential = credential, scope = \"view:card_number\") sdk.authenticationClient.signIn(request) Log.d(TAG, \"You may call revealCardInfo\") } catch (e: FinapticException) { Log.d(TAG, \"Sign in error\", e) }","title":"revealCardInfo"},{"location":"SDK-Guide/android-sdk/#createauthorizedusercard","text":"try { val card = AuthorizedUserCard( cardType = CardType.CARD_TYPE_PREPAID, accountId = accountId ) val request = CreateAuthorizedUserCardRequest( card = card, authorizedUserId = authorizedUserId ) val response = sdk.coreCardClient.createAuthorizedUserCard(request) Log.d(TAG, \"Create authorized user card success: ${response.card}\") } catch (e: FinapticException) { Log.d(TAG, \"Create authorized user card error\", e) }","title":"createAuthorizedUserCard"},{"location":"SDK-Guide/android-sdk/#createauthorizedusercardrequest","text":"card : Refer to AuthorizedUserCard for details. authorizedUserId : The ID of the authorized user who will be the owner of the newly created card","title":"CreateAuthorizedUserCardRequest"},{"location":"SDK-Guide/android-sdk/#createauthorizedusercardresponse","text":"card : Refer to Card for details. Possible error codes: FinapticExceptionCode.CARDS_INVALID_ACCOUNT : If the account passed as argument does not exist or is not owned by the current user. FinapticExceptionCode.CARDS_INVALID_AUTH_USER : If the user ID passed as argument does not exist or is not an authorized user of the account.","title":"CreateAuthorizedUserCardResponse"},{"location":"SDK-Guide/android-sdk/#authorizedusercard","text":"cardType : The type of the Card. See CardType . accountId : The ID of the Account that will be linked to this Card. description : Optional description for this Card.","title":"AuthorizedUserCard"},{"location":"SDK-Guide/android-sdk/#lockcard","text":"This feature allows customers to prevent transactions from getting authorized while they confirm if a card is effectively lost. After finding the card if it is the case, they can re-enable the card by using the unlock function, see unlockCard . try { val request = LockCardRequest(cardId = cardId) sdk.coreCardClient.lockCard(request) Log.d(TAG, \"Lock card success\") } catch (e: FinapticException) { Log.d(TAG, \"Lock card error\", e) }","title":"lockCard"},{"location":"SDK-Guide/android-sdk/#lockcardrequest","text":"cardId : The ID of the card to be locked.","title":"LockCardRequest"},{"location":"SDK-Guide/android-sdk/#lockcardresponse","text":"card : The card in its current status as result of the operation. See Card . Errors FinapticExceptionCode.CARDS_INVALID_CARD_ID : If the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user.","title":"LockCardResponse"},{"location":"SDK-Guide/android-sdk/#unlockcard","text":"This feature allows customers to re-enable transactions on the card if they find it after suspecting it lost. try { val request = UnlockCardRequest(cardId = cardId) sdk.coreCardClient.unlockCard(request) Log.d(TAG, \"Unlock card success\") } catch (e: FinapticException) { Log.d(TAG, \"Unlock card error\", e) }","title":"unlockCard"},{"location":"SDK-Guide/android-sdk/#unlockcardrequest","text":"cardId : The ID of the locked card to be unlocked.","title":"UnlockCardRequest"},{"location":"SDK-Guide/android-sdk/#unlockcardresponse","text":"card : The card in its current status as result of the operation. See Card . Errors FinapticExceptionCode.CARDS_INVALID_CARD_ID : If the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user.","title":"UnlockCardResponse"},{"location":"SDK-Guide/android-sdk/#card","text":"id : The ID of this Card. cardType : The type of the Card. See CardType . accountId : The ID of the Account linked to this Card. description : The description for this Card. state : Describes the current state of the card. See CardState . ownerId : The user ID of the card owner.","title":"Card"},{"location":"SDK-Guide/android-sdk/#cardtype-enum","text":"CARD_TYPE_UNSPECIFIED : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. CARD_TYPE_PREPAID : Represents a Prepaid Card.","title":"CardType enum"},{"location":"SDK-Guide/android-sdk/#cardstate-enum","text":"CARD_STATE_UNSPECIFIED : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. CARD_STATE_ACTIVE : Indicates that the card is ready to be used. CARD_STATE_LOCKED : Indicates that the card is temporarily blocked for usage.","title":"CardState enum"},{"location":"SDK-Guide/android-sdk/#helpcenter","text":"The help center adds the ability to connect a Finaptic Customer Service agent for L2+ escalations. We provide APIs to integrate existing customer service chat / threaded conversations into your client application. The expectation is that a new chat should be triggered by an L1 customer support agent, while customers should be able to resume existing threads to provide additional information or view responses from Finaptic. Start customer support chat List chat threads Get a chat thread's history","title":"HelpCenter"},{"location":"SDK-Guide/android-sdk/#startchat","text":"Create StartChatRequest . displayName can be username. You can get it from AuthenticationClient's getUserInfo . subject provided by the customer when starting a new chat or from ChatThread . contactCaseId is used to resume a thread. Use null to start a new one. val request = StartChatRequest(displayName = displayName, subject = subject, contactCaseId = nil) Calling startChat will try to connect and return ChatClient . try { val chatClient = sdk.helpCenter.startChat(startChatRequest) } catch(e: FinapticException) { Log.e(TAG, \"Start chat error:\", e) }","title":"startChat"},{"location":"SDK-Guide/android-sdk/#listchatthreads","text":"Note: This method can be called after Customer is created . Create ListChatThreadsRequest . nextToken is provided by ListChatThreadsResponse and can be used to get next page. val request = ListChatThreadsRequest(nextToken = null) On success, listChatThreads will return ListChatThreadsResponse . try { val response = sdk.helpCenter.listChatThreads(request) Log.d(TAG, \"List chat threads success. Threads: ${response.items.count()}\") } catch(e: FinapticException) { Log.e(TAG, \"List chat threads error:\", e) }","title":"listChatThreads"},{"location":"SDK-Guide/android-sdk/#listchatthreadsresponse","text":"nextToken can be used to fetch next page. items is an array of ChatThread","title":"ListChatThreadsResponse"},{"location":"SDK-Guide/android-sdk/#chatthread","text":"id lastUpdated status is ChatThreadStatus . subject provided by the customer when starting a new chat. createdAt customerId","title":"ChatThread"},{"location":"SDK-Guide/android-sdk/#chatthreadstatus-enum","text":"WAITING_FOR_AGENT WAITING_FOR_CUSTOMER when an agent has responded and needs more information from the customer. Waiting for customer should indicate there is an unread message. RESOLVED","title":"ChatThreadStatus enum"},{"location":"SDK-Guide/android-sdk/#listchathistory","text":"Note: This method can be called after Customer is created . Create ListChatHistoryRequest . contactId is the id of ChatThread . nextToken is provided by ListChatHistoryResponse and can be used to get next page. val request = ListChatHistoryRequest(contactId = contactId, nextToken = nil) On success, listChatHistory will return ListChatHistoryResponse . try { val response = sdk.helpCenter.listChatHistory(request) Log.d(TAG, \"List chat history success. Messages: ${response.items.count()}\") } catch(e: FinapticException) { Log.e(TAG, \"List chat history error:\", e) }","title":"listChatHistory"},{"location":"SDK-Guide/android-sdk/#listchathistoryresponse","text":"nextToken used to fetch next page. items is an array of ChatMessage","title":"ListChatHistoryResponse"},{"location":"SDK-Guide/android-sdk/#chatclient","text":"","title":"ChatClient"},{"location":"SDK-Guide/android-sdk/#sendmessage","text":"val request = SendMessageRequest(messageContent = \"Text message\") try { chatClient.sendMessage(sendMessageRequest) Log.d(TAG, \"Chat message sent.\") } catch(e: FinapticException) { Log.e(TAG, \"Send message error:\", e) }","title":"sendMessage"},{"location":"SDK-Guide/android-sdk/#messages","text":"Message history in descending order. It's a list of ChatMessage .","title":"messages"},{"location":"SDK-Guide/android-sdk/#receivemessage","text":"Deliver sequence of ChatMessage over time. GlobalScope.launch(Dispatchers.IO) { chatClient.receiveMessage().collect { Log.d(TAG, \"Chat message: $it\") } }","title":"receiveMessage"},{"location":"SDK-Guide/android-sdk/#receiveevent","text":"Deliver sequence of ChatEvent over time. GlobalScope.launch(Dispatchers.IO) { chatClient.receiveEvent().collect { Log.d(TAG, \"Chat events: $it\") } }","title":"receiveEvent"},{"location":"SDK-Guide/android-sdk/#connectionstatus","text":"Subscribing to connectionStatus publisher will deliver sequence of ChatConnectionStatus over time. GlobalScope.launch(Dispatchers.IO) { chatClient.connectionStatus().collect { Log.d(TAG, \"Chat client connection status: $it\") } } You can get the current status at any time by calling connectionStatus(). value . val connectionStatus = chatClient.connectionStatus().value","title":"connectionStatus"},{"location":"SDK-Guide/android-sdk/#stopcontact","text":"Stops the chat, but threads are not deleted. They will show up in the help center listChatHistory API call after ~3 minutes. try { chatClient.stopContact() Log.d(TAG, \"Stop contract success.\") } catch(e: FinapticException) { Log.e(TAG, \"Stop contact error:\", e) }","title":"stopContact"},{"location":"SDK-Guide/android-sdk/#chatconnectionstatus-enum","text":"CONNECTING when ChatClient is connecting or reconnecing after connection loss. CONNECTED ENDED when stopContact is called or agent closes the case.","title":"ChatConnectionStatus enum"},{"location":"SDK-Guide/android-sdk/#chatmessage","text":"id participantRole is ParticipantRole enum. displayName content is the text message. timestamp","title":"ChatMessage"},{"location":"SDK-Guide/android-sdk/#participantrole-enum","text":"CUSTOMER SYSTEM_MESSAGE AGENT","title":"ParticipantRole enum"},{"location":"SDK-Guide/android-sdk/#chatevent","text":"id type is ChatEventType enum. timestamp displayName","title":"ChatEvent"},{"location":"SDK-Guide/android-sdk/#chateventtype-enum","text":"JOINED when agent joined the chat. TYPING when agent is typing.","title":"ChatEventType enum"},{"location":"SDK-Guide/android-sdk/#distributionclient","text":"Distribution client exposes operations for push notification.","title":"DistributionClient"},{"location":"SDK-Guide/android-sdk/#registerchannel","text":"Registers a push notification channel for the specified device. try { val request = RegisterPushNotificationChannelRequest(deviceId, registrationId) sdk.distributionClient.registerChannel(request) Log.d(TAG, \"Register channel success\") } catch (e: FinapticException) { Log.d(TAG, \"Register channel error\", e) }","title":"registerChannel"},{"location":"SDK-Guide/android-sdk/#registerpushnotificationchannelrequest","text":"deviceId for which to register the push notification channel. This can be a unique ID provided by the device vendor or an anonymous sandboxed ID that uniquely represents the device. registrationId for the respective device. This is the registration token generated by Firebase Messaging. See Firebase documentation for more information .","title":"RegisterPushNotificationChannelRequest"},{"location":"SDK-Guide/android-sdk/#transactioncreatedevent","text":"For each Transaction, a push notification will be sent with the following data. You can call getTransaction to get more details. { \"eventType\": \"TransactionCreatedEvent\", \"transactionId\": \"00c660a0-c03d-401d-bf77-99df3e6a157f\" \"amount\": \"12.30\", \"availableBalance\": \"120.00\", \"actualBalance\": \"100.00\", \"transactionTime\": \"2021-12-17 12:34:56.793213 +0000 UTC\", }","title":"TransactionCreatedEvent"},{"location":"SDK-Guide/android-sdk/#interacclient","text":"InteracClient exposes methods used to register and list/retrieve Auto Deposit Registrations.","title":"InteracClient"},{"location":"SDK-Guide/android-sdk/#createregistration","text":"Once a registration request is submitted, users will receive an email at the email address that they provided from Interac, which will ask them to confirm their auto-deposit registration. try { val registration = Registration( accountId = account.id, aliasEmail = \"test@finaptic.com\" ) val request = CreateRegistrationRequest(registration) val response = sdk.interacClient.createRegistration(request) Log.d(TAG, \"Create autodeposit registration success with email ${response.registration.aliasEmail}\") } catch (e: FinapticException) { when(e.code) { FinapticExceptionCode.UNAVAILABLE -> Log.e(TAG, \"Check your internet connection and try again\", e) FinapticExceptionCode.DEADLINE_EXCEEDED -> Log.e(TAG, \"Operation couldn't complete in the default timeout. Try again.\", e) FinapticExceptionCode.TRANS_INTERAC_INVALID_ACCOUNT -> Log.e(TAG, \"Invalid account\", e) FinapticExceptionCode.TRANS_INTERAC_ALIAS_IN_USE -> Log.e(TAG, \"Autodeposit alias in use\", e) FinapticExceptionCode.TRANS_INTERAC_REG_COUNT_EXCEEDED -> Log.e(TAG, \"Maximum number of account-alias registrations threshold exceeded\", e) FinapticExceptionCode.TRANS_INTERAC_INV_MOB_NUMBER -> Log.e(TAG, \"Invalid mobile phone number\", e) FinapticExceptionCode.TRANS_INTERAC_INV_MOB_AREACODE -> Log.e(TAG, \"Invalid mobile phone area code\", e) else -> Log.e(TAG, \"Create autodeposit registration error\", e) } } Possible error codes: FinapticExceptionCode.TRANS_INTERAC_INVALID_ACCOUNT : Invalid account. FinapticExceptionCode.TRANS_INTERAC_ALIAS_IN_USE : Autodeposit alias in use. FinapticExceptionCode.TRANS_INTERAC_REG_COUNT_EXCEEDED : Maximum number of account-alias registrations threshold exceeded. FinapticExceptionCode.TRANS_INTERAC_INV_MOB_NUMBER : Invalid mobile phone number. FinapticExceptionCode.TRANS_INTERAC_INV_MOB_AREACODE : Invalid mobile phone area code.","title":"createRegistration"},{"location":"SDK-Guide/android-sdk/#createregistrationrequest","text":"registration : See Registration .","title":"CreateRegistrationRequest"},{"location":"SDK-Guide/android-sdk/#createregistrationresponse","text":"registration : See Registration .","title":"CreateRegistrationResponse"},{"location":"SDK-Guide/android-sdk/#registration","text":"registrationId : Output only. expiryDate : Output only. accountId : Provided for the account that the customer wishes auto-deposit transactions to be routed to. aliasEmail : Email for autodeposit registation. aliasPhoneNumber : Optional. See PhoneNumber .","title":"Registration"},{"location":"SDK-Guide/android-sdk/#phonenumber","text":"phoneNumber : Valid phone number.","title":"PhoneNumber"},{"location":"SDK-Guide/android-sdk/#listautodepositregistrations","text":"try { val request = ListAutodepositRegistrationsRequest(accountId = account.id) val response = sdk.interacClient.listAutodepositRegistrations(request) response.registrations.forEach { Log.d(TAG, \"Autodeposit registration for ${it.aliasEmail}\") } } catch (e: FinapticException) { Log.e(TAG, \"List autodeposit registrations error\", e) }","title":"ListAutodepositRegistrations"},{"location":"SDK-Guide/android-sdk/#listautodepositregistrationsrequest","text":"accountId : The Account ID for the Registrations that are to be listed.","title":"ListAutodepositRegistrationsRequest"},{"location":"SDK-Guide/android-sdk/#listautodepositregistrationsresponse","text":"registrations : The requested list of Registrations .","title":"ListAutodepositRegistrationsResponse"},{"location":"SDK-Guide/android-sdk/#updateregistration","text":"When updating the account alias registration, minimal changes are allowed, notably it is meant to change the target account linked to the alias. Notice that it is not possible to change the account alias handle itself (e.g. email/phone number). If more important changes are needed, the customer could always use the delete registration service and start a new account alias from scratch after that. try { val request = UpdateRegistrationRequest( registrationId = registrationId, accountId = accountId) val response = sdk.interacClient.updateRegistration(request) Log.d(TAG, \"Update registration success ${response.registration}\") } catch (e: FinapticException) { when (e.code) { FinapticExceptionCode.UNAVAILABLE -> Log.e(TAG, \"Check your internet connection and try again\", e) FinapticExceptionCode.DEADLINE_EXCEEDED -> Log.e(TAG, \"Operation couldn't complete in the default timeout. Try again.\", e) FinapticExceptionCode.TRANS_INTERAC_INVALID_ACCOUNT -> Log.e(TAG, \"Invalid account.\", e) FinapticExceptionCode.UNAUTHORIZED -> Log.e(TAG, \"Registration ID passed as argument is not owned by the current user.\", e) else -> Log.e(TAG, \"Update autodeposit registration error\", e) } }","title":"updateRegistration"},{"location":"SDK-Guide/android-sdk/#updateregistrationrequest","text":"Used to initiate the update of an existing Interac account alias registration. registrationId : The ID of the Registration to update. accountId : The ID of the Account.","title":"UpdateRegistrationRequest"},{"location":"SDK-Guide/android-sdk/#updateregistrationresponse","text":"registration : See Registration . Errors: FinapticExceptionCode.INVALID_ARGUMENT : if the account ID passed as argument is not owned or authorized for the current user. FinapticExceptionCode.UNAUTHORIZED : if the registration ID passed as argument is not owned by the current user. FinapticExceptionCode.INTERNAL : if there is an unexpected error while processing the request.","title":"UpdateRegistrationResponse"},{"location":"SDK-Guide/android-sdk/#deleteregistration","text":"Deleting an account alias registration will invalidate/inactivate the link between an account alias handle (email/phone) and an account, so that the account will no longer receive deposits automatically when sent using the given alias. At that moment, the customer is free to use the same alias handle to create a new registration pointing to the same or a different account. try { val request = DeleteRegistrationRequest (registrationId = registrationId) val response = sdk.interacClient.deleteRegistration(request) Log.d(TAG, \"Delete autodeposit registration success ${response.registration}\") } catch (e: FinapticException) { when(e.code) { FinapticExceptionCode.UNAVAILABLE -> Log.e(TAG, \"Check your internet connection and try again\", e) FinapticExceptionCode.DEADLINE_EXCEEDED -> Log.e(TAG, \"Operation couldn't complete in the default timeout. Try again.\", e) FinapticExceptionCode.UNAUTHORIZED -> Log.e(TAG, \"Registration ID passed as argument is not owned by the current user.\", e) else -> Log.e(TAG, \"Delete autodeposit registration error\", e) } }","title":"deleteRegistration"},{"location":"SDK-Guide/android-sdk/#deleteregistrationrequest","text":"Used to initiate the deletion/deactivation of an existing Interac account alias registration. registrationId : The ID of the Registration to delete.","title":"DeleteRegistrationRequest"},{"location":"SDK-Guide/android-sdk/#updateregistrationresponse_1","text":"registration : See Registration . Errors: FinapticExceptionCode.UNAUTHORIZED : if the registration ID passed as argument is not owned by the current user. FinapticExceptionCode.INTERNAL : if there is an unexpected error while processing the request.","title":"UpdateRegistrationResponse"},{"location":"SDK-Guide/android-sdk/#authenticateincomingtransfer","text":"Used to authenticate an inbound Interac transfer. You can get the security question by calling getIncomingTransferDetails . Different errors can arise when authenticating an incoming transfer. For details see incoming transfer error codes . try { val request = AuthenticateIncomingTransferRequest( interacPaymentNumber, securityAnswer = \"string\" ) val response = sdk.interacClient.authenticateIncomingTransfer(request) Log.d(TAG, \"Authenticate incoming transfer success: $response\") } catch (e: FinapticException) { Log.e(TAG, \"Authenticate incoming transfer error\", e) }","title":"authenticateIncomingTransfer"},{"location":"SDK-Guide/android-sdk/#authenticateincomingtransferrequest","text":"interacPaymentNumber : The payment number, as provided by Interac, which this request authenticates. securityAnswer : The answer to the security question as provided by the customer.","title":"AuthenticateIncomingTransferRequest"},{"location":"SDK-Guide/android-sdk/#authenticateincomingtransferresponse","text":"interacPaymentNumber : The payment number. success : Indicates if the provided response was correct. retryAllowed : In case of an incorrect response (success=false), indicates if the user can try again providing a new answer.","title":"AuthenticateIncomingTransferResponse"},{"location":"SDK-Guide/android-sdk/#completeincomingtransfer","text":"Used to complete the deposit of an inbound Interac transfer. Different errors can arise when completing an incoming transfer. For details see incoming transfer error codes . try { val request = CompleteIncomingTransferRequest( interacPaymentNumber, targetAccountId = targetAccountId, recipientMemo = \"Optional memo\" ) val response = sdk.interacClient.completeIncomingTransfer(request) Log.d(TAG, \"Complete incoming transfer success: $response\") } catch (e: FinapticException) { Log.e(TAG, \"Complete incoming transfer error\", e) }","title":"completeIncomingTransfer"},{"location":"SDK-Guide/android-sdk/#completeincomingtransferrequest","text":"interacPaymentNumber : The payment number, as provided by Interac, for which the deposit is being completed. targetAccountId : Represents the target account ID. Current customer needs to be the owner or authorized user of the target account. Target account must be a deposit account. recipientMemo : An optional memo provided by the recipient. This memo will be sent to the sender.","title":"CompleteIncomingTransferRequest"},{"location":"SDK-Guide/android-sdk/#completeincomingtransferresponse","text":"interacPaymentNumber : The payment number. transactionId : Represents this single financial transaction (operation). lifecycleTransactionId : Represents the overarching transaction, across all phases of its lifecycle.","title":"CompleteIncomingTransferResponse"},{"location":"SDK-Guide/android-sdk/#declineincomingtransfer","text":"Used to complete the deposit of an inbound Interac transfer. Different errors can arise when declining an incoming transfer. For details see incoming transfer error codes . try { val request = DeclineIncomingTransferRequest( interacPaymentNumber, recipientMemo = \"Optional memo\" ) val response = sdk.interacClient.declineIncomingTransfer(request) Log.d(TAG, \"Decline incoming transfer success: $response\") } catch (e: FinapticException) { Log.e(TAG, \"Decline incoming transfer error\", e) }","title":"declineIncomingTransfer"},{"location":"SDK-Guide/android-sdk/#declineincomingtransferrequest","text":"interacPaymentNumber : The payment number, as provided by Interac, for which the transfer is being declined. recipientMemo : An optional memo provided by the recipient. This memo will be sent to the sender.","title":"DeclineIncomingTransferRequest"},{"location":"SDK-Guide/android-sdk/#declineincomingtransferresponse","text":"interacPaymentNumber : The payment number.","title":"DeclineIncomingTransferResponse"},{"location":"SDK-Guide/android-sdk/#incoming-transfer-error-codes","text":"FinapticExceptionCode.TRANS_INTERAC_INVALID_TRANSFER : Transfer does not exist FinapticExceptionCode.TRANS_INTERAC_ALREADY_CANCELLED : Returned when attempting to authenticate a transfer that has already been canceled. FinapticExceptionCode.TRANS_INTERAC_ALREADY_ACCEPTED : Returned when attempting to authenticate a transfer that has already been accepted. FinapticExceptionCode.TRANS_INTERAC_PREVIOUS_TRANSFER_IN_PROGRESS : Returned when there already exists a transfer between sender and recipient that has not been completed or canceled. FinapticExceptionCode.TRANS_INTERAC_INCONSISTENT_CUSTOMER : Returned when performing any operation a transfer has been authenticated by different customer ID. FinapticExceptionCode.TRANS_INTERAC_TRANSFER_LIMITS_EXCEEDED : Rolling or per-transaction limits exceeded . FinapticExceptionCode.TRANS_INTERAC_AUTHENTICATION_REQUIRED : Returned when attempting to complete an incoming Q&A transfer whose authentication step has not yet been completed successfully. E.g. the user has not provided the correct answer to the security question.","title":"Incoming Transfer Error Codes"},{"location":"SDK-Guide/android-sdk/#coretransactionclient","text":"","title":"CoreTransactionClient"},{"location":"SDK-Guide/android-sdk/#listaccounts","text":"Lists all accounts on which the current user is the owner, or an authorized user. Uses pagination to allow listing accounts in smaller, easy to manage, chunks. try { val request = ListAccountsRequest(pageSize = 10) val response = sdk.coreTransactionClient.listAccounts(request) Log.d(TAG, \"List accounts success\") response.accounts.forEach { Log.d(TAG, \"Account with id ${it.id.toString()}\") } } catch (e: FinapticException) { Log.e(TAG, \"List accounts error\", e) }","title":"listAccounts"},{"location":"SDK-Guide/android-sdk/#listaccountsrequest","text":"pageSize : The maximum number of Accounts to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving a page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListAccountsResponse ). When no value is specified, then the initial page will be returned.","title":"ListAccountsRequest"},{"location":"SDK-Guide/android-sdk/#listaccountsresponse","text":"accounts : The requested list of Accounts. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListAccountsRequest ). When no value is returned in this field, then no further data exists to be listed.","title":"ListAccountsResponse"},{"location":"SDK-Guide/android-sdk/#getaccount","text":"try { val request = GetAccountRequest(accountId) val response = sdk.coreTransactionClient.getAccount(request) Log.d(TAG, \"Get account success with id ${response.id.toString()}\") } catch (e: FinapticException) { Log.e(TAG, \"Get account error\", e) }","title":"getAccount"},{"location":"SDK-Guide/android-sdk/#getaccountrequest","text":"accountId : The ID of the Account to retrieve.","title":"GetAccountRequest"},{"location":"SDK-Guide/android-sdk/#listauthorizedusers","text":"Lists all authorized users of an account. try { val request = ListAuthorizedUsersRequest(accountId) val response = sdk.coreTransactionClient.listAuthorizedUsers(request) Log.d(TAG, \"List authorized users success\") response.authorizedUsers.forEach { Log.d(TAG, \"Authorized user with id $it\") } } catch (e: FinapticException) { Log.e(TAG, \"List authorized users error\", e) }","title":"listAuthorizedUsers"},{"location":"SDK-Guide/android-sdk/#listauthorizedusersrequest","text":"accountId : The ID of the Account for which the authorized users are to be listed.","title":"ListAuthorizedUsersRequest"},{"location":"SDK-Guide/android-sdk/#listauthorizedusersresponse","text":"authorizedUsers : The requested list of authorized users ids.","title":"ListAuthorizedUsersResponse"},{"location":"SDK-Guide/android-sdk/#listowners","text":"Lists all owners of an account if the caller as the access rights. try { val response = sdk.coreTransactionClient.listOwners(request) Log.d(TAG, \"List owners success\") response.owners.forEach { Log.d(TAG, \"Owner with id $it\") } } catch (e: FinapticException) { Log.e(TAG, \"List owners error\", e) }","title":"listOwners"},{"location":"SDK-Guide/android-sdk/#listtransactions","text":"Lists Transactions associated to the Account specified using pagination. Transactions are sorted in descending order of Transaction time. try { val request = ListTransactionsRequest( accountId = accountId, pageSize = 10) val response = sdk.coreTransactionClient.listTransactions(request) Log.d(TAG, \"List transactions success\") response.transactions.forEach { Log.d(TAG, \"Transaction with id ${it.transactionId.toString()}\") } } catch (e: FinapticException) { Log.e(TAG, \"List transactions error\", e) }","title":"listTransactions"},{"location":"SDK-Guide/android-sdk/#listtransactionsrequest","text":"accountId : The ID of the Account to list Transactions for. from : The UTC timestamp from which to list Transactions. to : The UTC timestamp until which to list Transactions. pageSize : The maximum number of Transactions to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListTransactionsResponse ). When no value is specified, then the initial page will be returned.","title":"ListTransactionsRequest"},{"location":"SDK-Guide/android-sdk/#listtransactionsresponse","text":"transactions : The requested list of Transactions. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListTransactionsRequest ). When no value is returned in this field, then no further data exists to be listed.","title":"ListTransactionsResponse"},{"location":"SDK-Guide/android-sdk/#coretransferclient","text":"Exposes endpoints related to the retrieval of transfers data.","title":"CoreTransferClient"},{"location":"SDK-Guide/android-sdk/#gettransferdetails","text":"Returns the latest state of a transfer by a given transaction ID. See TransferTransactionDetails for more details. try { val request = GetTransferDetailsRequest(transactionId) val transferTransactionDetails = sdk.coreTransferClient.getTransferDetails(request) } catch (e: Throwable) { Log.d(TAG, \"Get transferTransactionDetails failed\", e) }","title":"getTransferDetails"},{"location":"SDK-Guide/android-sdk/#gettransferdetailsrequest","text":"transactionId : The ID of the transaction to get details for. Errors - FinapticExceptionCode.TRANS_INVALID_TRANSACTION : If a transaction ID is provided that is not found or resolves to an unauthorized account - FinapticExceptionCode.INTERNAL : If an unexpected error occurs while processing the request. The error will include a RefNumber which Finaptic can use to investigate the cause.","title":"GetTransferDetailsRequest"},{"location":"SDK-Guide/android-sdk/#listtargetaccounts","text":"Retrieves all accounts that can be used as recipient of funds for the intended type of transfer the current user wants to initiate/authorize. It is expected that after listing target accounts, one of the account IDs returned would be used by the customer for incoming transfer operations like creation of an Interac auto-deposit registration, depositing an incoming transfer or moving money between accounts. try { val request = ListTargetAccountsRequest( transferType = TransferType.INTERNAL_ACCOUNT_TO_ACCOUNT, pageSize = 10) val response = sdk.coreTransferClient.listTargetAccounts(request) Log.d(TAG, \"List Target Accounts success: $response\") } catch (e: Throwable) { Log.d(TAG, \"List Target Accounts failed\", e) }","title":"listTargetAccounts"},{"location":"SDK-Guide/android-sdk/#listtargetaccountsrequest","text":"transferType : The type of the transfer the customer wants to initiate/authorize. See TransferType . pageSize : The maximum number of Accounts to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving a page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListTargetAccountsResponse ). When no value is specified, then the initial page will be returned.","title":"ListTargetAccountsRequest"},{"location":"SDK-Guide/android-sdk/#listtargetaccountsresponse","text":"accounts : The resulting list of Account identifiers for selection. See AccountIdentification . nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see ListTargetAccountsRequest ). When no value is returned in this field, then no further data exists to be listed.","title":"ListTargetAccountsResponse"},{"location":"SDK-Guide/android-sdk/#accountidentification","text":"Used to identify which accounts can be presented to the consumer for certain selections, e.g. for selection lists while trying to perform/authorize transfers. id : The unique ID of the Account as created by its source domain. sourceDomain : The source domain which created the Account (eg: core-banking).","title":"AccountIdentification"},{"location":"SDK-Guide/android-sdk/#initiatetransfer","text":"Create a transfer fund request between accounts owned by current customer. try { val amount = Amount(amount = BigDecimal(\"0.01\"), currency = \"CAD\") val request = InitiateTransferRequest( sourceAccountId = sourceAccountId, destinationAccountId = destinationAccountId, fundTransfer = amount ) val response = sdk.coreTransferClient.initiateTransfer(request) if (response.reason.isNotEmpty()) { Log.d(TAG, \"Initiate transfer failed with reason: ${response.reason}\") return } val transfer = response.details Log.d(TAG, \"Initiate transfer success: $transfer\") } catch (e: FinapticException) { Log.d(TAG, \"Get Transaction Details error\", e) }","title":"initiateTransfer"},{"location":"SDK-Guide/android-sdk/#initiatetransferrequest","text":"sourceAccountId : Represents the source account ID. Current customer needs to be owner or authorized user of the source account. Source account needs to have sufficient available balance and actual balance to be able to initiate the transfer. destinationAccountId : Represents the destination account ID. Current customer needs to be owner or authorized user of the destination account. fundTransfer : The amount of the fund transfer. The amount should be always positive.","title":"InitiateTransferRequest"},{"location":"SDK-Guide/android-sdk/#initiatetransferresponse","text":"details : Details of the transaction with its status (whether the transaction is TransferStatus.completed or TransferStatus.declined ). See TransferTransactionDetails for more details. reason : Empty when status is TransferStatus.completed . Reason why transfer is declined.","title":"InitiateTransferResponse"},{"location":"SDK-Guide/android-sdk/#transfertransactiondetails","text":"transactionId : Represents this single financial transaction (operation). lifecycleTransactionId : Represents the overarching transaction, across all phases of its lifecycle (e.g. authorization, settlement, reversal, ...). status : Status of the transfer. See TransferStatus enumeration for details on possible statuses. customerRole : The role played by our customer in this transaction. See CustomerRole for details on possible roles. transferType : The type of transfer for this transaction. See TransferType for details on possible types. counterparty : When transferType is INTERAC_AUTODEPOSIT , this will contain the details about the person/entity on the other side of this transfer. When transferType is INTERNAL_ACCOUNT_TO_ACCOUNT**, this will contain the details of the owner of the destination account. clearingSystemRefNumber : Unique identifier assigned to the transaction by the external payment/transfer clearing system. remittance : Includes remittance data from this transfer if it contains any.","title":"TransferTransactionDetails"},{"location":"SDK-Guide/android-sdk/#transferstatus-enum","text":"TRANSFER_STATUS_UNSPECIFIED : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. DECLINED : Indicates that the transfer has been declined and rollback has been performed. When transferType is INTERNAL_ACCOUNT_TO_ACCOUNT , this could be due to insufficient funds to initiate the transfer. COMPLETED : Indicates that the transfer has been successfully completed. PENDING : Indicates that the transfer is in an intermediate stage before completion.","title":"TransferStatus enum"},{"location":"SDK-Guide/android-sdk/#customerrole-enum","text":"CUSTOMER_ROLE_UNSPECIFIED : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. RECIPIENT : Indicates that the customer is the recipient of the transfer operation. INITIATOR : Indicates that the customer is the initiator of the transfer operation.","title":"CustomerRole enum"},{"location":"SDK-Guide/android-sdk/#transfertype-enum","text":"TRANSFER_STATUS_UNSPECIFIED : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. INTERNAL_ACCOUNT_TO_ACCOUNT : Indicates that the transfer was an Account to Account transfer that did not transit through external systems ( stayed within the institution ). INTERAC_AUTODEPOSIT : Indicates that the transfer came through Interac systems, and used the Interac Autodeposit mechanism. INTERAC_REGULAR_PAYMENT : Indicates that the transfer came through Interac systems, and used the Interac Q&A mechanism.","title":"TransferType enum"},{"location":"SDK-Guide/android-sdk/#structured-and-unstructured-remittance-data","text":"Remittance includes additional information provided by the sender giving context for a transfer for instance, a transfer may be sent to a business by one of its clients in order to pay for a bill, the remittance data will include a reference to that bill payment. Remittance data could be unstructured or structured or both.","title":"Structured and Unstructured Remittance Data"},{"location":"SDK-Guide/android-sdk/#unstructured","text":"The unstructured remittance data can be used for free-form text such as in a memo field. User Interface and Data Mapping Example: Label Data element Notes data","title":"Unstructured"},{"location":"SDK-Guide/android-sdk/#structured","text":"Structured remittance data can be sent in up to 5 blocks for each transaction, with each block representing a document, such as a purchase order. The structured remittance data is organized into the following groupings of information: Referred Document Information : Information about the 'invoice'. Not necessarily an invoice, but some document that outlines the context and reason for the payment. Referred Document Amount : The amount being paid in the current transfer. Creditor Reference Information : Additional reference info provided by the creditor. Invoicer : Contains information about the payee, such as contact information. Invoicee : Contains information about the payor, such as contact information. Additional remittance information : A free form text field for additional remittance information.","title":"Structured"},{"location":"SDK-Guide/android-sdk/#user-interface-and-data-mapping-examples","text":"","title":"User Interface and Data Mapping Examples:"},{"location":"SDK-Guide/android-sdk/#payor-details","text":"invoicee contains information about the payor. Label Data element Name invoicee.name Address Address Type invoicee.postalAddress.addressType. code Department invoicee.postalAddress.department Sub-department invoicee.postalAddress.subDepartment Street invoicee.postalAddress.streetName Street Number invoicee.postalAddress.buildingNumber Postal Code invoicee.postalAddress.postCode City invoicee.postalAddress.townName Province invoicee.postalAddress.countrySubDivision Country invoicee.postalAddress.country Address invoicee.postalAddress.addressLine Identification Payor ID invoicee.identification.organisationIdentification.other[n].identification ID type invoicee.identification.organisationIdentification.other[n].schemeName. code Contact Details Name invoicee.contactDetails. name Phone invoicee.contactDetails.phoneNumber Mobile invoicee.contactDetails.mobileNumber Fax invoicee.contactDetails.faxNumber Email Address invoicee.contactDetails.emailAddress","title":"Payor Details"},{"location":"SDK-Guide/android-sdk/#payee-details","text":"invoicer contains information about the payee. Label Data element Name invoicer.name Address Address Type invoicer.postalAddress.addressType. code Department invoicer.postalAddress.department Sub-department invoicer.postalAddress.subDepartment Street invoicer.postalAddress.streetName Street Number invoicer.postalAddress.buildingNumber Postal Code invoicer.postalAddress.postCode City invoicer.postalAddress.townName Province invoicer.postalAddress.countrySubDivision Country invoicer.postalAddress.country Address invoicer.postalAddress.addressLine Identification Payee ID invoicer.identification.organisationIdentification.other[n]. identification ID type invoicer.identification.organisationIdentification.other[n].schemeName. code Contact Details Name invoicer.contactDetails. name Phone invoicer.contactDetails. phoneNumber Mobile invoicer.contactDetails. mobileNumber Fax invoicer.contactDetails. faxNumber Email Address invoicer.contactDetails. emailAddress","title":"Payee Details"},{"location":"SDK-Guide/android-sdk/#document-information","text":"Label Data element Document Type referredDocumentInformation[n].type.codeOrProprietary. code Purchase Order Number referredDocumentInformation[n].number Issue Date referredDocumentInformation[n].relatedDate Total Amount Due referredDocumentAmount.duePayableAmount.amount referredDocumentAmount.duePayableAmount.currency Discount Amount (if creditDebitIndicator=DBIT) referredDocumentAmount.adjustmentAmountAndReason[n].amount.amount referredDocumentAmount.adjustmentAmountAndReason[n].amount.currency Credit Amount (if creditDebitIndicator=CRDT) referredDocumentAmount.adjustmentAmountAndReason[n].amount.amount referredDocumentAmount.adjustmentAmountAndReason[n].amount.currency Reason for Adjustment referredDocumentAmount.adjustmentAmountAndReason[n].reason Additional Adjustment Information referredDocumentAmount.adjustmentAmountAndReason[n].additionalInformation Amount to be Paid referredDocumentAmount.remittedAmount.amount referredDocumentAmount.remittedAmount.currency Creditor Reference Type creditorReferenceInformation.type.codeOrProprietary. code Creditor Reference creditorReferenceInformation.reference","title":"Document information"},{"location":"SDK-Guide/android-sdk/#additional-remittance-information","text":"Label Data element Additional Details additionalRemittanceInformation[n]","title":"Additional remittance information"},{"location":"SDK-Guide/android-sdk/#addresstype2code-enum","text":"ADDR : Postal Address PBOX : POBox Address HOME : Residential Address BIZZ : Busines s Address MLTO : MailTo Address DLVY : Delivery To Address","title":"AddressType2Code enum"},{"location":"SDK-Guide/android-sdk/#externalorganisationidentification1code-enum","text":"BANK : Bank ID CBID : Central Bank ID CHID : Clearing House ID CINC : Corporation COID : Country Code CUST : Customer ID DUNS : DUNS Number EMPL : Employer ID GS1G : Global Location Number SREN : SIREN code SRET : SIRET code TXID : Tax ID","title":"ExternalOrganisationIdentification1Code enum"},{"location":"SDK-Guide/android-sdk/#documenttype6code-enum","text":"MSIN : Metered Service Invoice CNFA : Credit Note Related To Financial Adjustment DNFA : Debit Note Related To Financial Adjustment CINV : Commercial Invoice CREN : Credit Note DEBN : Debit Note HIRI : Hire Invoice SBIN : Self Billed Invoice CMCN : Commercial Contract SOAC : Statement Of Account DISP : Dispatch Advice BOLD : Bill Of Lading VCHR : Voucher AROI : Account Receivable Open Item TSUT : Trade Services Utility Trans action PUOR : Purchase Order","title":"DocumentType6Code enum"},{"location":"SDK-Guide/android-sdk/#documenttype3code-enum","text":"RADM : Remittance Advice Message RPIN : Related Payment Instructions FXDR : Foreign Exchange Deal Reference DISP : Dispatch Advice PUOR : Purchase Order SCOR : Structured Communication Reference","title":"DocumentType3Code enum"},{"location":"SDK-Guide/android-sdk/#getincomingtransferdetails","text":"Retrieves the details and state of an incoming Interac Q&A transfer. try { val request = GetIncomingTransferDetailsRequest(interacPaymentNumber) val response = sdk.coreTransferClient.getIncomingTransferDetails(request) Log.d(TAG, \"Get incoming transfer details success: ${response.transferDetails}\") } catch (e: FinapticException) { Log.e(TAG, \"Get incoming transfer details error\", e) }","title":"getIncomingTransferDetails"},{"location":"SDK-Guide/android-sdk/#getincomingtransferdetailsrequest","text":"interacPaymentNumber : The payment id, as provided by custom url scheme. You need to register custom URL scheme that Finaptic will provide(e.g. finaptic://interac/deposit?lang=en&paymentid=000000000). You can find more information here .","title":"GetIncomingTransferDetailsRequest"},{"location":"SDK-Guide/android-sdk/#getincomingtransferdetailsresponse","text":"transferDetails : Contains details about a given inbound Interac transfer. See IncomingTransferDetails . Errors: An error with error code FinapticExceptionCode.TRANS_INTERAC_INVALID_TRANSFER msg: \"payment number is invalid\" will be generated in the following scenarios: calls made with a non-existent interacPaymentNumber An error with error code FinapticExceptionCode.TRANS_INTERAC_INCONSISTENT_CUSTOMER msg: \"Transfer was previously authenticated with a different customer ID\" will be generated when: calls made with a different customer than was previously authenticated","title":"GetIncomingTransferDetailsResponse"},{"location":"SDK-Guide/android-sdk/#incomingtransferdetails","text":"interacPaymentNumber : The payment number, as provided by Interac, which the details of the transfer will be returned for. transferStatus : The current status of the transfer. See IncomingTransferStatus . transferAmount : The amount of the transfer. expiryDate : The timestamp when this transfer will expire. initiatorName : The name of who initiated the transfer. authenticationRequired : Indicates if this transfer requires that the recipient provide a security answer before depositing the transfer into the account. securityQuestion : If authenticationRequired is true, the field contains the security question that the user must provide the answer to in order to deposit the transfer. senderMemo : An optional memo provided by the sender.","title":"IncomingTransferDetails"},{"location":"SDK-Guide/android-sdk/#incomingtransferstatus-enum","text":"UNSPECIFIED : Reserved for error detection purposes. It should not be used directly. AVAILABLE : Represents that a transfer has not been processed and is in a valid state to be authorized. AUTHORIZED : Represents that a transfer has been authorized and is in a valid state to be accepted or declined. ACCEPTED : Represents that a transfer has been accepted. The transfer is complete and deposited into the target account. CANCELED : Represents that a transfer is complete and not deposited to an account. Ways to achieve this state are: if the transfer is canceled by the sender, if the receiver declines the transfer, the transfer has expired, the receiver is unable to authenticate the transfer within the allotted attempts.","title":"IncomingTransferStatus enum"},{"location":"SDK-Guide/android-sdk/#personal-finance-management","text":"","title":"Personal Finance Management"},{"location":"SDK-Guide/android-sdk/#gettransactions","text":"Lists transactions for a given Account with pagination. try { val request = GetTransactionsRequest( accountId = accountId, pageSize = 10, sortOrder = TransactionOrder.DESCENDING) val response = sdk.personalFinanceManagementClient.getTransactions(request) Log.d(TAG, \"Get transactions success\") response.transactions.forEach { Log.d(TAG, \"Transaction with id ${it.transactionId.toString()}\") } } catch (e: FinapticException) { Log.e(TAG, \"Get transactions error\", e) }","title":"getTransactions"},{"location":"SDK-Guide/android-sdk/#gettransactionsrequest","text":"accountId : The Account ID for which Transactions are returned. pageSize : The maximum number of Transactions to return. This value must be greater or equal to one. pageToken : When retrieving page other than the initial page, the value for the page_token must be specified, and taken from the previous page's nextPageToken value (see GetTransactionsResponse ). When no value is specified, then the initial page will be returned. sortOrder : The order the returned Transactions are sorted in. Transactions are sorted by the Transaction's transactionTime field. See TransactionOrder .","title":"GetTransactionsRequest"},{"location":"SDK-Guide/android-sdk/#gettransactionsresponse","text":"previousPageToken : The token to be used to retrieve the previous page of data. Must be passed in the pageToken field of the next request (see GetTransactionsRequest ). When no value is returned in this field, then there is no previous data to be listed. transactions : The requested list of Transactions . nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see GetTransactionsRequest ). When no value is returned in this field, then no further data exists to be listed. sortOrder : The order the Transactions are listed in. See TransactionOrder .","title":"GetTransactionsResponse"},{"location":"SDK-Guide/android-sdk/#gettransaction","text":"try { val request = GetTransactionRequest(transactionId = transactionId) val response = sdk.personalFinanceManagementClient.getTransaction(request) Log.d(TAG, \"Get transaction success with id: ${response.transaction.transactionId}\") } catch (e: FinapticException) { Log.e(TAG, \"Get transaction error\", e) }","title":"getTransaction"},{"location":"SDK-Guide/android-sdk/#gettransactionrequest","text":"transactionId : Transaction id.","title":"GetTransactionRequest"},{"location":"SDK-Guide/android-sdk/#gettransactionresponse","text":"transaction : See Transactions .","title":"GetTransactionResponse"},{"location":"SDK-Guide/android-sdk/#transactionorder-enum","text":"ORDER_UNSPECIFIED : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. Trying to make a request with this type will result in an error. DESCENDING : Represents newest first. ASCENDING : Represents oldest first.","title":"TransactionOrder enum"},{"location":"SDK-Guide/android-sdk/#transaction","text":"transactionId : Unique identifier that represents this single financial transaction. lifecycleTransactionId : Unique identifier that represents the overarching transaction, across all phases of its lifecycle. amount : The Amount of the Transaction. transactorName : The name and location of the vendor where the payment was processed. balance : The resulting Balance of the Account after the Transaction has occurred. transactionState : TransactionState enumeration represents the state of a Transaction. See TransactionState . transactionType : The TransactionType of the Transaction. See TransactionType . accountId : ID of the Account on which the Transaction was authorised. This can also be utilised to fetch the Account. category : A localized descriptor of the transaction's category (i.e. Groceries, Transport, etc.). transactionTime : The UTC timestamp when the Transaction occurred. accountDomain : The name of the domain that can be queried for additional details regarding the Account of this transaction. initiatingDomain : The name of the domain that can be queried for additional details regarding this Transaction.","title":"Transaction"},{"location":"SDK-Guide/android-sdk/#transactionstate-enum","text":"TRANSACTION_STATE_UNSPECIFIED : Reserved for error detection purposes. It should not be used directly. POSTED : Represents a transaction that has been completed. PENDING : Represents a transaction in an intermediate state, dependent on the transaction type. UNKNOWN : Represents a transaction type where available information is insufficient to determine TransactionState.","title":"TransactionState enum"},{"location":"SDK-Guide/android-sdk/#transactiontype-enum","text":"TRANSACTION_TYPE_UNSPECIFIED : Reserved for error detection purposes. It should not be used directly. AUTHORIZED : Represents a transaction type that is a purchase for which the merchant has received approval from the bank. An AUTHORIZED transaction will always have state PENDING . DEBIT : Represents a transaction type when there is an addition to the amount in the customer's account. REFUND : Represents a transaction type when businesses and merchants issue a reversal of the transaction that had previously occurred (e.g. a previously credited transaction will be debited back into the customers account). CHARGEBACK : Represents a transaction type that is returned to a payment card after a customer successfully disputes an item on their account statement or transactions report. A chargeback may occur on debit cards (and the underlying bank account) or on credit cards. CREDIT : Represents a transaction type when there is a deduction to the amount in the customer's account. PRODUCT_NOT_DEFINED : Represents a transaction state where available information is insufficient to determine TransactionType.","title":"TransactionType enum"},{"location":"SDK-Guide/android-sdk/#exceptions","text":"Every callable method from the SDK potentially throws a FinapticException, which is a regular Java/Kotlin exception with an extra \"code\" attribute. This try-catch block can surround any SDK call. try { val initiateApplicationResponse = sdk.onboardingClient.initiateApplication( InitiateApplicationRequest( productId = \"prepaid_account\" ) ) val applicationId = initiateApplicationResponse.basicDetails.applicationId } catch (e: FinapticException) { when(e.code) { FinapticExceptionCode.UNAVAILABLE -> Log.e(TAG, \"Check your internet connection and try again\", e) FinapticExceptionCode.DEADLINE_EXCEEDED -> Log.e(TAG, \"Operation couldn't complete in the default timeout. Try again.\", e) else -> throw e } }","title":"Exceptions"},{"location":"SDK-Guide/ios-sdk/","text":"Finaptic iOS SDK \u00b6 The Finaptic iOS SDK provides a way to consume Finaptic APIs from your iOS application. It is written in Swift. Note that the Finaptic APIs are strictly accessed through the SDK because it hides the underlying implementation that could change in the future. Prerequisites \u00b6 iOS version 13.0 or later Xcode 12.4 Sample application \u00b6 A sample application demonstrates what is explained in the document. Make sure you can run it using your own SDK key. Here are the steps to run the sample app: Open the file ViewController.swift and replace the SDK key with the one provided to you. Run the sample app on a device or simulator. Press Execute Onboarding button at the bottom to execute the onboarding flow. Open the xcode console. You will see the sample app logs as well as the SDK logs. Let the whole flow execute. It can take more than one minute. In a sandbox environment, you may experience delays when using a client for the first time or after a small inactivity period. It is due to the backend services cold start. If an error arises, it will be printed in the console. In this case, make sure the SDK key is the right one and retry. If the flow completes without error (no more requests are executing), you are good to integrate the SDK in your own app. ID and face capture with Acuant \u00b6 Please take a look at AcuantSample on how to use Acuant for document and face capture. You can read their official documentation here . Installation \u00b6 Create a Podfile. Open a terminal window, and cd into your project directory Run pod init && pod install Open {ProjectName}.xcworkspace Copy Finaptic.xcframework , MCPSDK.xcframework and gRPC-Swift.podspec files to the root folder of your project. In XCode project navigator, select your project, go to General tab on the right side and select your project Target . Drag Finaptic.xcframework and MCPSDK.xcframework from Finder window and drop to Frameworks, Libraries, and Embedded Content . Select Copy items if needed and Create groups . Under Frameworks, Libraries, and Embedded Content set Do Not Embed for Finaptic.xcframework . MCPSDK.xcframework should be set to Embed & Sign . Add Finaptic dependencies to your Podfile . # Finaptic dependencies (statically linked) pod 'gRPC-Swift', :podspec => 'gRPC-Swift.podspec' pod 'Firebase/Core', '~> 8.3' pod 'Firebase/Auth', '~> 8.3' pod 'Firebase/Firestore', '~> 8.3' pod 'Firebase/RemoteConfig', '~> 8.3' pod 'Auth0', '~> 1.34.0' pod 'AWSCore', '~> 2.26' pod 'AWSConnect', '~> 2.26' pod 'AWSConnectParticipant', '~> 2.26' pod 'Starscream', '~> 3.1' # Acuant dependencies pod 'AcuantiOSSDKV11/AcuantCommon', '11.5.1' pod 'AcuantiOSSDKV11/AcuantCamera', '11.5.1' pod 'AcuantiOSSDKV11/AcuantFaceCapture', '11.5.1' pod 'AcuantiOSSDKV11/AcuantImagePreparation', '11.5.1' pod 'AcuantiOSSDKV11/AcuantDocumentProcessing', '11.5.1' Add the following hooks to your Podfile . pre_install do |installer| static_frameworks = [ 'Auth0', 'BoringSSL-GRPC', 'CGRPCZlib', 'CNIOAtomics', 'CNIOBoringSSL', 'CNIOBoringSSLShims', 'CNIODarwin', 'CNIOHTTPParser', 'CNIOLinux', 'CNIOWindows', 'Firebase', 'FirebaseABTesting', 'FirebaseAnalytics', 'FirebaseAuth', 'FirebaseCore', 'FirebaseCoreDiagnostics', 'FirebaseFirestore', 'FirebaseInstallations', 'FirebaseRemoteConfig', 'GTMSessionFetcher', 'GoogleAppMeasurement', 'GoogleDataTransport', 'GoogleUtilities', 'JWTDecode', 'Logging', 'PromisesObjC', 'SimpleKeychain', 'SwiftNIO', 'SwiftNIOConcurrencyHelpers', 'SwiftNIOExtras', 'SwiftNIOFoundationCompat', 'SwiftNIOHPACK', 'SwiftNIOHTTP1', 'SwiftNIOHTTP2', 'SwiftNIOSSL', 'SwiftNIOTLS', 'SwiftNIOTransportServices', 'SwiftProtobuf', 'abseil', 'gRPC-C++', 'gRPC-Core', 'gRPC-Swift', 'leveldb-library', 'nanopb'] installer.pod_targets.each do |pod| if static_frameworks.include?(pod.name) def pod.static_framework?; true end end end end post_install do |installer| installer.pods_project.targets.each do |target| if ['gRPC-Swift', 'SwiftNIO', 'SwiftNIOConcurrencyHelpers', 'SwiftNIOExtras', 'SwiftNIOFoundationCompat', 'SwiftNIOHPACK', 'SwiftNIOHTTP1', 'SwiftNIOHTTP2', 'SwiftNIOSSL', 'SwiftNIOTLS', 'SwiftNIOTransportServices'].include? target.name target.build_configurations.each do |config| config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'NO' end else if ['Auth0', 'SwiftProtobuf', 'AcuantiOSSDKV11', 'Socket.IO-Client-Swift', 'Starscream'].include? target.name target.build_configurations.each do |config| config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES' end end end end end Run pod install to downloads and install the pods. Initialization \u00b6 The SDK must be initialized before you can make any call. The FinapticSDK.init method must be invoked. import Finaptic ... FinapticSDK.initialize(sdkKey: \"\") { result in switch result { case .success(let sdk): print(\"FinapticSDK initialized\") case .failure(let error): print(\"Initialization failed: \\(error)\") } } It is recommended to initialize the SDK once and store the returned instance in your own variable or container. You can now start to use the SDK through multiple clients. OnboardingClient \u00b6 Onboarding flow consists of initiate, update, validate and finalize calls. Initiate application initiateApplication Get information getConsentElectronicCommunication getConsentPrivacyPolicy getConsentTermsOfUse getConsentProductAgreement Update information updatePersonalDetails updateContactDetails updateAccountDetails updateAddresses updateConsents updateCustomerResidency updateDisclosures updateEmployment updateCommunicationPreferences Validate application validateDocuments validateSelfie validateApplication acceptApplication Finalize application finalizeApplicationCreateCustomer finalizeApplicationCreateProduct OnboardingOperationResponseDetails \u00b6 OnboardingOperationResponseDetails are the common response fields for an onboarding application create or update message. applicationId : The UUID of the application the response is for. onboardingApplicationStatus : The updated application status. The value here is one of the following: \"UNDEFINED\" is reserved for error detection purposes. It should not be used directly. \"New Application\" describes an Application that has just been created. \"Data Collection describes an Application that has successfully performed an Update call or failed a ValidateSelfieRequest or a ValidateDocumentsRequest. \"KYC In Progress\" describes an Application that has successfully performed a ValidateSelfieRequest or ValidateDocumentsRequest. \"KYC Success\" describes an Application that has successfully performed KYC checks as a result of a ValidateApplicationRequest. \"KYC Failed\" describes an Application that has failed KYC as a result of a ValidateApplicationRequest. \"KYC Rejected\" describes an Application that has no remaining KYC attempts. \"Application Accepted\" describes an application that has successfully completed an AcceptApplicationRequest. \"Application Processed\" describes an application that has been successfully completed. \"Application Cancelled\" describes an application that has been cancelled by the customer. \"Application Rejected\" describes an application that has been rejected and cannot be continued. This is used when a more descriptive rejection status is not available. requestStatus : The success status of the request. requestStatusReason : The detailed reason for the request status. Deprecated : Use requestReasonCodes instead. remainingAllowedRetries : The remaining KYC retries allowed. failureStatusCodes : The list of codes explaining the reason of the request outcome. This list will only be populated when request status is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The list will otherwise be empty. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.failureCode . verificationNeeded : The list of verifications that will be needed be performed in order to complete the application. See OnboardingVerification . consents : The list of Consents required as part of this onboarding application. See TermsAndConditions . disclosures : The list of Consents required as part of this onboarding application. See TermsAndConditions . OnboardingVerification \u00b6 Verification needed for an onboarding application name : The name of the OnboardingVerification. \"KYC\" means this application will perform KYC validation during the validate phase (ValidateDocumentsRequest, ValidateSelfieRequest and ValidateApplicationRequest) before being able to complete onboarding application. \"ProfileCreation\" means that this application requires input of basic customer information, without doing full KYC, before being able to complete onboarding application. \"AccountUsage\" means that this application needs to collect Account Usage information using UpdateAccountDetailsRequest before being able to complete onboarding application. requiredUpdates : The list of all Update request that are required as part of this verification (eg : [UpdateAccountDetailsRequest, UpdateConsentsRequest]). TermsAndConditions \u00b6 TermsAndConditions is either a consent or a disclosure. documentType : The type of the terms and conditions. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.consentType or ReferenceDataTypes.disclosureType . documentNameAndVersion : The URL of the versioned terms and conditions document the customer needs to review and accept. neededBeforeValidation : Whether or not the terms and conditions need to be accepted before calling any of the validate requests. initiateApplication \u00b6 This is the only call that must be executed prior any other one when processing an onboarding application. let request = InitiateApplicationRequest(customerId: nil, productId: \"prepaidV1\") sdk.onboardingClient.initiateApplication(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } let applicationId = response.basicDetails.applicationId print(\"Verification needed for an onboarding application:\") response.basicDetails.verificationNeeded.forEach { print($0) } case .failure(let error): print(\"Initiate application error: \\(error)\") } } InitiateApplicationRequest \u00b6 bundleId : The unique identifier of the bundle being applied for. \"despositV1\" : Deposit account without card. \"prepaidV1\" : Account and prepaid-card. \"creditcardV1\" : Account with credit card. \"productlessV1\" : Onboard a customer and do not validate his identity. \"kycV1\" : Onboard a customer, but do validate his identity. InitiateApplicationResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . The returned application CONSENT TYPE and DOCUMENT NAME AND VERSION are required in consent update request. getConsentElectronicCommunication \u00b6 let response = sdk.onboardingClient.getConsentElectronicCommunication() getConsentTermsOfUse \u00b6 let response = sdk.onboardingClient.getConsentTermsOfUse() getConsentProductAgreement \u00b6 let response = sdk.onboardingClient.getConsentProductAgreement() getConsentPrivacyPolicy \u00b6 let response = sdk.onboardingClient.getConsentPrivacyPolicy() The returned application ID is required in every other request. updatePersonalDetails \u00b6 let request = UpdatePersonalDetailsRequest( onboardingApplicationId: applicationId, customerPersonalDetails: PersonalDetails( firstName: \"COMPANY\", middleName: nil, lastName: \"SAMPLE\", dateOfBirth: Calendar.current.date(from: DateComponents(year: 2000, month: 3, day: 6))!, alias: nil) ) sdk.onboardingClient.updatePersonalDetails(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update personal details error: \\(error)\") } } UpdatePersonalDetailsRequest \u00b6 Used to update the customer personal details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerPersonalDetails : See personal details . UpdatePersonalDetailsResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . PersonalDetails \u00b6 firstName : The customer first name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. middleName : The customer middle name. This value is optional and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. lastName : The customer last name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. dateOfBirth : The customer's date of birth. alias : The customer alias. This value is optional and has a maximum of 20 characters. Accepts alphanumeric input without special characters. updateContactDetails \u00b6 let contactPhoneNumber = PhoneNumberType(smsCompatible: true, number: \"+15141234567\") let request = UpdateContactDetailsRequest( onboardingApplicationId: applicationId, customerContactDetails: ContactDetails( ontactPhoneNumber: contactPhoneNumber, customerEmail: \"john.miller@mail.com\") ) sdk.onboardingClient.updateContactDetails(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update contact details error: \\(error)\") } } UpdateContactDetailsRequest \u00b6 Used to update the customer contact details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerContactDetails : See contact details . UpdateContactDetailsResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . ContactDetails \u00b6 contactPhoneNumber : The contact phone number. This value is optional and must be in a valid phone number format. customerEmail : The contact email address. This value is required and must be in a valid email address format. updateAccountDetails \u00b6 Fetch account purpose and source of funds values from reference data client . dataType: ReferenceDataTypes.accountPurpose dataType: ReferenceDataTypes.sourceOfFunds let request = UpdateAccountDetailsRequest( onboardingApplicationId: applicationId, accountDetails: AccountUsageDetails( accountPurpose: accountPurpose.code, primarySourceOfFunds: [sourceOfFunds.code]), authorizedThirdPartyUsage = authorizedThirdPartyUsage ) sdk.onboardingClient.updateAccountDetails(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update account details error: \\(error)\") } } UpdateAccountDetailsRequest \u00b6 Used to update the customer account details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. accountDetails : See account usage details . UpdateAccountDetailsResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . AccountUsageDetails \u00b6 Providing the source of funds and purpose for applying for an Account. accountPurpose : The intended purpose of the Account. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.accountPurpose . primarySourceOfFunds : The values stored here are a collection of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.sourceOfFunds . authorizedThirdPartyUsage : Indicates wether or not the account will be used on behalf of third parties not otherwise identified as owners or authorized users. True means that account will be used on behalf of third parties while false means that account will not be used on behalf of third parties. updateAddresses \u00b6 You need to use AddressClient to get the user's address. let request = UpdateAddressesRequest( onboardingApplicationId: applicationId, addresses: [address] ) sdk.onboardingClient.updateAddresses(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update addresses error: \\(error)\") } } UpdateAddressesRequest \u00b6 Used to update the addresses occupied by the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. addresses : Collection of addresses occupied by the customer. See Address . UpdateAddressesResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . Address \u00b6 type : The type of Address being represented. Must be either \"HOME\" or \"WORK\" (required). organization : The first line of the Address. This value is required and has a maximum of 300 characters. line1 : The first line of the Address. This value is required and has a maximum of 300 characters. line2 : The second line of the Address. This value is optional, and has a maximum of 300 characters. line3 : The third line of the Address. This value is optional, and has a maximum of 300 characters. line4 : The fourth line of the Address. This value is optional, and has a maximum of 300 characters. line5 : The fifth line of the Address. This value is optional, and has a maximum of 300 characters. line6 : The sixth line of the Address. This value is optional, and has a maximum of 300 characters. line7 : The seventh line of the Address. This value is optional, and has a maximum of 300 characters. line8 : The eighth line of the Address. This value is optional, and has a maximum of 300 characters. locality : The local sub administrative area such as the municipality or community name. In Canadian and US addresses, this corresponds to the city or town name. This value is optional and has a maximum of 150 characters. e.g. Toronto, Orlando. dependentLocality : The municipality or community name of the major postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. doubleDependentLocality : The municipality or community name of the local postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. administrativeArea : The name of the first level administrative area. This value is optional and has a maximum of 150 characters. e.g. For US this would be 'State' and Canada this would be 'Province' subAdministrativeArea : The name of the second level administrative area. This value is optional and has a maximum of 150 characters. e.g. For a city use 'City', county use 'County', etc. area : The name of country first level administrative subdivision area in the address. For Canada, this is name of the province and for the US this is the name of the State. This field is required and has postalCode : The local postal code for routing mail to the address and should contain the ZIP code for US addresses. This field is required and has a maximum of 150 characters. country : The name of the country for the Address. This value is required and has a maximum of 50 characters. updateConsents \u00b6 Fetch consent values from reference data client with dataType: ReferenceDataTypes.consentType . let request = UpdateConsentsRequest( onboardingApplicationId: applicationId, consents: [ Consent(consentType: consent.code, consentTimestamp: Date(), documentNameAndVersion: \"https://must-be-a-well-formed-url.com/document/1.0\", viewTimestamp: Date()) ] ) sdk.onboardingClient.updateConsents(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update consents error: \\(error)\") } } UpdateConsentsRequest \u00b6 Used to update the consents received from the customer for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. consents : Collection of consents. See Consent . UpdateConsentsResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . Consent \u00b6 Consent is indicating the receipt of a requested customer Consent. consentType : The type of Consent received from the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.consentType . documentNameAndVersion : The name and version of the document in URL format that the customer consented to. viewTimestamp : The UTC timestamp when the customer viewed the document. updateCustomerResidency \u00b6 let request = UpdateCustomerResidencyRequest( onboardingApplicationId: applicationId, residency: CustomerResidency( isCanadianTaxResident: true, otherResidences: nil, sinToken: nil, citizenship: \"CA\") ) sdk.onboardingClient.updateCustomerResidency(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update customer residency error: \\(error)\") } } UpdateCustomerResidencyRequest \u00b6 Used to update the customer residency status in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. residency : The customer residency status. See CustomerResidency . UpdateCustomerResidencyResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . CustomerResidency \u00b6 Contains the residency status details of the customer. isCanadianTaxResident : The Canadian residency status. This is true if the customer is a Canadian resident, false otherwise. otherResidences : A collection of other countries where the customer has residence. At least one is required if not a Canadian resident. See OtherResidence . sinToken : A tokenized UUID representation of the customer SIN number. citizenship : The primary or current citizenship of the customer. The format is an ISO 3166 Country alpha-2 code (e.g. US, CA, FR). OtherResidence \u00b6 Alternate countries and places of residence. otherResidenceCountry : The name of the other country of residence. tinToken : A tokenized UUID representation of the unique TIN for the country of residence. Optional. citizenship : The citizenship status in the country of residence. Required if residence country is US or Canada. updateDisclosures \u00b6 Fetch disclosure type values from reference data client with dataType: ReferenceDataTypes.disclosureType . let request = UpdateDisclosuresRequest( onboardingApplicationId: applicationId, disclosures: [ Disclosure( disclosureType: disclosure.code, timestamp: Date(), documentNameAndVersion: \"https://must-be-a-well-formed-url.com/document/1.0\") ] ) sdk.onboardingClient.updateDisclosures(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update disclosures error: \\(error)\") } } UpdateDisclosuresRequest \u00b6 Used to update the disclosures received by the customer in the onboarding application onboardingApplicationId : The UUID of the onboarding application to update. disclosures : Collection of disclosures. See Disclosure . UpdateDisclosuresResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . Disclosure \u00b6 Customer receipt of a documented Disclosure. disclosureType : The type of Disclosure sent to the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.disclosureType . timestamp : The UTC timestamp when the customer viewed the document. documentNameAndVersion : Name and version of the disclosure document in URL format that the customer viewed. updateEmployment \u00b6 Fetch employment status from reference data client . dataType: ReferenceDataTypes.occupation dataType: ReferenceDataTypes.industry dataType: ReferenceDataTypes.employmentStatus let phoneNumber = PhoneNumberType(smsCompatible: true, number: \"+15141234567\") let request = UpdateEmploymentRequest( onboardingApplicationId: applicationId, employmentInfo: Employment( employmentStatus: employment.code, employerName: \"Finaptic\", industry: industry.code, occupation: occupation.code, startDate: Calendar.current.date(from: DateComponents(year: 2019, month: 1, day: 1)), endDate: Calendar.current.date(from: DateComponents(year: 2020, month: 12, day: 31)), workAddress: address, phoneNumber: phoneNumber) ) sdk.onboardingClient.updateEmployment(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update employment error: \\(error)\") } } UpdateEmploymentRequest \u00b6 Used to update the customer employment information in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. employmentInfo : Employment information. See Employment . UpdateEmploymentResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . Employment \u00b6 Employment defines the details of Employment for the customer being onboarded. employmentStatus : The status of Employment. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.employmentStatus . employerName : The full employer name. The value is required and has a maximum of 50 characters. industry : The industry code the Employment is in. This value is required and has a maximum of 50 characters. The value is retrieved from the / ReferenceDataClient with dataType set to ReferenceDataTypes.industry . occupation : The roles and duties the customer performs for the employer. This value is optional and has a maximum of 50 characters. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.occupation . If the employment status is 'EMPLOYMENT_STATUS_UNEMPLOYED', 'EMPLOYMENT_STATUS_RETIRED', 'EMPLOYMENT_STATUS_STUDENT_UNEMPLOYED', or 'EMPLOYMENT_STATUS_HOMEMAKER' then the Occupation field must be left empty. startDate : The month and year the customer started this position. endDate : The month and year the customer no longer held this position. workAddress : The 'type' field must be set to 'WORK'. Required. See Address . phoneNumber : The phone number of the employer. Required. updateCommunicationPreferences \u00b6 Fetch communication preferences from reference data client with dataType: ReferenceDataTypes.communicationPreference . let request = UpdateCommunicationPreferencesRequest( onboardingApplicationId: applicationId, customerCommunicationPref: communicationPreference.code ) sdk.onboardingClient.updateCommunicationPreferences(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update communication preferences error: \\(error)\") } } UpdateCommunicationPreferencesRequest \u00b6 Used to update the communication preferences of the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerCommunicationPref : The customer communication preference. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.communicationPreference . customerCommunicationLanguage : The customer communication language. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.language . UpdateCommunicationPreferencesResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . createFileUploadURL \u00b6 Create upload url for document front, back and selfie. let request = CreateFileUploadUrlRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.createFileUploadURL(request: request) { result in guard let self = self else { return } switch result { case .success(let response): print(\"File upload url: \\(result.uploadUrl)\") case .failure(let error): print(\"Create file upload url for front error: \\(error)\") } } CreateFileUploadUrlRequest \u00b6 onboardingApplicationId : The UUID representing the onboarding application that requested a file upload URL. CreateFileUploadUrlResponse \u00b6 filename : The generated name for the file to upload. This value must be used for ValidateDocumentsRequest or ValidateSelfieRequest . uploadUrl : The URL to use to upload the file. validateDocuments \u00b6 Fetch document types from reference data client with dataType: ReferenceDataTypes.documentType . let request = ValidateDocumentsRequest( onboardingApplicationId: applicationId, documentDetails: [ DocumentInfo( documentType: documentType.code, documentCountry: \"CA\", frontImageFileName: idFrontFileUpload.filename, backImageFileName: idBackFileUpload.filename, // The state issuing the document used to identify the applicant. // documentState must be set when document type is driver license. // The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataTypes.state concatenate with country code retrieved from dataType set to ReferenceDataTypes.country. // e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...) documentState = documentStateType.code) ] ) sdk.onboardingClient.validateDocuments(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. let failureStatusCodes = details.failureStatusCodes if (!failureStatusCodes.isEmpty) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.failureCode. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY print(\"failureStatusCodes: \\(failureStatusCodes)\") } } case .failure(let error): print(\"Validate documents error: \\(error)\") } } ValidateDocumentsRequest \u00b6 Used to perform operation of validating the identification documents received from the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to validate. documentDetails : Collection of documents to validate. See DocumentInfo . ValidateDocumentsResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.failureCode . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\" DocumentInfo \u00b6 Details of an onboarding document collected from the customer to prove identity. documentType : The type of document used for identification. The value here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.documentType . e.g. \"DOCUMENT_TYPE_CANADIAN_DRIVERS_LICENSE\" or \"DOCUMENT_TYPE_CANADIAN_PASSPORT\" . documentCountry : The country the document was issued for. frontImageFileName : The file name of the uploaded image of the front of the document. (required, file size <4MB) backImageFileName : The file name of the uploaded image of the back of the document. (required, file size <4MB) documentState : The state issuing the document used to identify the applicant. The value here is one of the code values retrieved from the ReferenceDataClient with dataType set to \"STATE_\" concatenate with country code retrieved from dataType set to ReferenceDataTypes.country . e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...) validateSelfie \u00b6 let request = ValidateSelfieRequest( onboardingApplicationId: applicationId, fileName: selfieFileUpload.filename ) sdk.onboardingClient.validateSelfie(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. let failureStatusCodes = details.failureStatusCodes if (!failureStatusCodes.isEmpty) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.failureCode. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY print(\"failureStatusCodes: \\(failureStatusCodes)\") } } case .failure(let error): print(\"Validate selfie error: \\(error)\") } } ValidateSelfieRequest \u00b6 Used to perform operation of validating the selfie pictures received from the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to validate. fileName : The name of the selfie file to validate. (required, file size <4MB) ValidateSelfieResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.failureCode . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\" validateApplication \u00b6 let request = ValidateApplicationRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.validateApplication(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. let failureStatusCodes = details.failureStatusCodes if (!failureStatusCodes.isEmpty) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.failureCode. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY print(\"failureStatusCodes: \\(failureStatusCodes)\") } } case .failure(let error): print(\"Validate application error: \\(error)\") } } ValidateApplicationRequest \u00b6 Used to perform operation of validating the entire onboarding application and all documents received from the customer. onboardingApplicationId : The UUID of the onboarding application to validate. ValidateApplicationResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.failureCode . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\" acceptApplication \u00b6 let request = AcceptApplicationRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.acceptApplication(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Accept application error: \\(error)\") } } AcceptApplicationRequest \u00b6 Used to perform operation of accepting the onboarding application received from the customer. onboardingApplicationId : The UUID of the onboarding application to accept. AcceptApplicationResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . finalizeApplicationCreateCustomer \u00b6 The user needs to be authenticated before you create a customer. let request = FinalizeApplicationCreateCustomerRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.finalizeApplicationCreateCustomer(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Finalize application create customer error: \\(error)\") } } FinalizeApplicationCreateCustomerRequest \u00b6 Used to perform operation of creating the customer for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to create a customer for. FinalizeApplicationCreateCustomerResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . customerId : The UUID representing the newly created customer. finalizeApplicationCreateProduct \u00b6 let request = FinalizeApplicationCreateProductRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.finalizeApplicationCreateProduct(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Finalize application create product error: \\(error)\") } } FinalizeApplicationCreateProductRequest \u00b6 Used to perform operation of creating the product for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to create the product for. FinalizeApplicationCreateProductResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . products : Collection of products created. See OnboardedProduct . OnboardedProduct \u00b6 productId : The UUID of the onboarded product. sourceDomain : The source domain of the onboarded product. cancelApplication \u00b6 Canceling the onboarding application. let request = CancelApplicationRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.cancelApplication(request: request) { [weak self] result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Cancel application error: \\(error)\") } } CancelApplicationRequest \u00b6 onboardingApplicationId : The UUID of the onboarding application to cancel. CancelApplicationResponse \u00b6 basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . Authorized Users \u00b6 InviteAuthorizedUser \u00b6 let request = InviteAuthorizedUserRequest( invitedCustomerIdentifier: \"test@finaptic.com\", accountId: account.id) sdk.onboardingClient.inviteAuthorizedUser(request: request) { result in switch result { case .success(let response): print(\"Invite authorized user success with id \\(response.invitation.invitationId)\") case .failure(let error): print(\"Invite authorized user error: \\(error)\") } } InviteAuthorizedUserRequest \u00b6 Used to perform operation of inviting a user to join an account as an authorized user. invitedCustomerIdentifier : The identifier to be used to lookup for the invited customer. This can either the username, or the email address of the customer to invite. If the identifier does not map to any known user, the operation will succeed, if this occurs the invitation will expire automatically after a period of time, without having been accepted or declined. accountId : The ID of the account on which an authorized user is to be added. The customer issuing the request must be an Owner for the account. invitationMetadata : Optional. Additional metadata to attach to the invitation, to be consumed by the invited user before accepting the invitation. InviteAuthorizedUserResponse \u00b6 invitation : The resulting invitation created by the InviteAuthorizedUserRequest. See AuthorizedUserInvitation for details. Errors: If the customer mapping to this identifier is already an Owner or an Authorized User for the account, then the operation will fail with a FinapticErrorCode.alreadyExists code, and provide a message indicating the reason for the conflict. If there is already an invitation that was issued for this account, for the invited user, the operation will fail with an FinapticErrorCode.alreadyExists code, and provide a message indicating the reason for the conflict. If the customer issuing the request isn't an Owner, then the operation will fail with a FinapticErrorCode.permissionDenied code, and provide a message indicating the reason. If there is already an invitation that was issued for this account, for the invited customer, the operation will fail with a FinapticErrorCode.alreadyExists code, and provide a message indicating the reason for the conflict. AuthorizedUserInvitation \u00b6 invitationId : The unique identifier of the invitation. This value is required to Accept, Decline, or Confirm invitations. issuerCustomerId : The customer ID of the person that issued the invitation. invitedCustomerId : The customer ID of the person that was invited to join the account as an authorized user. accountId : The account ID for which an invitation was sent. status : The current status of the invitation. Refer to AuthorizedUserInvitationStatus enumeration for details on statuses and meaning. creationTime : The time at which the invitation was issued. expirationTime : Time at which it will no longer be possible for the invited customer to Accept the invitation. invitationMetadata : Additional metadata that has been attached to the invitation. This will contain the metadata specified by the last operation on the invitation. AuthorizedUserInvitationStatus enum \u00b6 pending : Represents an invitation that is waiting for an accept or decline response from the invited user. accepted : Represents an invitation that was accepted by the invited user, and pending completion by the issuer of the invitation. declined : Represents an invitation that was declined by the invited user. A declined invitation cannot be completed. completed : Represents an invitation that was successfully completed by the issuer of the invitation. In this status, the invited customer has successfully joined the account as an Authorized User. expired : Represents an invitation that wasn't accepted or declined within the allotted time. An expired invitation cannot be accepted or declined. AcceptAuthorizedUserInvitation \u00b6 let request = AcceptAuthorizedUserInvitationRequest( invitationId: invitation.invitationId) sdk.onboardingClient.acceptAuthorizedUserInvitation(request: request) { result in switch result { case .success(_): print(\"Accepted authorized user invitation with id \\(invitation.invitationId)\") case .failure(let error): print(\"Accept authorized user invitation error: \\(error)\") } } AcceptAuthorizedUserInvitationRequest \u00b6 Used to perform operation of accepting an invitation issued to the user to join an account as an authorized user. invitationId : The ID of the invitation to accept. This must represent a valid invitation that was issued to the current user. invitationMetadata : Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter before confirming the invitation. AcceptAuthorizedUserInvitationResponse \u00b6 Response intentionally left without fields. Errors: If the current user is not the user the invitation was issued to, then the operation will fail with a FinapticErrorCode.permissionDenied code, and provide a message indicating the reason for the conflict. If the invitation is not in the Pending status, the operation will fail with a FinapticErrorCode.failedPrecondition code, and provide a message indicating that status was invalid. If the invitation has expired, the operation will also fail with a FinapticErrorCode.failedPrecondition code, and provide a message indicating that invitation has expired. DeclineAuthorizedUserInvitation \u00b6 let request = DeclineAuthorizedUserInvitationRequest( invitationId: invitation.invitationId) sdk.onboardingClient.declineAuthorizedUserInvitation(request: request) { result in switch result { case .success(_): print(\"Declined authorized user invitation with id \\(invitation.invitationId)\") case .failure(let error): print(\"Decline authorized user invitation error: \\(error)\") } } DeclineAuthorizedUserInvitationRequest \u00b6 invitationId : The ID of the invitation to decline. This must represent a valid invitation that was issued to the current user. invitationMetadata : Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter when reviewing invitation status. DeclineAuthorizedUserInvitationResponse \u00b6 Response intentionally left without fields. Errors: If the current user is not the user the invitation was issued to, then the operation will fail with a FinapticErrorCode.permissionDenied code, and provide a message indicating the reason for the conflict. If the invitation is not in the Pending status, the operation will fail with a FinapticErrorCode.failedPrecondition code, and provide a message indicating that status was invalid. If the invitation has expired, the operation will also fail with a FinapticErrorCode.failedPrecondition code, and provide a message indicating that invitation has expired. ConfirmAuthorizedUserInvitation \u00b6 let request = ConfirmAuthorizedUserInvitationRequest( invitationId: invitation.invitationId) sdk.onboardingClient.confirmAuthorizedUserInvitation(request: request) { result in switch result { case .success(_): print(\"Confirm authorized user invitation with id \\(invitation.invitationId)\") case .failure(let error): print(\"Confirm authorized user invitation error: \\(error)\") } } ConfirmAuthorizedUserInvitationRequest \u00b6 Used to perform operation of confirming an invitation that was accepted by the invited customer. invitationId : The ID of the invitation to confirm. ConfirmAuthorizedUserInvitationResponse \u00b6 Response intentionally left without fields. Errors: If the current user is not the issuer of the invitation, then the operation will fail with a FinapticErrorCode.permissionDenied code, and provide a message indicating the reason for the conflict. If the invitation is not in the Accepted status, the operation will fail with a FinapticErrorCode.failedPrecondition code, and provide a message indicating that status was invalid. RemoveAuthorizedUser \u00b6 let request = RemoveAuthorizedUserRequest(accountId: accountId, authorizedUser: authorizedUserId) self.sdk.onboardingClient.removeAuthorizedUser(request: request) { result in switch result { case .success(let response): print(\"Removed authorized user. \\(response.authorizedUsers)\") case .failure(let error): print(\"Remove authorized user failed with error: \\(error)\") } } A user can remove an authorized user only if they have completed the step up authentication with a scope set to \"remove:authorized_user\" . let request = SignInRequest(credential: credential, scope: \"remove:authorized_user\") sdk.authenticationClient.signIn(request: request) { result in switch result { case .success(_): print(\"You may call removeAuthorizedUser\") case .failure(let error): print(\"Sign in error: \\(error)\") } } RemoveAuthorizedUserRequest \u00b6 Used to remove an authorized user from the provided Account. accountId : The ID of the Account where the authorized is removed from. authorizedUser : The ID of the authorized user to add to the Account. RemoveAuthorizedUserResponse \u00b6 authorizedUsers : The resulting list of authorized users of the Account. GetInvitations \u00b6 Returns the list of invitations for the current user. This will include invitations issued by the current user, as well as invitations where the current user is the invited customer. This operation always return all invitations, including invitations that are pending, expired, have been accepted, declined, require confirmation or that have already been completed. sdk.onboardingClient.getInvitations(request: GetAuthorizedUserInvitationsRequest()) { result in switch result { case .success(let response): if (response.invitations.isEmpty) { print(\"No invitations\") } else { response.invitations.forEach { print(\"Invitation with \\($0.status) status and id \\($0.invitationId)\") } } completion(response.invitations) case .failure(let error): print(\"Get invitations error: \\(error)\") } } GetAuthorizedUserInvitationsRequest \u00b6 At this moment, there are no configurable options for this request. GetAuthorizedUserInvitationsResponse \u00b6 invitations : The list of invitations for the current user. See AuthorizedUserInvitation ReferenceDataClient \u00b6 ReferenceDataTypes: addressType consentType disclosureType documentType communicationPreference accountPurpose sourceOfFunds employmentStatus onboardingStatus country state occupation industry language failureCode let request = GetReferenceDataByTypeRequest(dataType: ReferenceDataTypes.accountPurpose, locale: \"EN_CA\") sdk.referenceDataClient.regetReferenceDataByType(request: request) { result in switch result { case .success(let response): print(response.data) case .failure(let error): print(\"Reference data error: \\(error)\") } } AddressClient \u00b6 Address client provides a list of suggested addresses. Make sure to use debouncing or throttling when calling this function on user input. let request = AddressSuggestionsRequest( onboardingApplicationId: onboardingApplicationId, pattern: \"123\", addressType: AddressTypes.homeAddressType ) sdk.addressClient.getSuggestions(request: request) { result in switch result { case .success(let response): print(response.suggestions.first) case .failure(let error): print(\"Address suggestions error: \\(error)\") } } AuthenticationClient \u00b6 signUp \u00b6 let credential = Credential( email: \"sample@finaptic.com\", password: \"Password1234!@#$\", username: \"Username\" ) let request = SignUpRequest(credential: credential) sdk.authenticationClient.signUp(request: request) { result in switch result { case .success(): print(\"Sign up success. Proceed to sign in.\") case .failure(let error): print(\"Sign up error: \\(error)\") } } Possible error codes: signupCredentialError If the password used doesn't comply with the password policy for the connection. The user your are attempting to sign up is invalid. The chosen password is too weak signupError : The chosen password is based on user information. eg. password contains email, username contains emails etc. The user you are attempting to sign up has already signed up. The username you are attempting to sign up with is already in use. The message property of FinapticError will give more information about the error. Credential \u00b6 email : Used to signUp or signIn the user. (requred for signUp) username : Username can be up to 15 characters, contain alphanumeric characters and the following characters: '_', '+', '-', '.', '!', '#', '$', ''', '^', '`', '~' and '@'. Can be used to sign up and sign in the user. It might be optional. password : Password must have at least 12 characters, 1 lowercase, 1 uppercase, 1 number and should not contain common words or email parts. signIn \u00b6 let credential = Credential( email: \"sample@finaptic.com\", password: \"Password1234!@#$\", username: \"Username\" ) let request = SignInRequest(credential: credential) sdk.authenticationClient.signIn(request: request) { result in switch result { case .success(let response): print(response) case .failure(let error): print(\"Sign up error: \\(error)\") } } Possible error codes: signinError The password provided for sign up/update has already been used (reported when password history feature is enabled). The account is blocked due to too many attempts to sign in. If the password has been leaked and a different one needs to be used. signinInvalidPassword The username and/or password used for authentication are invalid. The password provided does not match the connection's strength requirements. mfaError : The multi-factor authentication (MFA) code provided by the user is invalid/expired. The administrator has required multi-factor authentication, but the user has not enrolled. The user must provide the multi-factor authentication code to authenticate. signInUserBlocked : The account is blocked. You can ask the user to contact support. The message property of FinapticError will give more information about the error. currentAuthState \u00b6 If the accessToken has expired, the client automatically uses the refreshToken and renews the credentials for you. Returns nil if the user is unauthenticated . sdk.authenticationClient.currentAuthState() { authState in print(\"Current auth state: \\(String(describing: authState))\") } refreshAuthState \u00b6 Returns nil if the user is unauthenticated . sdk.authenticationClient.refreshAuthState() { result in switch result { case .success(let authState): print(\"Refreshed auth state: \\(String(describing: authState))\") case .failure(let error): print(\"Refresh auth state error: \\(error)\") } } signOut \u00b6 sdk.authenticationClient.signOut() { error in if let error = error { print(\"Sign out error: \\(error)\") return } print(\"Signed out\") } resetPassword \u00b6 If the call is successful and the email is registered, the user receives a password reset email. let request = ResetRequest(email: \"sample@finaptic.com\") sdk.authenticationClient.resetPassword(request: request) { error in if let error = error { switch error.code { case .invalidArgument: print(\"Valid email is required.\") case .unknown: print(\"Check your internet connection and try again.\") default: print(\"Reset Password error: \\(error.msg)\") } return } print(\"Reset Password success\") } getUserInfo \u00b6 On success, getUserInfo will return AuthUserInfo . authenticationClient.getUserInfo { result in switch result { case .failure(let error): print(\"Get user info error: \\(error)\") case .success(let authUserInfo): print(\"Get user info success: \\(authUserInfo)) } } AuthUserInfo \u00b6 username email isEmailVerified CoreBankingClient \u00b6 getAccountDetails \u00b6 let request = GetAccountDetailsRequest(accountId: accountId) sdk.coreBankingClient.getAccountDetails(request: request) { result in switch result { case .success(let response): print(response.status) print(response.accruedInterest) case .failure(let error): print(\"Get account details error: \\(error)\") } } AuthState \u00b6 accessToken : Current access token. refreshToken : Current refresh token. CoreCardClient \u00b6 getCard \u00b6 Retrieves generic details about a single Card . let request = GetCardRequest(cardId: cardId) sdk.coreCardClient.getCard(request: request) { result in switch result { case .success(let card): print(card.description) case .failure(let error): print(\"Get card error: \\(error)\") } } GetCardRequest \u00b6 cardId : The ID of the Card to retrieve. listCards \u00b6 Lists all Cards associated to the current user. let request = ListCardsRequest( pageSize: 10, pageToken: nil ) sdk.coreCardClient.listCards(request: request) { result in switch result { case .success(let response): print(response.cards.count) print(response.nextPageToken) case .failure(let error): print(\"List cards error: \\(error)\") } } ListCardsRequest \u00b6 pageSize : The maximum number of Cards to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListCardsResponse ). When no value is specified, then the initial page will be returned. ListCardsResponse \u00b6 cards : The list of Cards requested. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListCardsRequest ). When no value is returned in this field, then no further data exists to be listed. revealCardInfo \u00b6 Reveals card information to the user. sdk.coreCardClient.revealCardInfo(parentVC: viewController, cardId: cardId) { result in switch result { case .success(): print(\"Reveal card info success\") case .failure(let error): print(\"Reveal card info error: \\(error)\") } } A user can reveal card info only if they have completed the step up authentication with a scope set to \"view:card_number\" . let request = SignInRequest(credential: credential, scope: \"view:card_number\") sdk.authenticationClient.signIn(request: request) { result in switch result { case .success(_): print(\"You may call revealCardInfo\") case .failure(let error): print(\"Sign in error: \\(error)\") } } createAuthorizedUserCard \u00b6 let card = AuthorizedUserCard(cardType: .cardTypePrepaid, accountId: accountId) let request = CreateAuthorizedUserCardRequest(card: card, authorizedUserId: authorizedUserId) self.sdk.coreCardClient.createAuthorizedUserCard(request: request) { result in switch result { case .success(let response): print(\"Create authorized user card success: \\(response.card)\") case .failure(let error): print(\"Create authorized user card error: \\(error)\") } } CreateAuthorizedUserCardRequest \u00b6 card : Refer to AuthorizedUserCard for details. authorizedUserId : The ID of the authorized user who will be the owner of the newly created card CreateAuthorizedUserCardResponse \u00b6 card : Refer to Card for details. Possible error codes: FinapticErrorCode.cardsInvalidAccount : If the account passed as argument does not exist or is not owned by the current user. FinapticErrorCode.cardsInvalidAuthUser : If the user ID passed as argument does not exist or is not an authorized user of the account. AuthorizedUserCard \u00b6 cardType : The type of the Card. See CardType . accountId : The ID of the Account that will be linked to this Card. description : Optional description for this Card. lockCard \u00b6 This feature allows customers to prevent transactions from getting authorized while they confirm if a card is effectively lost. After finding the card if it is the case, they can re-enable the card by using the unlock function, see unlockCard . let request = LockCardRequest(cardId: cardId) sdk.coreCardClient.lockCard(request: request) { result in switch result { case .success(let response): print(\"Lock card success. Card state is \\(response.card.state).\") case .failure(let error): print(\"Lock card error: \\(error)\") } } LockCardRequest \u00b6 cardId : The ID of the card to be locked. LockCardResponse \u00b6 card : The card in its current status as result of the operation. See Card . Errors FinapticErrorCode.cardsInvalidCardId : If the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user. unlockCard \u00b6 This feature allows customers to re-enable transactions on the card if they find it after suspecting it lost. let request = UnlockCardRequest(cardId: cardId) sdk.coreCardClient.unlockCard(request: request) { result in switch result { case .success(let response): print(\"Unlock card success. Card state is \\(response.card.state).\") case .failure(let error): print(\"Unlock card error: \\(error)\") } } UnlockCardRequest \u00b6 cardId : The ID of the locked card to be unlocked. UnlockCardResponse \u00b6 card : The card in its current status as result of the operation. See Card . Errors FinapticErrorCode.cardsInvalidCardId : If the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user. Card \u00b6 id : The ID of this Card. cardType : The type of the Card. See CardType . accountId : The ID of the Account linked to this Card. description : The description for this Card. state : Describes the current state of the card. See CardState . ownerId : The user ID of the card owner. CardType enum \u00b6 cardTypeUnspecified : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. cardTypePrepaid : Represents a Prepaid Card. CardState enum \u00b6 unspecified : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. active : Indicates that the card is ready to be used. locked : Indicates that the card is temporarily blocked for usage. HelpCenter \u00b6 The help center adds the ability to connect a Finaptic Customer Service agent for L2+ escalations. We provide APIs to integrate existing customer service chat / threaded conversations into your client application. The expectation is that a new chat should be triggered by an L1 customer support agent, while customers should be able to resume existing threads to provide additional information or view responses from Finaptic. Start customer support chat List chat threads Get a chat thread's history startChat \u00b6 Create StartChatRequest . displayName can be username. You can get it from AuthenticationClient's getUserInfo . subject provided by the customer when starting a new chat or from ChatThread . contactCaseId is used to resume a thread. Use nil to start a new one. let request = StartChatRequest(displayName: displayName, subject: subject, contactCaseId: nil) Calling startChat will try to connect and return ChatClient . sdk.helpCenter.startChat(request: request) { result in switch result { case .failure(let error): print(\"Start chat error: \\(error)\") case .success(let chatClient): print(\"Start chat success\") self.chatClient = chatClient } } listChatThreads \u00b6 Note: This method can be called after Customer is created . Create ListChatThreadsRequest . nextToken is provided by ListChatThreadsResponse and can be used to get next page. let request = ListChatThreadsRequest(nextToken: nil) On success, listChatThreads will return ListChatThreadsResponse . sdk.helpCenter.listChatThreads(request: request) { result in switch result { case .failure(let error): print(\"List chat threads failed: \\(error)\") case .success(let response): print(\"List chat threads success: \\(response.items.count)\") } } ListChatThreadsResponse \u00b6 nextToken can be used to fetch next page. items is an array of ChatThread ChatThread \u00b6 id lastUpdated is a Date. status is ChatThreadStatus . subject provided by the customer when starting a new chat. createdAt is a Date. customerId ChatThreadStatus enum \u00b6 waitingForAgent waitingForCustomer when an agent has responded and needs more information from the customer. Waiting for customer should indicate there is an unread message. resolved listChatHistory \u00b6 Note: This method can be called after Customer is created . Create ListChatHistoryRequest . contactId is the id of ChatThread . nextToken is provided by ListChatHistoryResponse and can be used to get next page. let request = ListChatHistoryRequest(contactId: contactId, nextToken: nil) On success, listChatHistory will return ListChatHistoryResponse . sdk.helpCenter.listChatHistory(request: request) { result in switch result { case .failure(let error): print(\"List chat history failed: \\(error)\") case .success(let response): print(\"List chat history success: \\(response.items.count)\") } } ListChatHistoryResponse \u00b6 nextToken used to fetch next page. items is an array of ChatMessage ChatClient \u00b6 sendMessage \u00b6 let request = SendMessageRequest(messageContent: \"Text message\") chatClient.sendMessage(request: request) { error in guard error == nil else { print(\"Send chat message failed: \\(error!)\") return } print(\"Chat message sent.\") } messages \u00b6 Message history in descending order. It's an array of ChatMessage . receiveMessage \u00b6 Subscribing to receiveMessage publisher will deliver sequence of ChatMessage over time. private var subscriptions = Set<AnyCancellable>() private func subscribeToMessages() { chatClient .receiveMessage() .sink { message in print(\"On new message: \\(String(describing: message))\") }.store(in: &subscriptions) } receiveEvent \u00b6 Subscribing to receiveEvent publisher will deliver sequence of ChatEvent over time. private var subscriptions = Set<AnyCancellable>() private func subscribeToEvents() { chatClient .receiveEvent() .sink { event in print(\"On new event: \\(String(describing: event))\") }.store(in: &subscriptions) } connectionStatus \u00b6 Subscribing to connectionStatus publisher will deliver sequence of ChatConnectionStatus over time. private var subscriptions = Set<AnyCancellable>() private func subscribeToConnectionStatusChanges() { chatClient .connectionStatus() .sink { connectionStatus in print(\"Connection status changed: \\(connectionStatus)\") }.store(in: &subscriptions) } You can get the current status at any time by calling connectionStatus(). value . let connectionStatus = chatClient.connectionStatus().value stopContact \u00b6 Stops the chat, but threads are not deleted. They will show up in the help center listChatHistory API call after ~3 minutes. chatClient.stopContact { error in guard error == nil else { print(\"Stop contact error: \\(error!)\") return } print(\"Stop contract success\") } ChatConnectionStatus enum \u00b6 connecting when ChatClient is connecting or reconnecing after connection loss. connected ended when stopContact is called or agent closes the case. ChatMessage \u00b6 id participantRole is ParticipantRole enum. displayName content is the text message. timestamp is a Date. ParticipantRole enum \u00b6 customer systemMessage agent ChatEvent \u00b6 id type is ChatEventType enum. timestamp is a Date. displayName ChatEventType enum \u00b6 joined when agent joined the chat. typing when agent is typing. DistributionClient \u00b6 Distribution client exposes operations for push notification. registerChannel \u00b6 Registers a push notification channel for the specified device. let request = RegisterPushNotificationChannelRequest(deviceId: deviceId, registrationId: registrationId) sdk.distributionClient.registerChannel(request: request) { result in switch result { case .failure(let error): print(\"Register channel error: \\(errror)\") case .success(): print(\"Register channel success\") } } Errors - FinapticErrorCode.transInvalidTransaction : If a transaction ID is provided that is not found or resolves to an unauthorized account - FinapticErrorCode.internalError : If an unexpected error occurs while processing the request. The error will include a RefNumber which Finaptic can use to investigate the cause. RegisterPushNotificationChannelRequest \u00b6 deviceId for which to register the push notification channel. This can be a unique ID provided by the device vendor or an anonymous sandboxed ID that uniquely represents the device. registrationId for the respective device. This is the registration token generated by the application client. See Firebase documentation for more information . TransactionCreatedEvent \u00b6 For each Transaction, a push notification will be sent with the following data. You can call getTransaction to get more details. { \"eventType\": \"TransactionCreatedEvent\", \"transactionId\": \"00c660a0-c03d-401d-bf77-99df3e6a157f\" \"amount\": \"12.30\", \"availableBalance\": \"120.00\", \"actualBalance\": \"100.00\", \"transactionTime\": \"2021-12-17 12:34:56.793213 +0000 UTC\", } InteracClient \u00b6 InteracClient exposes methods used to register and list/retrieve Auto Deposit Registrations. createRegistration \u00b6 Once a registration request is submitted, users will receive an email at the email address that they provided from Interac, which will ask them to confirm their auto-deposit registration. let registration = Registration(accountId: account.id, aliasEmail: \"test@finaptic.com\") let request = CreateRegistrationRequest(registration: registration) sdk.interacClient.createRegistration(request: request) { result in switch result { case .success(let response): print(\"Create autodeposit registration success with email \\(response.registration.aliasEmail)\") case .failure(let error): switch error.code { case .unavailable: print(\"Check your internet connection and try again\", error) case .deadlineExceeded: print(\"Operation couldn't complete in the default timeout. Try again.\", error) case .transInteracInvalidAccount: print(\"Invalid account\", error) case .transInteracAliasInUse: print(\"Autodeposit alias in use\", error) case .transInteracRegCountExceeded: print(\"Maximum number of account-alias registrations threshold exceeded\", error) case .transInteracInvMobNumber: print(\"Invalid mobile phone number\", error) case .transInteracInvMobAreacode: print(\"Invalid mobile phone area code\", error) default: print(\"Create autodeposit registration error: \\(error)\") } } } Possible error codes: transInteracInvalidAccount : Invalid account. transInteracAliasInUse : Autodeposit alias in use. transInteracRegCountExceeded : Maximum number of account-alias registrations threshold exceeded. transInteracInvMobNumber : Invalid mobile phone number. transInteracInvMobAreacode : Invalid mobile phone area code. CreateRegistrationRequest \u00b6 registration : See Registration . CreateRegistrationResponse \u00b6 registration : See Registration . Registration \u00b6 registrationId : Output only. expiryDate : Output only. accountId : Provided for the account that the customer wishes auto-deposit transactions to be routed to. aliasEmail : Email for autodeposit registation. aliasPhoneNumber : Optional. See PhoneNumber . PhoneNumber \u00b6 phoneNumber : Valid phone number. listAutodepositRegistrations \u00b6 let request = ListAutodepositRegistrationsRequest(accountId: account.id) sdk.interacClient.listAutodepositRegistrations(request: request) { result in switch result { case .success(let response): response.registrations.forEach { print(\"Autodeposit registration for \\($0.aliasEmail)\") } case .failure(let error): print(\"List autodeposit registrations error: \\(error)\") } } ListAutodepositRegistrationsRequest \u00b6 accountId : The Account ID for the Registrations that are to be listed. ListAutodepositRegistrationsResponse \u00b6 registrations : The requested list of Registrations . updateRegistration \u00b6 When updating the account alias registration, minimal changes are allowed, notably it is meant to change the target account linked to the alias. Notice that it is not possible to change the account alias handle itself (e.g. email/phone number). If more important changes are needed, the customer could always use the delete registration service and start a new account alias from scratch after that. let request = UpdateRegistrationRequest(registrationId: registrationId, accountId: accountId) sdk.interacClient.updateRegistration(request: request) { result in switch result { case .success(let response): print(\"Update autodeposit registration success: \\(response.registration)\") case .failure(let error): switch error.code { case .unavailable: print(\"Check your internet connection and try again\", error) case .deadlineExceeded: print(\"Operation couldn't complete in the default timeout. Try again.\", error) case .transInteracInvalidAccount: print(\"Invalid account\", error) case .unauthorized: print(\"Registration ID passed as argument is not owned by the current user.\", error) default: print(\"Update autodeposit registration error: \\(error)\") } } } UpdateRegistrationRequest \u00b6 Used to initiate the update of an existing Interac account alias registration. registrationId : The ID of the Registration to update. accountId : The ID of the Account. UpdateRegistrationResponse \u00b6 registration : See Registration . Errors: FinapticErrorCode.invalidArgument : if the account ID passed as argument is not owned or authorized for the current user. FinapticErrorCode.unauthorized : if the registration ID passed as argument is not owned by the current user. FinapticErrorCode.internal : if there is an unexpected error while processing the request. deleteRegistration \u00b6 Deleting an account alias registration will invalidate/inactivate the link between an account alias handle (email/phone) and an account, so that the account will no longer receive deposits automatically when sent using the given alias. At that moment, the customer is free to use the same alias handle to create a new registration pointing to the same or a different account. let request = DeleteRegistrationRequest(registrationId: registrationId) sdk.interacClient.deleteRegistration(request: request) { result in switch result { case .success(let response): print(\"Delete autodeposit registration success: \\(response.registration)\") case .failure(let error): switch error.code { case .unavailable: print(\"Check your internet connection and try again\", error) case .deadlineExceeded: print(\"Operation couldn't complete in the default timeout. Try again.\", error) case .unauthorized: print(\"Registration ID passed as argument is not owned by the current user.\", error) default: print(\"Delete autodeposit registration error: \\(error)\") } } } DeleteRegistrationRequest \u00b6 Used to initiate the deletion/deactivation of an existing Interac account alias registration. registrationId : The ID of the Registration to delete. DeleteRegistrationResponse \u00b6 registration : See Registration . Errors: FinapticErrorCode.unauthorized : if the registration ID passed as argument is not owned by the current user. FinapticErrorCode.internal : if there is an unexpected error while processing the request. authenticateIncomingTransfer \u00b6 Used to authenticate an inbound Interac transfer. You can get the security question by calling getIncomingTransferDetails . Different errors can arise when authenticating an incoming transfer. For details see incoming transfer error codes . let request = AuthenticateIncomingTransferRequest(interacPaymentNumber: interacPaymentNumber, securityAnswer: \"Security answer\") sdk.interacClient.authenticateIncomingTransfer(request: request) { result in switch result { case .failure(let error): print(\"Authenticate incoming transfer error: \\(error)\") case .success(let response): print(\"Authenticate incoming transfer success: \\(response)\") } } AuthenticateIncomingTransferRequest \u00b6 interacPaymentNumber : The payment number, as provided by Interac, which this request authenticates. securityAnswer : The answer to the security question as provided by the customer. AuthenticateIncomingTransferResponse \u00b6 interacPaymentNumber : The payment number. success : Indicates if the provided response was correct. retryAllowed : In case of an incorrect response (success=false), indicates if the user can try again providing a new answer. completeIncomingTransfer \u00b6 Used to complete the deposit of an inbound Interac transfer. Different errors can arise when completing an incoming transfer. For details see incoming transfer error codes . let request = CompleteIncomingTransferRequest( interacPaymentNumber: interacPaymentNumber, targetAccountId: accountId, recipientMemo: \"Optional recipient memo\") self?.sdk.interacClient.completeIncomingTransfer(request: request) { result in switch result { case .failure(let error): print(\"Complete incoming transfer error: \\(error)\") case .success(let response): print(\"Complete incoming transfer success: \\(response)\") } } CompleteIncomingTransferRequest \u00b6 interacPaymentNumber : The payment number, as provided by Interac, for which the deposit is being completed. targetAccountId : Represents the target account ID. Current customer needs to be the owner or authorized user of the target account. Target account must be a deposit account. recipientMemo : An optional memo provided by the recipient. This memo will be sent to the sender. CompleteIncomingTransferResponse \u00b6 interacPaymentNumber : The payment number. transactionId : Represents this single financial transaction (operation). lifecycleTransactionId : Represents the overarching transaction, across all phases of its lifecycle. declineIncomingTransfer \u00b6 Used to complete the deposit of an inbound Interac transfer. Different errors can arise when declining an incoming transfer. For details see incoming transfer error codes . let request = DeclineIncomingTransferRequest(interacPaymentNumber: interacPaymentNumber, recipientMemo: \"Optional recipient memo\") self?.sdk.interacClient.declineIncomingTransfer(request: request) { result in switch result { case .failure(let error): print(\"Decline incoming transfer error: \\(error)\") case .success(let response): print(\"Decline incoming transfer success: \\(response)\") } } DeclineIncomingTransferRequest \u00b6 interacPaymentNumber : The payment number, as provided by Interac, for which the transfer is being declined. recipientMemo : An optional memo provided by the recipient. This memo will be sent to the sender. DeclineIncomingTransferResponse \u00b6 interacPaymentNumber : The payment number. Incoming Transfer Error Codes \u00b6 FinapticErrorCode.transInteracInvalidTransfer : Transfer does not exist FinapticErrorCode.transInteracAlreadyCancelled : Returned when attempting to authenticate a transfer that has already been canceled. FinapticErrorCode.transInteracAlreadyAccepted : Returned when attempting to authenticate a transfer that has already been accepted. FinapticErrorCode.transInteracPreviousTransferInProgress : Returned when there already exists a transfer between sender and recipient that has not been completed or canceled. FinapticErrorCode.transInteracInconsistentCustomer : Returned when performing any operation a transfer has been authenticated by different customer ID. FinapticErrorCode.transInteracTransferLimitsExceeded : Rolling or per-transaction limits exceeded . FinapticErrorCode.transInteracAuthenticationRequired : Returned when attempting to complete an incoming Q&A transfer whose authentication step has not yet been completed successfully. E.g. the user has not provided the correct answer to the security question. CoreTransactionClient \u00b6 listAccounts \u00b6 Lists all accounts on which the current user is the owner, or an authorized user. Uses pagination to allow listing accounts in smaller, easy to manage, chunks. let request = ListAccountsRequest(pageSize: 2, pageToken: nil) sdk.coreTransactionClient.listAccounts(request: request) { result in switch result { case .success(let response): print(\"Accounts: \\(response.accounts.count)\") case .failure(let error): print(\"List accounts error: \\(error)\") } } ListAccountsRequest \u00b6 pageSize : The maximum number of Accounts to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving a page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListAccountsResponse ). When no value is specified, then the initial page will be returned. ListAccountsResponse \u00b6 accounts : The requested list of Accounts. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListAccountsRequest ). When no value is returned in this field, then no further data exists to be listed. getAccount \u00b6 let request = GetAccountRequest(accountId: accountId) sdk.coreTransactionClient.getAccount(request: request) { result in switch result { case .success(let account): print(\"Get account success: \\(account)\") case .failure(let error): print(\"Get account error: \\(error)\") } } GetAccountRequest \u00b6 accountId : The ID of the Account to retrieve. listAuthorizedUsers \u00b6 Lists all authorized users of an account. let request = ListAuthorizedUsersRequest(accountId: accountId) sdk.coreTransactionClient.listAuthorizedUsers(request: request) { result in switch result { case .success(let response): print(\"List authorized users success\") for authorizedUserId in response.authorizedUsers { print(\"Authorized user with id \\(authorizedUserId)\") } case .failure(let error): print(\"List authorized users error: \\(error)\") } } ListAuthorizedUsersRequest \u00b6 accountId : The ID of the Account for which the authorized users are to be listed. ListAuthorizedUsersResponse \u00b6 authorizedUsers : The requested list of authorized users ids. listOwners \u00b6 Lists all owners of an account if the caller as the access rights. let request = ListOwnersRequest(accountId: accountId) sdk.coreTransactionClient.listOwners(request: request) { result in switch result { case .success(let response): print(\"List owners success\") for ownerId in response.owners { print(\"Owner with id \\(ownerId)\") } case .failure(let error): print(\"List owners error: \\(error)\") } } listTransactions \u00b6 Lists Transactions associated to the Account specified using pagination. Transactions are sorted in descending order of Transaction time. let request = ListTransactionsRequest(accountId: accountId, pageSize: 2) sdk.coreTransactionClient.listTransactions(request: request) { result in switch result { case .success(let response): print(\"List transactions success\") for transaction in response.transactions { print(\"Transaction with id \\(transaction.transactionId)\") } case .failure(let error): print(\"List transactions error: \\(error)\") } } ListTransactionsRequest \u00b6 accountId : The ID of the Account to list Transactions for. from : The UTC timestamp from which to list Transactions. to : The UTC timestamp until which to list Transactions. pageSize : The maximum number of Transactions to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListTransactionsResponse ). When no value is specified, then the initial page will be returned. ListTransactionsResponse \u00b6 transactions : The requested list of Transactions. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListTransactionsRequest ). When no value is returned in this field, then no further data exists to be listed. CoreTransferClient \u00b6 Exposes endpoints related to the retrieval of transfers data. getTransferDetails \u00b6 Returns the latest state of a transfer by a given transaction ID. See TransferTransactionDetails for more details. let request = GetTransferDetailsRequest(transactionId: transaction.transactionId) sdk.coreTransferClient.getTransferDetails(request: request) { result in switch result { case .failure(let error): print(\"Get TransferTransactionDetails error: \\(error)\") case .success(let transferTransactionDetails): print(\"Get TransferTransactionDetails success: \\(transferTransactionDetails)\") } } GetTransferDetailsRequest \u00b6 transactionId : The ID of the transaction to get details for. listTargetAccounts \u00b6 Retrieves all accounts that can be used as recipient of funds for the intended type of transfer the current user wants to initiate/authorize. It is expected that after listing target accounts, one of the account IDs returned would be used by the customer for incoming transfer operations like creation of an Interac auto-deposit registration, depositing an incoming transfer or moving money between accounts. let request = ListTargetAccountsRequest( transferType: .internalAccountToAccount, pageSize: 10) self.sdk.coreTransferClient.listTargetAccounts(request: request) { result in switch result { case .success(let response): print(\"List Target Accounts success: \\(response)\") case .failure(let error): print(\"List Target Accounts error: \\(error)\") } } ListTargetAccountsRequest \u00b6 transferType : The type of the transfer the customer wants to initiate/authorize. See TransferType . pageSize : The maximum number of Accounts to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving a page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListTargetAccountsResponse ). When no value is specified, then the initial page will be returned. ListTargetAccountsResponse \u00b6 accounts : The resulting list of Account identifiers for selection. See AccountIdentification . nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see ListTargetAccountsRequest ). When no value is returned in this field, then no further data exists to be listed. AccountIdentification \u00b6 Used to identify which accounts can be presented to the consumer for certain selections, e.g. for selection lists while trying to perform/authorize transfers. id : The unique ID of the Account as created by its source domain. sourceDomain : The source domain which created the Account (eg: core-banking). initiateTransfer \u00b6 Create a transfer fund request between accounts owned by current customer. let amount = Amount(amount: Decimal(string: \"0.01\")!, currency: \"CAD\") let request = InitiateTransferRequest(sourceAccountId: sourceAccount.id, destinationAccountId: destinationAccount.id, fundTransfer: amount) sdk.coreTransferClient.initiateTransfer(request: request) { result in switch result { case .failure(let error): print(\"Initiate transfer error: \\(error)\") case .success(let response): guard response.reason.isEmpty else { print(\"Initiate transfer failed with reason: \\(response.reason)\") return } let transfer = response.details print(\"Initiate transfer success: \\(transfer)\") } } InitiateTransferRequest \u00b6 sourceAccountId : Represents the source account ID. Current customer needs to be owner or authorized user of the source account. Source account needs to have sufficient available balance and actual balance to be able to initiate the transfer. destinationAccountId : Represents the destination account ID. Current customer needs to be owner or authorized user of the destination account. fundTransfer : The amount of the fund transfer. The amount should be always positive. InitiateTransferResponse \u00b6 details : Details of the transaction with its status (whether the transaction is TransferStatus.completed or TransferStatus.declined ). See TransferTransactionDetails for more details. reason : Empty when status is TransferStatus.completed . Reason why transfer is declined. TransferTransactionDetails \u00b6 transactionId : Represents this single financial transaction (operation). lifecycleTransactionId : Represents the overarching transaction, across all phases of its lifecycle (e.g. authorization, settlement, reversal, ...). status : Status of the transfer. See TransferStatus enumeration for details on possible statuses. customerRole : The role played by our customer in this transaction. See CustomerRole for details on possible roles. transferType : The type of transfer for this transaction. See TransferType for details on possible types. counterparty : When transferType is interacAutodeposit , this will contain the details about the person/entity on the other side of this transfer. When transferType is internalAccountToAccount , this will contain the details of the owner of the destination account. clearingSystemRefNumber : Unique identifier assigned to the transaction by the external payment/transfer clearing system. remittance : Includes remittance data from this transfer if it contains any. TransferStatus enum \u00b6 unspecified : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. declined : Indicates that the transfer has been declined and rollback has been performed. When transferType is internalAccountToAccount , this could be due to insufficient funds to initiate the transfer. completed : Indicates that the transfer has been successfully completed. pending : Indicates that the transfer is in an intermediate stage before completion. CustomerRole enum \u00b6 unspecified : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. recipient : Indicates that the customer is the recipient of the transfer operation. initiator : Indicates that the customer is the initiator of the transfer operation. TransferType enum \u00b6 unspecified : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. internalAccountToAccount : Indicates that the transfer was an Account to Account transfer that did not transit through external systems ( stayed within the institution ). interacAutodeposit : Indicates that the transfer came through Interac systems, and used the Interac Autodeposit mechanism. interacRegularPayment : Indicates that the transfer came through Interac systems, and used the Interac Q&A mechanism. Structured and Unstructured Remittance Data \u00b6 Remittance includes additional information provided by the sender giving context for a transfer for instance, a transfer may be sent to a business by one of its clients in order to pay for a bill, the remittance data will include a reference to that bill payment. Remittance data could be unstructured or structured or both. Unstructured \u00b6 The unstructured remittance data can be used for free-form text such as in a memo field. User Interface and Data Mapping Example: Label Data element Notes data Structured \u00b6 Structured remittance data can be sent in up to 5 blocks for each transaction, with each block representing a document, such as a purchase order. The structured remittance data is organized into the following groupings of information: Referred Document Information : Information about the 'invoice'. Not necessarily an invoice, but some document that outlines the context and reason for the payment. Referred Document Amount : The amount being paid in the current transfer. Creditor Reference Information : Additional reference info provided by the creditor. Invoicer : Contains information about the payee, such as contact information. Invoicee : Contains information about the payor, such as contact information. Additional remittance information : A free form text field for additional remittance information. User Interface and Data Mapping Examples: \u00b6 Payor Details \u00b6 invoicee contains information about the payor. Label Data element Name invoicee.name Address Address Type invoicee.postalAddress.addressType. code Department invoicee.postalAddress.department Sub-department invoicee.postalAddress.subDepartment Street invoicee.postalAddress.streetName Street Number invoicee.postalAddress.buildingNumber Postal Code invoicee.postalAddress.postCode City invoicee.postalAddress.townName Province invoicee.postalAddress.countrySubDivision Country invoicee.postalAddress.country Address invoicee.postalAddress.addressLine Identification Payor ID invoicee.identification.organisationIdentification.other[n].identification ID type invoicee.identification.organisationIdentification.other[n].schemeName. code Contact Details Name invoicee.contactDetails. name Phone invoicee.contactDetails.phoneNumber Mobile invoicee.contactDetails.mobileNumber Fax invoicee.contactDetails.faxNumber Email Address invoicee.contactDetails.emailAddress Payee Details \u00b6 invoicer contains information about the payee. Label Data element Name invoicer.name Address Address Type invoicer.postalAddress.addressType. code Department invoicer.postalAddress.department Sub-department invoicer.postalAddress.subDepartment Street invoicer.postalAddress.streetName Street Number invoicer.postalAddress.buildingNumber Postal Code invoicer.postalAddress.postCode City invoicer.postalAddress.townName Province invoicer.postalAddress.countrySubDivision Country invoicer.postalAddress.country Address invoicer.postalAddress.addressLine Identification Payee ID invoicer.identification.organisationIdentification.other[n]. identification ID type invoicer.identification.organisationIdentification.other[n].schemeName. code Contact Details Name invoicer.contactDetails. name Phone invoicer.contactDetails. phoneNumber Mobile invoicer.contactDetails. mobileNumber Fax invoicer.contactDetails. faxNumber Email Address invoicer.contactDetails. emailAddress Document information \u00b6 Label Data element Document Type referredDocumentInformation[n].type.codeOrProprietary. code Purchase Order Number referredDocumentInformation[n].number Issue Date referredDocumentInformation[n].relatedDate Total Amount Due referredDocumentAmount.duePayableAmount.amount referredDocumentAmount.duePayableAmount.currency Discount Amount (if creditDebitIndicator=DBIT) referredDocumentAmount.adjustmentAmountAndReason[n].amount.amount referredDocumentAmount.adjustmentAmountAndReason[n].amount.currency Credit Amount (if creditDebitIndicator=CRDT) referredDocumentAmount.adjustmentAmountAndReason[n].amount.amount referredDocumentAmount.adjustmentAmountAndReason[n].amount.currency Reason for Adjustment referredDocumentAmount.adjustmentAmountAndReason[n].reason Additional Adjustment Information referredDocumentAmount.adjustmentAmountAndReason[n].additionalInformation Amount to be Paid referredDocumentAmount.remittedAmount.amount referredDocumentAmount.remittedAmount.currency Creditor Reference Type creditorReferenceInformation.type.codeOrProprietary. code Creditor Reference creditorReferenceInformation.reference Additional remittance information \u00b6 Label Data element Additional Details additionalRemittanceInformation[n] AddressType2Code enum \u00b6 ADDR : Postal Address PBOX : POBox Address HOME : Residential Address BIZZ : Busines s Address MLTO : MailTo Address DLVY : Delivery To Address ExternalOrganisationIdentification1Code enum \u00b6 BANK : Bank ID CBID : Central Bank ID CHID : Clearing House ID CINC : Corporation COID : Country Code CUST : Customer ID DUNS : DUNS Number EMPL : Employer ID GS1G : Global Location Number SREN : SIREN code SRET : SIRET code TXID : Tax ID DocumentType6Code enum \u00b6 MSIN : Metered Service Invoice CNFA : Credit Note Related To Financial Adjustment DNFA : Debit Note Related To Financial Adjustment CINV : Commercial Invoice CREN : Credit Note DEBN : Debit Note HIRI : Hire Invoice SBIN : Self Billed Invoice CMCN : Commercial Contract SOAC : Statement Of Account DISP : Dispatch Advice BOLD : Bill Of Lading VCHR : Voucher AROI : Account Receivable Open Item TSUT : Trade Services Utility Trans action PUOR : Purchase Order DocumentType3Code enum \u00b6 RADM : Remittance Advice Message RPIN : Related Payment Instructions FXDR : Foreign Exchange Deal Reference DISP : Dispatch Advice PUOR : Purchase Order SCOR : Structured Communication Reference getIncomingTransferDetails \u00b6 Retrieves the details and state of an incoming Interac Q&A transfer. let request = GetIncomingTransferDetailsRequest(interacPaymentNumber: interacPaymentNumber) sdk.coreTransferClient.getIncomingTransferDetails(request: request) { result in switch result { case .failure(let error): print(\"Get incoming transfer details error: \\(error)\") case .success(let response): print(\"Get incoming transfer details success: \\(response)\") } } GetIncomingTransferDetailsRequest \u00b6 interacPaymentNumber : The payment id, as provided by custom url scheme. You need to register custom URL scheme that Finaptic will provide(e.g. finaptic://interac/deposit?lang=en&paymentid=000000000). You can find more information here . GetIncomingTransferDetailsResponse \u00b6 transferDetails : Contains details about a given inbound Interac transfer. See IncomingTransferDetails . Errors: An error with error code FinapticErrorCode.transInteracInvalidTransfer msg: \"payment number is invalid\" will be generated in the following scenarios: calls made with a non-existent interacPaymentNumber An error with error code FinapticErrorCode.transInteracInconsistentCustomer msg: \"Transfer was previously authenticated with a different customer ID\" will be generated when: calls made with a different customer than was previously authenticated IncomingTransferDetails \u00b6 interacPaymentNumber : The payment number, as provided by Interac, which the details of the transfer will be returned for. transferStatus : The current status of the transfer. See IncomingTransferStatus . transferAmount : The amount of the transfer. expiryDate : The timestamp when this transfer will expire. initiatorName : The name of who initiated the transfer. authenticationRequired : Indicates if this transfer requires that the recipient provide a security answer before depositing the transfer into the account. securityQuestion : If authenticationRequired is true, the field contains the security question that the user must provide the answer to in order to deposit the transfer. senderMemo : An optional memo provided by the sender. IncomingTransferStatus enum \u00b6 unspecified : Reserved for error detection purposes. It should not be used directly. available : Represents that a transfer has not been processed and is in a valid state to be authorized. authorized : Represents that a transfer has been authorized and is in a valid state to be accepted or declined. accepted : Represents that a transfer has been accepted. The transfer is complete and deposited into the target account. canceled : Represents that a transfer is complete and not deposited to an account. Ways to achieve this state are: if the transfer is canceled by the sender, if the receiver declines the transfer, the transfer has expired, the receiver is unable to authenticate the transfer within the allotted attempts. Personal Finance Management \u00b6 getTransactions \u00b6 Lists transactions for a given Account with pagination. let request = GetTransactionsRequest(accountId: accountId, pageSize: 10, sortOrder: .descending) sdk.personalFinanceManagementClient.getTransactions(request: request) { result in switch result { case .success(let response): print(\"Get transactions success\") for transaction in response.transactions { print(\"Transaction with id \\(transaction.transactionId)\") } case .failure(let error): print(\"Get transactions error: \\(error)\") } } GetTransactionsRequest \u00b6 accountId : The Account ID for which Transactions are returned. pageSize : The maximum number of Transactions to return. This value must be greater or equal to one. pageToken : When retrieving page other than the initial page, the value for the page_token must be specified, and taken from the previous page's nextPageToken value (see GetTransactionsResponse ). When no value is specified, then the initial page will be returned. sortOrder : The order the returned Transactions are sorted in. Transactions are sorted by the Transaction's transactionTime field. See TransactionOrder . GetTransactionsResponse \u00b6 previousPageToken : The token to be used to retrieve the previous page of data. Must be passed in the pageToken field of the next request (see GetTransactionsRequest ). When no value is returned in this field, then there is no previous data to be listed. transactions : The requested list of Transactions . nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see GetTransactionsRequest ). When no value is returned in this field, then no further data exists to be listed. sortOrder : The order the Transactions are listed in. See TransactionOrder . getTransaction \u00b6 let request = GetTransactionRequest(transactionId: transactionId) sdk.personalFinanceManagementClient.getTransaction(request: request) { result in switch result { case .success(let response): print(\"Get transaction success: \\(response.transaction.transactionId)\") case .failure(let error): print(\"Get transaction error: \\(error)\") } } GetTransactionRequest \u00b6 transactionId : Transaction id. GetTransactionResponse \u00b6 - transaction : See Transactions . \u00b6 TransactionOrder enum \u00b6 orderUnspecified : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. Trying to make a request with this type will result in an error. descending : Represents newest first. ascending : Represents oldest first. Transaction \u00b6 transactionId : Unique identifier that represents this single financial transaction. lifecycleTransactionId : Unique identifier that represents the overarching transaction, across all phases of its lifecycle. amount : The Amount of the Transaction. transactorName : The name and location of the vendor where the payment was processed. balance : The resulting Balance of the Account after the Transaction has occurred. transactionState : TransactionState enumeration represents the state of a Transaction. See TransactionState . transactionType : The TransactionType of the Transaction. See TransactionType . accountId : ID of the Account on which the Transaction was authorised. This can also be utilised to fetch the Account. category : A localized descriptor of the transaction's category (i.e. Groceries, Transport, etc.). transactionTime : The UTC timestamp when the Transaction occurred. accountDomain : The name of the domain that can be queried for additional details regarding the Account of this transaction. initiatingDomain : The name of the domain that can be queried for additional details regarding this Transaction. TransactionState enum \u00b6 transactionStateUnspecified : Reserved for error detection purposes. It should not be used directly. posted : Represents a transaction that has been completed. pending : Represents a transaction in an intermediate state, dependent on the transaction type. unknown : Represents a transaction type where available information is insufficient to determine TransactionState. TransactionType enum \u00b6 transactionTypeUnspecified : Reserved for error detection purposes. It should not be used directly. authorized : Represents a transaction type that is a purchase for which the merchant has received approval from the bank. An authorized transaction will always have state pending . debit : Represents a transaction type when there is an addition to the amount in the customer's account. refund : Represents a transaction type when businesses and merchants issue a reversal of the transaction that had previously occurred (e.g. a previously credited transaction will be debited back into the customers account). chargeback : Represents a transaction type that is returned to a payment card after a customer successfully disputes an item on their account statement or transactions report. A chargeback may occur on debit cards (and the underlying bank account) or on credit cards. credit : Represents a transaction type when there is a deduction to the amount in the customer's account. productNotDefined : Represents a transaction state where available information is insufficient to determine TransactionType. Errors \u00b6 Most callable methods from the SDK potentially can fail with a FinapticError, which contains \"code\", \"message\" and \"cause\" attributes. sdk.onboardingClient.initiateApplication(request: request) { result in switch result { case .success(let response): ... case .failure(let error): switch error.code { case .unavailable: print(\"Check your internet connection and try again\") case .deadlineExceeded: print(\"Operation couldn't complete in the default timeout. Try again.\") default: print(\"Initiate application error: \\(error)\") } } }","title":"Finaptic iOS SDK"},{"location":"SDK-Guide/ios-sdk/#finaptic-ios-sdk","text":"The Finaptic iOS SDK provides a way to consume Finaptic APIs from your iOS application. It is written in Swift. Note that the Finaptic APIs are strictly accessed through the SDK because it hides the underlying implementation that could change in the future.","title":"Finaptic iOS SDK"},{"location":"SDK-Guide/ios-sdk/#prerequisites","text":"iOS version 13.0 or later Xcode 12.4","title":"Prerequisites"},{"location":"SDK-Guide/ios-sdk/#sample-application","text":"A sample application demonstrates what is explained in the document. Make sure you can run it using your own SDK key. Here are the steps to run the sample app: Open the file ViewController.swift and replace the SDK key with the one provided to you. Run the sample app on a device or simulator. Press Execute Onboarding button at the bottom to execute the onboarding flow. Open the xcode console. You will see the sample app logs as well as the SDK logs. Let the whole flow execute. It can take more than one minute. In a sandbox environment, you may experience delays when using a client for the first time or after a small inactivity period. It is due to the backend services cold start. If an error arises, it will be printed in the console. In this case, make sure the SDK key is the right one and retry. If the flow completes without error (no more requests are executing), you are good to integrate the SDK in your own app.","title":"Sample application"},{"location":"SDK-Guide/ios-sdk/#id-and-face-capture-with-acuant","text":"Please take a look at AcuantSample on how to use Acuant for document and face capture. You can read their official documentation here .","title":"ID and face capture with Acuant"},{"location":"SDK-Guide/ios-sdk/#installation","text":"Create a Podfile. Open a terminal window, and cd into your project directory Run pod init && pod install Open {ProjectName}.xcworkspace Copy Finaptic.xcframework , MCPSDK.xcframework and gRPC-Swift.podspec files to the root folder of your project. In XCode project navigator, select your project, go to General tab on the right side and select your project Target . Drag Finaptic.xcframework and MCPSDK.xcframework from Finder window and drop to Frameworks, Libraries, and Embedded Content . Select Copy items if needed and Create groups . Under Frameworks, Libraries, and Embedded Content set Do Not Embed for Finaptic.xcframework . MCPSDK.xcframework should be set to Embed & Sign . Add Finaptic dependencies to your Podfile . # Finaptic dependencies (statically linked) pod 'gRPC-Swift', :podspec => 'gRPC-Swift.podspec' pod 'Firebase/Core', '~> 8.3' pod 'Firebase/Auth', '~> 8.3' pod 'Firebase/Firestore', '~> 8.3' pod 'Firebase/RemoteConfig', '~> 8.3' pod 'Auth0', '~> 1.34.0' pod 'AWSCore', '~> 2.26' pod 'AWSConnect', '~> 2.26' pod 'AWSConnectParticipant', '~> 2.26' pod 'Starscream', '~> 3.1' # Acuant dependencies pod 'AcuantiOSSDKV11/AcuantCommon', '11.5.1' pod 'AcuantiOSSDKV11/AcuantCamera', '11.5.1' pod 'AcuantiOSSDKV11/AcuantFaceCapture', '11.5.1' pod 'AcuantiOSSDKV11/AcuantImagePreparation', '11.5.1' pod 'AcuantiOSSDKV11/AcuantDocumentProcessing', '11.5.1' Add the following hooks to your Podfile . pre_install do |installer| static_frameworks = [ 'Auth0', 'BoringSSL-GRPC', 'CGRPCZlib', 'CNIOAtomics', 'CNIOBoringSSL', 'CNIOBoringSSLShims', 'CNIODarwin', 'CNIOHTTPParser', 'CNIOLinux', 'CNIOWindows', 'Firebase', 'FirebaseABTesting', 'FirebaseAnalytics', 'FirebaseAuth', 'FirebaseCore', 'FirebaseCoreDiagnostics', 'FirebaseFirestore', 'FirebaseInstallations', 'FirebaseRemoteConfig', 'GTMSessionFetcher', 'GoogleAppMeasurement', 'GoogleDataTransport', 'GoogleUtilities', 'JWTDecode', 'Logging', 'PromisesObjC', 'SimpleKeychain', 'SwiftNIO', 'SwiftNIOConcurrencyHelpers', 'SwiftNIOExtras', 'SwiftNIOFoundationCompat', 'SwiftNIOHPACK', 'SwiftNIOHTTP1', 'SwiftNIOHTTP2', 'SwiftNIOSSL', 'SwiftNIOTLS', 'SwiftNIOTransportServices', 'SwiftProtobuf', 'abseil', 'gRPC-C++', 'gRPC-Core', 'gRPC-Swift', 'leveldb-library', 'nanopb'] installer.pod_targets.each do |pod| if static_frameworks.include?(pod.name) def pod.static_framework?; true end end end end post_install do |installer| installer.pods_project.targets.each do |target| if ['gRPC-Swift', 'SwiftNIO', 'SwiftNIOConcurrencyHelpers', 'SwiftNIOExtras', 'SwiftNIOFoundationCompat', 'SwiftNIOHPACK', 'SwiftNIOHTTP1', 'SwiftNIOHTTP2', 'SwiftNIOSSL', 'SwiftNIOTLS', 'SwiftNIOTransportServices'].include? target.name target.build_configurations.each do |config| config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'NO' end else if ['Auth0', 'SwiftProtobuf', 'AcuantiOSSDKV11', 'Socket.IO-Client-Swift', 'Starscream'].include? target.name target.build_configurations.each do |config| config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES' end end end end end Run pod install to downloads and install the pods.","title":"Installation"},{"location":"SDK-Guide/ios-sdk/#initialization","text":"The SDK must be initialized before you can make any call. The FinapticSDK.init method must be invoked. import Finaptic ... FinapticSDK.initialize(sdkKey: \"\") { result in switch result { case .success(let sdk): print(\"FinapticSDK initialized\") case .failure(let error): print(\"Initialization failed: \\(error)\") } } It is recommended to initialize the SDK once and store the returned instance in your own variable or container. You can now start to use the SDK through multiple clients.","title":"Initialization"},{"location":"SDK-Guide/ios-sdk/#onboardingclient","text":"Onboarding flow consists of initiate, update, validate and finalize calls. Initiate application initiateApplication Get information getConsentElectronicCommunication getConsentPrivacyPolicy getConsentTermsOfUse getConsentProductAgreement Update information updatePersonalDetails updateContactDetails updateAccountDetails updateAddresses updateConsents updateCustomerResidency updateDisclosures updateEmployment updateCommunicationPreferences Validate application validateDocuments validateSelfie validateApplication acceptApplication Finalize application finalizeApplicationCreateCustomer finalizeApplicationCreateProduct","title":"OnboardingClient"},{"location":"SDK-Guide/ios-sdk/#onboardingoperationresponsedetails","text":"OnboardingOperationResponseDetails are the common response fields for an onboarding application create or update message. applicationId : The UUID of the application the response is for. onboardingApplicationStatus : The updated application status. The value here is one of the following: \"UNDEFINED\" is reserved for error detection purposes. It should not be used directly. \"New Application\" describes an Application that has just been created. \"Data Collection describes an Application that has successfully performed an Update call or failed a ValidateSelfieRequest or a ValidateDocumentsRequest. \"KYC In Progress\" describes an Application that has successfully performed a ValidateSelfieRequest or ValidateDocumentsRequest. \"KYC Success\" describes an Application that has successfully performed KYC checks as a result of a ValidateApplicationRequest. \"KYC Failed\" describes an Application that has failed KYC as a result of a ValidateApplicationRequest. \"KYC Rejected\" describes an Application that has no remaining KYC attempts. \"Application Accepted\" describes an application that has successfully completed an AcceptApplicationRequest. \"Application Processed\" describes an application that has been successfully completed. \"Application Cancelled\" describes an application that has been cancelled by the customer. \"Application Rejected\" describes an application that has been rejected and cannot be continued. This is used when a more descriptive rejection status is not available. requestStatus : The success status of the request. requestStatusReason : The detailed reason for the request status. Deprecated : Use requestReasonCodes instead. remainingAllowedRetries : The remaining KYC retries allowed. failureStatusCodes : The list of codes explaining the reason of the request outcome. This list will only be populated when request status is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The list will otherwise be empty. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.failureCode . verificationNeeded : The list of verifications that will be needed be performed in order to complete the application. See OnboardingVerification . consents : The list of Consents required as part of this onboarding application. See TermsAndConditions . disclosures : The list of Consents required as part of this onboarding application. See TermsAndConditions .","title":"OnboardingOperationResponseDetails"},{"location":"SDK-Guide/ios-sdk/#onboardingverification","text":"Verification needed for an onboarding application name : The name of the OnboardingVerification. \"KYC\" means this application will perform KYC validation during the validate phase (ValidateDocumentsRequest, ValidateSelfieRequest and ValidateApplicationRequest) before being able to complete onboarding application. \"ProfileCreation\" means that this application requires input of basic customer information, without doing full KYC, before being able to complete onboarding application. \"AccountUsage\" means that this application needs to collect Account Usage information using UpdateAccountDetailsRequest before being able to complete onboarding application. requiredUpdates : The list of all Update request that are required as part of this verification (eg : [UpdateAccountDetailsRequest, UpdateConsentsRequest]).","title":"OnboardingVerification"},{"location":"SDK-Guide/ios-sdk/#termsandconditions","text":"TermsAndConditions is either a consent or a disclosure. documentType : The type of the terms and conditions. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.consentType or ReferenceDataTypes.disclosureType . documentNameAndVersion : The URL of the versioned terms and conditions document the customer needs to review and accept. neededBeforeValidation : Whether or not the terms and conditions need to be accepted before calling any of the validate requests.","title":"TermsAndConditions"},{"location":"SDK-Guide/ios-sdk/#initiateapplication","text":"This is the only call that must be executed prior any other one when processing an onboarding application. let request = InitiateApplicationRequest(customerId: nil, productId: \"prepaidV1\") sdk.onboardingClient.initiateApplication(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } let applicationId = response.basicDetails.applicationId print(\"Verification needed for an onboarding application:\") response.basicDetails.verificationNeeded.forEach { print($0) } case .failure(let error): print(\"Initiate application error: \\(error)\") } }","title":"initiateApplication"},{"location":"SDK-Guide/ios-sdk/#initiateapplicationrequest","text":"bundleId : The unique identifier of the bundle being applied for. \"despositV1\" : Deposit account without card. \"prepaidV1\" : Account and prepaid-card. \"creditcardV1\" : Account with credit card. \"productlessV1\" : Onboard a customer and do not validate his identity. \"kycV1\" : Onboard a customer, but do validate his identity.","title":"InitiateApplicationRequest"},{"location":"SDK-Guide/ios-sdk/#initiateapplicationresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . The returned application CONSENT TYPE and DOCUMENT NAME AND VERSION are required in consent update request.","title":"InitiateApplicationResponse"},{"location":"SDK-Guide/ios-sdk/#getconsentelectroniccommunication","text":"let response = sdk.onboardingClient.getConsentElectronicCommunication()","title":"getConsentElectronicCommunication"},{"location":"SDK-Guide/ios-sdk/#getconsenttermsofuse","text":"let response = sdk.onboardingClient.getConsentTermsOfUse()","title":"getConsentTermsOfUse"},{"location":"SDK-Guide/ios-sdk/#getconsentproductagreement","text":"let response = sdk.onboardingClient.getConsentProductAgreement()","title":"getConsentProductAgreement"},{"location":"SDK-Guide/ios-sdk/#getconsentprivacypolicy","text":"let response = sdk.onboardingClient.getConsentPrivacyPolicy() The returned application ID is required in every other request.","title":"getConsentPrivacyPolicy"},{"location":"SDK-Guide/ios-sdk/#updatepersonaldetails","text":"let request = UpdatePersonalDetailsRequest( onboardingApplicationId: applicationId, customerPersonalDetails: PersonalDetails( firstName: \"COMPANY\", middleName: nil, lastName: \"SAMPLE\", dateOfBirth: Calendar.current.date(from: DateComponents(year: 2000, month: 3, day: 6))!, alias: nil) ) sdk.onboardingClient.updatePersonalDetails(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update personal details error: \\(error)\") } }","title":"updatePersonalDetails"},{"location":"SDK-Guide/ios-sdk/#updatepersonaldetailsrequest","text":"Used to update the customer personal details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerPersonalDetails : See personal details .","title":"UpdatePersonalDetailsRequest"},{"location":"SDK-Guide/ios-sdk/#updatepersonaldetailsresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdatePersonalDetailsResponse"},{"location":"SDK-Guide/ios-sdk/#personaldetails","text":"firstName : The customer first name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. middleName : The customer middle name. This value is optional and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. lastName : The customer last name. This value is required and has a maximum of 50 characters. Accepted characters: -, ', French accents, 0-9. dateOfBirth : The customer's date of birth. alias : The customer alias. This value is optional and has a maximum of 20 characters. Accepts alphanumeric input without special characters.","title":"PersonalDetails"},{"location":"SDK-Guide/ios-sdk/#updatecontactdetails","text":"let contactPhoneNumber = PhoneNumberType(smsCompatible: true, number: \"+15141234567\") let request = UpdateContactDetailsRequest( onboardingApplicationId: applicationId, customerContactDetails: ContactDetails( ontactPhoneNumber: contactPhoneNumber, customerEmail: \"john.miller@mail.com\") ) sdk.onboardingClient.updateContactDetails(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update contact details error: \\(error)\") } }","title":"updateContactDetails"},{"location":"SDK-Guide/ios-sdk/#updatecontactdetailsrequest","text":"Used to update the customer contact details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerContactDetails : See contact details .","title":"UpdateContactDetailsRequest"},{"location":"SDK-Guide/ios-sdk/#updatecontactdetailsresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateContactDetailsResponse"},{"location":"SDK-Guide/ios-sdk/#contactdetails","text":"contactPhoneNumber : The contact phone number. This value is optional and must be in a valid phone number format. customerEmail : The contact email address. This value is required and must be in a valid email address format.","title":"ContactDetails"},{"location":"SDK-Guide/ios-sdk/#updateaccountdetails","text":"Fetch account purpose and source of funds values from reference data client . dataType: ReferenceDataTypes.accountPurpose dataType: ReferenceDataTypes.sourceOfFunds let request = UpdateAccountDetailsRequest( onboardingApplicationId: applicationId, accountDetails: AccountUsageDetails( accountPurpose: accountPurpose.code, primarySourceOfFunds: [sourceOfFunds.code]), authorizedThirdPartyUsage = authorizedThirdPartyUsage ) sdk.onboardingClient.updateAccountDetails(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update account details error: \\(error)\") } }","title":"updateAccountDetails"},{"location":"SDK-Guide/ios-sdk/#updateaccountdetailsrequest","text":"Used to update the customer account details in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. accountDetails : See account usage details .","title":"UpdateAccountDetailsRequest"},{"location":"SDK-Guide/ios-sdk/#updateaccountdetailsresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateAccountDetailsResponse"},{"location":"SDK-Guide/ios-sdk/#accountusagedetails","text":"Providing the source of funds and purpose for applying for an Account. accountPurpose : The intended purpose of the Account. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.accountPurpose . primarySourceOfFunds : The values stored here are a collection of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.sourceOfFunds . authorizedThirdPartyUsage : Indicates wether or not the account will be used on behalf of third parties not otherwise identified as owners or authorized users. True means that account will be used on behalf of third parties while false means that account will not be used on behalf of third parties.","title":"AccountUsageDetails"},{"location":"SDK-Guide/ios-sdk/#updateaddresses","text":"You need to use AddressClient to get the user's address. let request = UpdateAddressesRequest( onboardingApplicationId: applicationId, addresses: [address] ) sdk.onboardingClient.updateAddresses(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update addresses error: \\(error)\") } }","title":"updateAddresses"},{"location":"SDK-Guide/ios-sdk/#updateaddressesrequest","text":"Used to update the addresses occupied by the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. addresses : Collection of addresses occupied by the customer. See Address .","title":"UpdateAddressesRequest"},{"location":"SDK-Guide/ios-sdk/#updateaddressesresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateAddressesResponse"},{"location":"SDK-Guide/ios-sdk/#address","text":"type : The type of Address being represented. Must be either \"HOME\" or \"WORK\" (required). organization : The first line of the Address. This value is required and has a maximum of 300 characters. line1 : The first line of the Address. This value is required and has a maximum of 300 characters. line2 : The second line of the Address. This value is optional, and has a maximum of 300 characters. line3 : The third line of the Address. This value is optional, and has a maximum of 300 characters. line4 : The fourth line of the Address. This value is optional, and has a maximum of 300 characters. line5 : The fifth line of the Address. This value is optional, and has a maximum of 300 characters. line6 : The sixth line of the Address. This value is optional, and has a maximum of 300 characters. line7 : The seventh line of the Address. This value is optional, and has a maximum of 300 characters. line8 : The eighth line of the Address. This value is optional, and has a maximum of 300 characters. locality : The local sub administrative area such as the municipality or community name. In Canadian and US addresses, this corresponds to the city or town name. This value is optional and has a maximum of 150 characters. e.g. Toronto, Orlando. dependentLocality : The municipality or community name of the major postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. doubleDependentLocality : The municipality or community name of the local postal region address. For Canadian and US addresses, this can remain empty. This value is optional and has a maximum of 150 characters. administrativeArea : The name of the first level administrative area. This value is optional and has a maximum of 150 characters. e.g. For US this would be 'State' and Canada this would be 'Province' subAdministrativeArea : The name of the second level administrative area. This value is optional and has a maximum of 150 characters. e.g. For a city use 'City', county use 'County', etc. area : The name of country first level administrative subdivision area in the address. For Canada, this is name of the province and for the US this is the name of the State. This field is required and has postalCode : The local postal code for routing mail to the address and should contain the ZIP code for US addresses. This field is required and has a maximum of 150 characters. country : The name of the country for the Address. This value is required and has a maximum of 50 characters.","title":"Address"},{"location":"SDK-Guide/ios-sdk/#updateconsents","text":"Fetch consent values from reference data client with dataType: ReferenceDataTypes.consentType . let request = UpdateConsentsRequest( onboardingApplicationId: applicationId, consents: [ Consent(consentType: consent.code, consentTimestamp: Date(), documentNameAndVersion: \"https://must-be-a-well-formed-url.com/document/1.0\", viewTimestamp: Date()) ] ) sdk.onboardingClient.updateConsents(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update consents error: \\(error)\") } }","title":"updateConsents"},{"location":"SDK-Guide/ios-sdk/#updateconsentsrequest","text":"Used to update the consents received from the customer for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. consents : Collection of consents. See Consent .","title":"UpdateConsentsRequest"},{"location":"SDK-Guide/ios-sdk/#updateconsentsresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateConsentsResponse"},{"location":"SDK-Guide/ios-sdk/#consent","text":"Consent is indicating the receipt of a requested customer Consent. consentType : The type of Consent received from the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.consentType . documentNameAndVersion : The name and version of the document in URL format that the customer consented to. viewTimestamp : The UTC timestamp when the customer viewed the document.","title":"Consent"},{"location":"SDK-Guide/ios-sdk/#updatecustomerresidency","text":"let request = UpdateCustomerResidencyRequest( onboardingApplicationId: applicationId, residency: CustomerResidency( isCanadianTaxResident: true, otherResidences: nil, sinToken: nil, citizenship: \"CA\") ) sdk.onboardingClient.updateCustomerResidency(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update customer residency error: \\(error)\") } }","title":"updateCustomerResidency"},{"location":"SDK-Guide/ios-sdk/#updatecustomerresidencyrequest","text":"Used to update the customer residency status in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. residency : The customer residency status. See CustomerResidency .","title":"UpdateCustomerResidencyRequest"},{"location":"SDK-Guide/ios-sdk/#updatecustomerresidencyresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateCustomerResidencyResponse"},{"location":"SDK-Guide/ios-sdk/#customerresidency","text":"Contains the residency status details of the customer. isCanadianTaxResident : The Canadian residency status. This is true if the customer is a Canadian resident, false otherwise. otherResidences : A collection of other countries where the customer has residence. At least one is required if not a Canadian resident. See OtherResidence . sinToken : A tokenized UUID representation of the customer SIN number. citizenship : The primary or current citizenship of the customer. The format is an ISO 3166 Country alpha-2 code (e.g. US, CA, FR).","title":"CustomerResidency"},{"location":"SDK-Guide/ios-sdk/#otherresidence","text":"Alternate countries and places of residence. otherResidenceCountry : The name of the other country of residence. tinToken : A tokenized UUID representation of the unique TIN for the country of residence. Optional. citizenship : The citizenship status in the country of residence. Required if residence country is US or Canada.","title":"OtherResidence"},{"location":"SDK-Guide/ios-sdk/#updatedisclosures","text":"Fetch disclosure type values from reference data client with dataType: ReferenceDataTypes.disclosureType . let request = UpdateDisclosuresRequest( onboardingApplicationId: applicationId, disclosures: [ Disclosure( disclosureType: disclosure.code, timestamp: Date(), documentNameAndVersion: \"https://must-be-a-well-formed-url.com/document/1.0\") ] ) sdk.onboardingClient.updateDisclosures(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update disclosures error: \\(error)\") } }","title":"updateDisclosures"},{"location":"SDK-Guide/ios-sdk/#updatedisclosuresrequest","text":"Used to update the disclosures received by the customer in the onboarding application onboardingApplicationId : The UUID of the onboarding application to update. disclosures : Collection of disclosures. See Disclosure .","title":"UpdateDisclosuresRequest"},{"location":"SDK-Guide/ios-sdk/#updatedisclosuresresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateDisclosuresResponse"},{"location":"SDK-Guide/ios-sdk/#disclosure","text":"Customer receipt of a documented Disclosure. disclosureType : The type of Disclosure sent to the customer. This value is required. The value stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.disclosureType . timestamp : The UTC timestamp when the customer viewed the document. documentNameAndVersion : Name and version of the disclosure document in URL format that the customer viewed.","title":"Disclosure"},{"location":"SDK-Guide/ios-sdk/#updateemployment","text":"Fetch employment status from reference data client . dataType: ReferenceDataTypes.occupation dataType: ReferenceDataTypes.industry dataType: ReferenceDataTypes.employmentStatus let phoneNumber = PhoneNumberType(smsCompatible: true, number: \"+15141234567\") let request = UpdateEmploymentRequest( onboardingApplicationId: applicationId, employmentInfo: Employment( employmentStatus: employment.code, employerName: \"Finaptic\", industry: industry.code, occupation: occupation.code, startDate: Calendar.current.date(from: DateComponents(year: 2019, month: 1, day: 1)), endDate: Calendar.current.date(from: DateComponents(year: 2020, month: 12, day: 31)), workAddress: address, phoneNumber: phoneNumber) ) sdk.onboardingClient.updateEmployment(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update employment error: \\(error)\") } }","title":"updateEmployment"},{"location":"SDK-Guide/ios-sdk/#updateemploymentrequest","text":"Used to update the customer employment information in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. employmentInfo : Employment information. See Employment .","title":"UpdateEmploymentRequest"},{"location":"SDK-Guide/ios-sdk/#updateemploymentresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateEmploymentResponse"},{"location":"SDK-Guide/ios-sdk/#employment","text":"Employment defines the details of Employment for the customer being onboarded. employmentStatus : The status of Employment. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.employmentStatus . employerName : The full employer name. The value is required and has a maximum of 50 characters. industry : The industry code the Employment is in. This value is required and has a maximum of 50 characters. The value is retrieved from the / ReferenceDataClient with dataType set to ReferenceDataTypes.industry . occupation : The roles and duties the customer performs for the employer. This value is optional and has a maximum of 50 characters. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.occupation . If the employment status is 'EMPLOYMENT_STATUS_UNEMPLOYED', 'EMPLOYMENT_STATUS_RETIRED', 'EMPLOYMENT_STATUS_STUDENT_UNEMPLOYED', or 'EMPLOYMENT_STATUS_HOMEMAKER' then the Occupation field must be left empty. startDate : The month and year the customer started this position. endDate : The month and year the customer no longer held this position. workAddress : The 'type' field must be set to 'WORK'. Required. See Address . phoneNumber : The phone number of the employer. Required.","title":"Employment"},{"location":"SDK-Guide/ios-sdk/#updatecommunicationpreferences","text":"Fetch communication preferences from reference data client with dataType: ReferenceDataTypes.communicationPreference . let request = UpdateCommunicationPreferencesRequest( onboardingApplicationId: applicationId, customerCommunicationPref: communicationPreference.code ) sdk.onboardingClient.updateCommunicationPreferences(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Update communication preferences error: \\(error)\") } }","title":"updateCommunicationPreferences"},{"location":"SDK-Guide/ios-sdk/#updatecommunicationpreferencesrequest","text":"Used to update the communication preferences of the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to update. customerCommunicationPref : The customer communication preference. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.communicationPreference . customerCommunicationLanguage : The customer communication language. The value is retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.language .","title":"UpdateCommunicationPreferencesRequest"},{"location":"SDK-Guide/ios-sdk/#updatecommunicationpreferencesresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"UpdateCommunicationPreferencesResponse"},{"location":"SDK-Guide/ios-sdk/#createfileuploadurl","text":"Create upload url for document front, back and selfie. let request = CreateFileUploadUrlRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.createFileUploadURL(request: request) { result in guard let self = self else { return } switch result { case .success(let response): print(\"File upload url: \\(result.uploadUrl)\") case .failure(let error): print(\"Create file upload url for front error: \\(error)\") } }","title":"createFileUploadURL"},{"location":"SDK-Guide/ios-sdk/#createfileuploadurlrequest","text":"onboardingApplicationId : The UUID representing the onboarding application that requested a file upload URL.","title":"CreateFileUploadUrlRequest"},{"location":"SDK-Guide/ios-sdk/#createfileuploadurlresponse","text":"filename : The generated name for the file to upload. This value must be used for ValidateDocumentsRequest or ValidateSelfieRequest . uploadUrl : The URL to use to upload the file.","title":"CreateFileUploadUrlResponse"},{"location":"SDK-Guide/ios-sdk/#validatedocuments","text":"Fetch document types from reference data client with dataType: ReferenceDataTypes.documentType . let request = ValidateDocumentsRequest( onboardingApplicationId: applicationId, documentDetails: [ DocumentInfo( documentType: documentType.code, documentCountry: \"CA\", frontImageFileName: idFrontFileUpload.filename, backImageFileName: idBackFileUpload.filename, // The state issuing the document used to identify the applicant. // documentState must be set when document type is driver license. // The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataTypes.state concatenate with country code retrieved from dataType set to ReferenceDataTypes.country. // e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...) documentState = documentStateType.code) ] ) sdk.onboardingClient.validateDocuments(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. let failureStatusCodes = details.failureStatusCodes if (!failureStatusCodes.isEmpty) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.failureCode. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY print(\"failureStatusCodes: \\(failureStatusCodes)\") } } case .failure(let error): print(\"Validate documents error: \\(error)\") } }","title":"validateDocuments"},{"location":"SDK-Guide/ios-sdk/#validatedocumentsrequest","text":"Used to perform operation of validating the identification documents received from the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to validate. documentDetails : Collection of documents to validate. See DocumentInfo .","title":"ValidateDocumentsRequest"},{"location":"SDK-Guide/ios-sdk/#validatedocumentsresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.failureCode . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\"","title":"ValidateDocumentsResponse"},{"location":"SDK-Guide/ios-sdk/#documentinfo","text":"Details of an onboarding document collected from the customer to prove identity. documentType : The type of document used for identification. The value here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.documentType . e.g. \"DOCUMENT_TYPE_CANADIAN_DRIVERS_LICENSE\" or \"DOCUMENT_TYPE_CANADIAN_PASSPORT\" . documentCountry : The country the document was issued for. frontImageFileName : The file name of the uploaded image of the front of the document. (required, file size <4MB) backImageFileName : The file name of the uploaded image of the back of the document. (required, file size <4MB) documentState : The state issuing the document used to identify the applicant. The value here is one of the code values retrieved from the ReferenceDataClient with dataType set to \"STATE_\" concatenate with country code retrieved from dataType set to ReferenceDataTypes.country . e.g. 'STATE_CA' will retrieve all states from Canada ('BC', 'AB', 'QC'...)","title":"DocumentInfo"},{"location":"SDK-Guide/ios-sdk/#validateselfie","text":"let request = ValidateSelfieRequest( onboardingApplicationId: applicationId, fileName: selfieFileUpload.filename ) sdk.onboardingClient.validateSelfie(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. let failureStatusCodes = details.failureStatusCodes if (!failureStatusCodes.isEmpty) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.failureCode. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY print(\"failureStatusCodes: \\(failureStatusCodes)\") } } case .failure(let error): print(\"Validate selfie error: \\(error)\") } }","title":"validateSelfie"},{"location":"SDK-Guide/ios-sdk/#validateselfierequest","text":"Used to perform operation of validating the selfie pictures received from the customer in the onboarding application. onboardingApplicationId : The UUID of the onboarding application to validate. fileName : The name of the selfie file to validate. (required, file size <4MB)","title":"ValidateSelfieRequest"},{"location":"SDK-Guide/ios-sdk/#validateselfieresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.failureCode . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\"","title":"ValidateSelfieResponse"},{"location":"SDK-Guide/ios-sdk/#validateapplication","text":"let request = ValidateApplicationRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.validateApplication(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } // The following check is only for validateSelfie, validateDocuments and validateApplication if (response.basicDetails.onboardingApplicationStatus == ApplicationStatus.dataCollection || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycFailed || response.basicDetails.onboardingApplicationStatus == ApplicationStatus.kycRejected) { // The user was not approved during validation. // You may ask the user to check his info, retake the images and update/validate again. let failureStatusCodes = details.failureStatusCodes if (!failureStatusCodes.isEmpty) { // The list of codes explaining the reason of the request outcome. // This list will only be populated when request status is \"KYC Failed\", \"KYC Rejected\", or \"Application Rejected\". // The list will otherwise be empty. The value stored here is one of the code values retrieved from the // ReferenceDataClient with dataType set to ReferenceDataClient.failureCode. // You can't retry after getting one of the following error codes: // FAILURE_CODE_DEFAULT // FAILURE_CODE_AGE_OF_MAJORITY print(\"failureStatusCodes: \\(failureStatusCodes)\") } } case .failure(let error): print(\"Validate application error: \\(error)\") } }","title":"validateApplication"},{"location":"SDK-Guide/ios-sdk/#validateapplicationrequest","text":"Used to perform operation of validating the entire onboarding application and all documents received from the customer. onboardingApplicationId : The UUID of the onboarding application to validate.","title":"ValidateApplicationRequest"},{"location":"SDK-Guide/ios-sdk/#validateapplicationresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . For error handling, you need to check failureStatusCodes if the requestStatus is \"KYC Failed\" , \"KYC Rejected\" , or \"Application Rejected\" . The values stored here is one of the code values retrieved from the ReferenceDataClient with dataType set to ReferenceDataTypes.failureCode . You can't retry after getting one of the following error codes: \"FAILURE_CODE_DEFAULT\" \"FAILURE_CODE_AGE_OF_MAJORITY\"","title":"ValidateApplicationResponse"},{"location":"SDK-Guide/ios-sdk/#acceptapplication","text":"let request = AcceptApplicationRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.acceptApplication(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Accept application error: \\(error)\") } }","title":"acceptApplication"},{"location":"SDK-Guide/ios-sdk/#acceptapplicationrequest","text":"Used to perform operation of accepting the onboarding application received from the customer. onboardingApplicationId : The UUID of the onboarding application to accept.","title":"AcceptApplicationRequest"},{"location":"SDK-Guide/ios-sdk/#acceptapplicationresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"AcceptApplicationResponse"},{"location":"SDK-Guide/ios-sdk/#finalizeapplicationcreatecustomer","text":"The user needs to be authenticated before you create a customer. let request = FinalizeApplicationCreateCustomerRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.finalizeApplicationCreateCustomer(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Finalize application create customer error: \\(error)\") } }","title":"finalizeApplicationCreateCustomer"},{"location":"SDK-Guide/ios-sdk/#finalizeapplicationcreatecustomerrequest","text":"Used to perform operation of creating the customer for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to create a customer for.","title":"FinalizeApplicationCreateCustomerRequest"},{"location":"SDK-Guide/ios-sdk/#finalizeapplicationcreatecustomerresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . customerId : The UUID representing the newly created customer.","title":"FinalizeApplicationCreateCustomerResponse"},{"location":"SDK-Guide/ios-sdk/#finalizeapplicationcreateproduct","text":"let request = FinalizeApplicationCreateProductRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.finalizeApplicationCreateProduct(request: request) { result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Finalize application create product error: \\(error)\") } }","title":"finalizeApplicationCreateProduct"},{"location":"SDK-Guide/ios-sdk/#finalizeapplicationcreateproductrequest","text":"Used to perform operation of creating the product for the onboarding application. onboardingApplicationId : The UUID of the onboarding application to create the product for.","title":"FinalizeApplicationCreateProductRequest"},{"location":"SDK-Guide/ios-sdk/#finalizeapplicationcreateproductresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails . products : Collection of products created. See OnboardedProduct .","title":"FinalizeApplicationCreateProductResponse"},{"location":"SDK-Guide/ios-sdk/#onboardedproduct","text":"productId : The UUID of the onboarded product. sourceDomain : The source domain of the onboarded product.","title":"OnboardedProduct"},{"location":"SDK-Guide/ios-sdk/#cancelapplication","text":"Canceling the onboarding application. let request = CancelApplicationRequest(onboardingApplicationId: applicationId) sdk.onboardingClient.cancelApplication(request: request) { [weak self] result in switch result { case .success(let response): if (response.basicDetails.requestStatus != \"OK\") { // Could not process the request properly. You can retry the request. } case .failure(let error): print(\"Cancel application error: \\(error)\") } }","title":"cancelApplication"},{"location":"SDK-Guide/ios-sdk/#cancelapplicationrequest","text":"onboardingApplicationId : The UUID of the onboarding application to cancel.","title":"CancelApplicationRequest"},{"location":"SDK-Guide/ios-sdk/#cancelapplicationresponse","text":"basicDetails : The basic details of the onboarding application response. See OnboardingOperationResponseDetails .","title":"CancelApplicationResponse"},{"location":"SDK-Guide/ios-sdk/#authorized-users","text":"","title":"Authorized Users"},{"location":"SDK-Guide/ios-sdk/#inviteauthorizeduser","text":"let request = InviteAuthorizedUserRequest( invitedCustomerIdentifier: \"test@finaptic.com\", accountId: account.id) sdk.onboardingClient.inviteAuthorizedUser(request: request) { result in switch result { case .success(let response): print(\"Invite authorized user success with id \\(response.invitation.invitationId)\") case .failure(let error): print(\"Invite authorized user error: \\(error)\") } }","title":"InviteAuthorizedUser"},{"location":"SDK-Guide/ios-sdk/#inviteauthorizeduserrequest","text":"Used to perform operation of inviting a user to join an account as an authorized user. invitedCustomerIdentifier : The identifier to be used to lookup for the invited customer. This can either the username, or the email address of the customer to invite. If the identifier does not map to any known user, the operation will succeed, if this occurs the invitation will expire automatically after a period of time, without having been accepted or declined. accountId : The ID of the account on which an authorized user is to be added. The customer issuing the request must be an Owner for the account. invitationMetadata : Optional. Additional metadata to attach to the invitation, to be consumed by the invited user before accepting the invitation.","title":"InviteAuthorizedUserRequest"},{"location":"SDK-Guide/ios-sdk/#inviteauthorizeduserresponse","text":"invitation : The resulting invitation created by the InviteAuthorizedUserRequest. See AuthorizedUserInvitation for details. Errors: If the customer mapping to this identifier is already an Owner or an Authorized User for the account, then the operation will fail with a FinapticErrorCode.alreadyExists code, and provide a message indicating the reason for the conflict. If there is already an invitation that was issued for this account, for the invited user, the operation will fail with an FinapticErrorCode.alreadyExists code, and provide a message indicating the reason for the conflict. If the customer issuing the request isn't an Owner, then the operation will fail with a FinapticErrorCode.permissionDenied code, and provide a message indicating the reason. If there is already an invitation that was issued for this account, for the invited customer, the operation will fail with a FinapticErrorCode.alreadyExists code, and provide a message indicating the reason for the conflict.","title":"InviteAuthorizedUserResponse"},{"location":"SDK-Guide/ios-sdk/#authorizeduserinvitation","text":"invitationId : The unique identifier of the invitation. This value is required to Accept, Decline, or Confirm invitations. issuerCustomerId : The customer ID of the person that issued the invitation. invitedCustomerId : The customer ID of the person that was invited to join the account as an authorized user. accountId : The account ID for which an invitation was sent. status : The current status of the invitation. Refer to AuthorizedUserInvitationStatus enumeration for details on statuses and meaning. creationTime : The time at which the invitation was issued. expirationTime : Time at which it will no longer be possible for the invited customer to Accept the invitation. invitationMetadata : Additional metadata that has been attached to the invitation. This will contain the metadata specified by the last operation on the invitation.","title":"AuthorizedUserInvitation"},{"location":"SDK-Guide/ios-sdk/#authorizeduserinvitationstatus-enum","text":"pending : Represents an invitation that is waiting for an accept or decline response from the invited user. accepted : Represents an invitation that was accepted by the invited user, and pending completion by the issuer of the invitation. declined : Represents an invitation that was declined by the invited user. A declined invitation cannot be completed. completed : Represents an invitation that was successfully completed by the issuer of the invitation. In this status, the invited customer has successfully joined the account as an Authorized User. expired : Represents an invitation that wasn't accepted or declined within the allotted time. An expired invitation cannot be accepted or declined.","title":"AuthorizedUserInvitationStatus enum"},{"location":"SDK-Guide/ios-sdk/#acceptauthorizeduserinvitation","text":"let request = AcceptAuthorizedUserInvitationRequest( invitationId: invitation.invitationId) sdk.onboardingClient.acceptAuthorizedUserInvitation(request: request) { result in switch result { case .success(_): print(\"Accepted authorized user invitation with id \\(invitation.invitationId)\") case .failure(let error): print(\"Accept authorized user invitation error: \\(error)\") } }","title":"AcceptAuthorizedUserInvitation"},{"location":"SDK-Guide/ios-sdk/#acceptauthorizeduserinvitationrequest","text":"Used to perform operation of accepting an invitation issued to the user to join an account as an authorized user. invitationId : The ID of the invitation to accept. This must represent a valid invitation that was issued to the current user. invitationMetadata : Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter before confirming the invitation.","title":"AcceptAuthorizedUserInvitationRequest"},{"location":"SDK-Guide/ios-sdk/#acceptauthorizeduserinvitationresponse","text":"Response intentionally left without fields. Errors: If the current user is not the user the invitation was issued to, then the operation will fail with a FinapticErrorCode.permissionDenied code, and provide a message indicating the reason for the conflict. If the invitation is not in the Pending status, the operation will fail with a FinapticErrorCode.failedPrecondition code, and provide a message indicating that status was invalid. If the invitation has expired, the operation will also fail with a FinapticErrorCode.failedPrecondition code, and provide a message indicating that invitation has expired.","title":"AcceptAuthorizedUserInvitationResponse"},{"location":"SDK-Guide/ios-sdk/#declineauthorizeduserinvitation","text":"let request = DeclineAuthorizedUserInvitationRequest( invitationId: invitation.invitationId) sdk.onboardingClient.declineAuthorizedUserInvitation(request: request) { result in switch result { case .success(_): print(\"Declined authorized user invitation with id \\(invitation.invitationId)\") case .failure(let error): print(\"Decline authorized user invitation error: \\(error)\") } }","title":"DeclineAuthorizedUserInvitation"},{"location":"SDK-Guide/ios-sdk/#declineauthorizeduserinvitationrequest","text":"invitationId : The ID of the invitation to decline. This must represent a valid invitation that was issued to the current user. invitationMetadata : Optional. Additional metadata to attach to the response to the invitation, for the consumption by inviter when reviewing invitation status.","title":"DeclineAuthorizedUserInvitationRequest"},{"location":"SDK-Guide/ios-sdk/#declineauthorizeduserinvitationresponse","text":"Response intentionally left without fields. Errors: If the current user is not the user the invitation was issued to, then the operation will fail with a FinapticErrorCode.permissionDenied code, and provide a message indicating the reason for the conflict. If the invitation is not in the Pending status, the operation will fail with a FinapticErrorCode.failedPrecondition code, and provide a message indicating that status was invalid. If the invitation has expired, the operation will also fail with a FinapticErrorCode.failedPrecondition code, and provide a message indicating that invitation has expired.","title":"DeclineAuthorizedUserInvitationResponse"},{"location":"SDK-Guide/ios-sdk/#confirmauthorizeduserinvitation","text":"let request = ConfirmAuthorizedUserInvitationRequest( invitationId: invitation.invitationId) sdk.onboardingClient.confirmAuthorizedUserInvitation(request: request) { result in switch result { case .success(_): print(\"Confirm authorized user invitation with id \\(invitation.invitationId)\") case .failure(let error): print(\"Confirm authorized user invitation error: \\(error)\") } }","title":"ConfirmAuthorizedUserInvitation"},{"location":"SDK-Guide/ios-sdk/#confirmauthorizeduserinvitationrequest","text":"Used to perform operation of confirming an invitation that was accepted by the invited customer. invitationId : The ID of the invitation to confirm.","title":"ConfirmAuthorizedUserInvitationRequest"},{"location":"SDK-Guide/ios-sdk/#confirmauthorizeduserinvitationresponse","text":"Response intentionally left without fields. Errors: If the current user is not the issuer of the invitation, then the operation will fail with a FinapticErrorCode.permissionDenied code, and provide a message indicating the reason for the conflict. If the invitation is not in the Accepted status, the operation will fail with a FinapticErrorCode.failedPrecondition code, and provide a message indicating that status was invalid.","title":"ConfirmAuthorizedUserInvitationResponse"},{"location":"SDK-Guide/ios-sdk/#removeauthorizeduser","text":"let request = RemoveAuthorizedUserRequest(accountId: accountId, authorizedUser: authorizedUserId) self.sdk.onboardingClient.removeAuthorizedUser(request: request) { result in switch result { case .success(let response): print(\"Removed authorized user. \\(response.authorizedUsers)\") case .failure(let error): print(\"Remove authorized user failed with error: \\(error)\") } } A user can remove an authorized user only if they have completed the step up authentication with a scope set to \"remove:authorized_user\" . let request = SignInRequest(credential: credential, scope: \"remove:authorized_user\") sdk.authenticationClient.signIn(request: request) { result in switch result { case .success(_): print(\"You may call removeAuthorizedUser\") case .failure(let error): print(\"Sign in error: \\(error)\") } }","title":"RemoveAuthorizedUser"},{"location":"SDK-Guide/ios-sdk/#removeauthorizeduserrequest","text":"Used to remove an authorized user from the provided Account. accountId : The ID of the Account where the authorized is removed from. authorizedUser : The ID of the authorized user to add to the Account.","title":"RemoveAuthorizedUserRequest"},{"location":"SDK-Guide/ios-sdk/#removeauthorizeduserresponse","text":"authorizedUsers : The resulting list of authorized users of the Account.","title":"RemoveAuthorizedUserResponse"},{"location":"SDK-Guide/ios-sdk/#getinvitations","text":"Returns the list of invitations for the current user. This will include invitations issued by the current user, as well as invitations where the current user is the invited customer. This operation always return all invitations, including invitations that are pending, expired, have been accepted, declined, require confirmation or that have already been completed. sdk.onboardingClient.getInvitations(request: GetAuthorizedUserInvitationsRequest()) { result in switch result { case .success(let response): if (response.invitations.isEmpty) { print(\"No invitations\") } else { response.invitations.forEach { print(\"Invitation with \\($0.status) status and id \\($0.invitationId)\") } } completion(response.invitations) case .failure(let error): print(\"Get invitations error: \\(error)\") } }","title":"GetInvitations"},{"location":"SDK-Guide/ios-sdk/#getauthorizeduserinvitationsrequest","text":"At this moment, there are no configurable options for this request.","title":"GetAuthorizedUserInvitationsRequest"},{"location":"SDK-Guide/ios-sdk/#getauthorizeduserinvitationsresponse","text":"invitations : The list of invitations for the current user. See AuthorizedUserInvitation","title":"GetAuthorizedUserInvitationsResponse"},{"location":"SDK-Guide/ios-sdk/#referencedataclient","text":"ReferenceDataTypes: addressType consentType disclosureType documentType communicationPreference accountPurpose sourceOfFunds employmentStatus onboardingStatus country state occupation industry language failureCode let request = GetReferenceDataByTypeRequest(dataType: ReferenceDataTypes.accountPurpose, locale: \"EN_CA\") sdk.referenceDataClient.regetReferenceDataByType(request: request) { result in switch result { case .success(let response): print(response.data) case .failure(let error): print(\"Reference data error: \\(error)\") } }","title":"ReferenceDataClient"},{"location":"SDK-Guide/ios-sdk/#addressclient","text":"Address client provides a list of suggested addresses. Make sure to use debouncing or throttling when calling this function on user input. let request = AddressSuggestionsRequest( onboardingApplicationId: onboardingApplicationId, pattern: \"123\", addressType: AddressTypes.homeAddressType ) sdk.addressClient.getSuggestions(request: request) { result in switch result { case .success(let response): print(response.suggestions.first) case .failure(let error): print(\"Address suggestions error: \\(error)\") } }","title":"AddressClient"},{"location":"SDK-Guide/ios-sdk/#authenticationclient","text":"","title":"AuthenticationClient"},{"location":"SDK-Guide/ios-sdk/#signup","text":"let credential = Credential( email: \"sample@finaptic.com\", password: \"Password1234!@#$\", username: \"Username\" ) let request = SignUpRequest(credential: credential) sdk.authenticationClient.signUp(request: request) { result in switch result { case .success(): print(\"Sign up success. Proceed to sign in.\") case .failure(let error): print(\"Sign up error: \\(error)\") } } Possible error codes: signupCredentialError If the password used doesn't comply with the password policy for the connection. The user your are attempting to sign up is invalid. The chosen password is too weak signupError : The chosen password is based on user information. eg. password contains email, username contains emails etc. The user you are attempting to sign up has already signed up. The username you are attempting to sign up with is already in use. The message property of FinapticError will give more information about the error.","title":"signUp"},{"location":"SDK-Guide/ios-sdk/#credential","text":"email : Used to signUp or signIn the user. (requred for signUp) username : Username can be up to 15 characters, contain alphanumeric characters and the following characters: '_', '+', '-', '.', '!', '#', '$', ''', '^', '`', '~' and '@'. Can be used to sign up and sign in the user. It might be optional. password : Password must have at least 12 characters, 1 lowercase, 1 uppercase, 1 number and should not contain common words or email parts.","title":"Credential"},{"location":"SDK-Guide/ios-sdk/#signin","text":"let credential = Credential( email: \"sample@finaptic.com\", password: \"Password1234!@#$\", username: \"Username\" ) let request = SignInRequest(credential: credential) sdk.authenticationClient.signIn(request: request) { result in switch result { case .success(let response): print(response) case .failure(let error): print(\"Sign up error: \\(error)\") } } Possible error codes: signinError The password provided for sign up/update has already been used (reported when password history feature is enabled). The account is blocked due to too many attempts to sign in. If the password has been leaked and a different one needs to be used. signinInvalidPassword The username and/or password used for authentication are invalid. The password provided does not match the connection's strength requirements. mfaError : The multi-factor authentication (MFA) code provided by the user is invalid/expired. The administrator has required multi-factor authentication, but the user has not enrolled. The user must provide the multi-factor authentication code to authenticate. signInUserBlocked : The account is blocked. You can ask the user to contact support. The message property of FinapticError will give more information about the error.","title":"signIn"},{"location":"SDK-Guide/ios-sdk/#currentauthstate","text":"If the accessToken has expired, the client automatically uses the refreshToken and renews the credentials for you. Returns nil if the user is unauthenticated . sdk.authenticationClient.currentAuthState() { authState in print(\"Current auth state: \\(String(describing: authState))\") }","title":"currentAuthState"},{"location":"SDK-Guide/ios-sdk/#refreshauthstate","text":"Returns nil if the user is unauthenticated . sdk.authenticationClient.refreshAuthState() { result in switch result { case .success(let authState): print(\"Refreshed auth state: \\(String(describing: authState))\") case .failure(let error): print(\"Refresh auth state error: \\(error)\") } }","title":"refreshAuthState"},{"location":"SDK-Guide/ios-sdk/#signout","text":"sdk.authenticationClient.signOut() { error in if let error = error { print(\"Sign out error: \\(error)\") return } print(\"Signed out\") }","title":"signOut"},{"location":"SDK-Guide/ios-sdk/#resetpassword","text":"If the call is successful and the email is registered, the user receives a password reset email. let request = ResetRequest(email: \"sample@finaptic.com\") sdk.authenticationClient.resetPassword(request: request) { error in if let error = error { switch error.code { case .invalidArgument: print(\"Valid email is required.\") case .unknown: print(\"Check your internet connection and try again.\") default: print(\"Reset Password error: \\(error.msg)\") } return } print(\"Reset Password success\") }","title":"resetPassword"},{"location":"SDK-Guide/ios-sdk/#getuserinfo","text":"On success, getUserInfo will return AuthUserInfo . authenticationClient.getUserInfo { result in switch result { case .failure(let error): print(\"Get user info error: \\(error)\") case .success(let authUserInfo): print(\"Get user info success: \\(authUserInfo)) } }","title":"getUserInfo"},{"location":"SDK-Guide/ios-sdk/#authuserinfo","text":"username email isEmailVerified","title":"AuthUserInfo"},{"location":"SDK-Guide/ios-sdk/#corebankingclient","text":"","title":"CoreBankingClient"},{"location":"SDK-Guide/ios-sdk/#getaccountdetails","text":"let request = GetAccountDetailsRequest(accountId: accountId) sdk.coreBankingClient.getAccountDetails(request: request) { result in switch result { case .success(let response): print(response.status) print(response.accruedInterest) case .failure(let error): print(\"Get account details error: \\(error)\") } }","title":"getAccountDetails"},{"location":"SDK-Guide/ios-sdk/#authstate","text":"accessToken : Current access token. refreshToken : Current refresh token.","title":"AuthState"},{"location":"SDK-Guide/ios-sdk/#corecardclient","text":"","title":"CoreCardClient"},{"location":"SDK-Guide/ios-sdk/#getcard","text":"Retrieves generic details about a single Card . let request = GetCardRequest(cardId: cardId) sdk.coreCardClient.getCard(request: request) { result in switch result { case .success(let card): print(card.description) case .failure(let error): print(\"Get card error: \\(error)\") } }","title":"getCard"},{"location":"SDK-Guide/ios-sdk/#getcardrequest","text":"cardId : The ID of the Card to retrieve.","title":"GetCardRequest"},{"location":"SDK-Guide/ios-sdk/#listcards","text":"Lists all Cards associated to the current user. let request = ListCardsRequest( pageSize: 10, pageToken: nil ) sdk.coreCardClient.listCards(request: request) { result in switch result { case .success(let response): print(response.cards.count) print(response.nextPageToken) case .failure(let error): print(\"List cards error: \\(error)\") } }","title":"listCards"},{"location":"SDK-Guide/ios-sdk/#listcardsrequest","text":"pageSize : The maximum number of Cards to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListCardsResponse ). When no value is specified, then the initial page will be returned.","title":"ListCardsRequest"},{"location":"SDK-Guide/ios-sdk/#listcardsresponse","text":"cards : The list of Cards requested. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListCardsRequest ). When no value is returned in this field, then no further data exists to be listed.","title":"ListCardsResponse"},{"location":"SDK-Guide/ios-sdk/#revealcardinfo","text":"Reveals card information to the user. sdk.coreCardClient.revealCardInfo(parentVC: viewController, cardId: cardId) { result in switch result { case .success(): print(\"Reveal card info success\") case .failure(let error): print(\"Reveal card info error: \\(error)\") } } A user can reveal card info only if they have completed the step up authentication with a scope set to \"view:card_number\" . let request = SignInRequest(credential: credential, scope: \"view:card_number\") sdk.authenticationClient.signIn(request: request) { result in switch result { case .success(_): print(\"You may call revealCardInfo\") case .failure(let error): print(\"Sign in error: \\(error)\") } }","title":"revealCardInfo"},{"location":"SDK-Guide/ios-sdk/#createauthorizedusercard","text":"let card = AuthorizedUserCard(cardType: .cardTypePrepaid, accountId: accountId) let request = CreateAuthorizedUserCardRequest(card: card, authorizedUserId: authorizedUserId) self.sdk.coreCardClient.createAuthorizedUserCard(request: request) { result in switch result { case .success(let response): print(\"Create authorized user card success: \\(response.card)\") case .failure(let error): print(\"Create authorized user card error: \\(error)\") } }","title":"createAuthorizedUserCard"},{"location":"SDK-Guide/ios-sdk/#createauthorizedusercardrequest","text":"card : Refer to AuthorizedUserCard for details. authorizedUserId : The ID of the authorized user who will be the owner of the newly created card","title":"CreateAuthorizedUserCardRequest"},{"location":"SDK-Guide/ios-sdk/#createauthorizedusercardresponse","text":"card : Refer to Card for details. Possible error codes: FinapticErrorCode.cardsInvalidAccount : If the account passed as argument does not exist or is not owned by the current user. FinapticErrorCode.cardsInvalidAuthUser : If the user ID passed as argument does not exist or is not an authorized user of the account.","title":"CreateAuthorizedUserCardResponse"},{"location":"SDK-Guide/ios-sdk/#authorizedusercard","text":"cardType : The type of the Card. See CardType . accountId : The ID of the Account that will be linked to this Card. description : Optional description for this Card.","title":"AuthorizedUserCard"},{"location":"SDK-Guide/ios-sdk/#lockcard","text":"This feature allows customers to prevent transactions from getting authorized while they confirm if a card is effectively lost. After finding the card if it is the case, they can re-enable the card by using the unlock function, see unlockCard . let request = LockCardRequest(cardId: cardId) sdk.coreCardClient.lockCard(request: request) { result in switch result { case .success(let response): print(\"Lock card success. Card state is \\(response.card.state).\") case .failure(let error): print(\"Lock card error: \\(error)\") } }","title":"lockCard"},{"location":"SDK-Guide/ios-sdk/#lockcardrequest","text":"cardId : The ID of the card to be locked.","title":"LockCardRequest"},{"location":"SDK-Guide/ios-sdk/#lockcardresponse","text":"card : The card in its current status as result of the operation. See Card . Errors FinapticErrorCode.cardsInvalidCardId : If the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user.","title":"LockCardResponse"},{"location":"SDK-Guide/ios-sdk/#unlockcard","text":"This feature allows customers to re-enable transactions on the card if they find it after suspecting it lost. let request = UnlockCardRequest(cardId: cardId) sdk.coreCardClient.unlockCard(request: request) { result in switch result { case .success(let response): print(\"Unlock card success. Card state is \\(response.card.state).\") case .failure(let error): print(\"Unlock card error: \\(error)\") } }","title":"unlockCard"},{"location":"SDK-Guide/ios-sdk/#unlockcardrequest","text":"cardId : The ID of the locked card to be unlocked.","title":"UnlockCardRequest"},{"location":"SDK-Guide/ios-sdk/#unlockcardresponse","text":"card : The card in its current status as result of the operation. See Card . Errors FinapticErrorCode.cardsInvalidCardId : If the card ID passed as argument does not resolve to a valid card or the card is not owned by the current user or the underlying account is not owned by the current user.","title":"UnlockCardResponse"},{"location":"SDK-Guide/ios-sdk/#card","text":"id : The ID of this Card. cardType : The type of the Card. See CardType . accountId : The ID of the Account linked to this Card. description : The description for this Card. state : Describes the current state of the card. See CardState . ownerId : The user ID of the card owner.","title":"Card"},{"location":"SDK-Guide/ios-sdk/#cardtype-enum","text":"cardTypeUnspecified : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. cardTypePrepaid : Represents a Prepaid Card.","title":"CardType enum"},{"location":"SDK-Guide/ios-sdk/#cardstate-enum","text":"unspecified : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. active : Indicates that the card is ready to be used. locked : Indicates that the card is temporarily blocked for usage.","title":"CardState enum"},{"location":"SDK-Guide/ios-sdk/#helpcenter","text":"The help center adds the ability to connect a Finaptic Customer Service agent for L2+ escalations. We provide APIs to integrate existing customer service chat / threaded conversations into your client application. The expectation is that a new chat should be triggered by an L1 customer support agent, while customers should be able to resume existing threads to provide additional information or view responses from Finaptic. Start customer support chat List chat threads Get a chat thread's history","title":"HelpCenter"},{"location":"SDK-Guide/ios-sdk/#startchat","text":"Create StartChatRequest . displayName can be username. You can get it from AuthenticationClient's getUserInfo . subject provided by the customer when starting a new chat or from ChatThread . contactCaseId is used to resume a thread. Use nil to start a new one. let request = StartChatRequest(displayName: displayName, subject: subject, contactCaseId: nil) Calling startChat will try to connect and return ChatClient . sdk.helpCenter.startChat(request: request) { result in switch result { case .failure(let error): print(\"Start chat error: \\(error)\") case .success(let chatClient): print(\"Start chat success\") self.chatClient = chatClient } }","title":"startChat"},{"location":"SDK-Guide/ios-sdk/#listchatthreads","text":"Note: This method can be called after Customer is created . Create ListChatThreadsRequest . nextToken is provided by ListChatThreadsResponse and can be used to get next page. let request = ListChatThreadsRequest(nextToken: nil) On success, listChatThreads will return ListChatThreadsResponse . sdk.helpCenter.listChatThreads(request: request) { result in switch result { case .failure(let error): print(\"List chat threads failed: \\(error)\") case .success(let response): print(\"List chat threads success: \\(response.items.count)\") } }","title":"listChatThreads"},{"location":"SDK-Guide/ios-sdk/#listchatthreadsresponse","text":"nextToken can be used to fetch next page. items is an array of ChatThread","title":"ListChatThreadsResponse"},{"location":"SDK-Guide/ios-sdk/#chatthread","text":"id lastUpdated is a Date. status is ChatThreadStatus . subject provided by the customer when starting a new chat. createdAt is a Date. customerId","title":"ChatThread"},{"location":"SDK-Guide/ios-sdk/#chatthreadstatus-enum","text":"waitingForAgent waitingForCustomer when an agent has responded and needs more information from the customer. Waiting for customer should indicate there is an unread message. resolved","title":"ChatThreadStatus enum"},{"location":"SDK-Guide/ios-sdk/#listchathistory","text":"Note: This method can be called after Customer is created . Create ListChatHistoryRequest . contactId is the id of ChatThread . nextToken is provided by ListChatHistoryResponse and can be used to get next page. let request = ListChatHistoryRequest(contactId: contactId, nextToken: nil) On success, listChatHistory will return ListChatHistoryResponse . sdk.helpCenter.listChatHistory(request: request) { result in switch result { case .failure(let error): print(\"List chat history failed: \\(error)\") case .success(let response): print(\"List chat history success: \\(response.items.count)\") } }","title":"listChatHistory"},{"location":"SDK-Guide/ios-sdk/#listchathistoryresponse","text":"nextToken used to fetch next page. items is an array of ChatMessage","title":"ListChatHistoryResponse"},{"location":"SDK-Guide/ios-sdk/#chatclient","text":"","title":"ChatClient"},{"location":"SDK-Guide/ios-sdk/#sendmessage","text":"let request = SendMessageRequest(messageContent: \"Text message\") chatClient.sendMessage(request: request) { error in guard error == nil else { print(\"Send chat message failed: \\(error!)\") return } print(\"Chat message sent.\") }","title":"sendMessage"},{"location":"SDK-Guide/ios-sdk/#messages","text":"Message history in descending order. It's an array of ChatMessage .","title":"messages"},{"location":"SDK-Guide/ios-sdk/#receivemessage","text":"Subscribing to receiveMessage publisher will deliver sequence of ChatMessage over time. private var subscriptions = Set<AnyCancellable>() private func subscribeToMessages() { chatClient .receiveMessage() .sink { message in print(\"On new message: \\(String(describing: message))\") }.store(in: &subscriptions) }","title":"receiveMessage"},{"location":"SDK-Guide/ios-sdk/#receiveevent","text":"Subscribing to receiveEvent publisher will deliver sequence of ChatEvent over time. private var subscriptions = Set<AnyCancellable>() private func subscribeToEvents() { chatClient .receiveEvent() .sink { event in print(\"On new event: \\(String(describing: event))\") }.store(in: &subscriptions) }","title":"receiveEvent"},{"location":"SDK-Guide/ios-sdk/#connectionstatus","text":"Subscribing to connectionStatus publisher will deliver sequence of ChatConnectionStatus over time. private var subscriptions = Set<AnyCancellable>() private func subscribeToConnectionStatusChanges() { chatClient .connectionStatus() .sink { connectionStatus in print(\"Connection status changed: \\(connectionStatus)\") }.store(in: &subscriptions) } You can get the current status at any time by calling connectionStatus(). value . let connectionStatus = chatClient.connectionStatus().value","title":"connectionStatus"},{"location":"SDK-Guide/ios-sdk/#stopcontact","text":"Stops the chat, but threads are not deleted. They will show up in the help center listChatHistory API call after ~3 minutes. chatClient.stopContact { error in guard error == nil else { print(\"Stop contact error: \\(error!)\") return } print(\"Stop contract success\") }","title":"stopContact"},{"location":"SDK-Guide/ios-sdk/#chatconnectionstatus-enum","text":"connecting when ChatClient is connecting or reconnecing after connection loss. connected ended when stopContact is called or agent closes the case.","title":"ChatConnectionStatus enum"},{"location":"SDK-Guide/ios-sdk/#chatmessage","text":"id participantRole is ParticipantRole enum. displayName content is the text message. timestamp is a Date.","title":"ChatMessage"},{"location":"SDK-Guide/ios-sdk/#participantrole-enum","text":"customer systemMessage agent","title":"ParticipantRole enum"},{"location":"SDK-Guide/ios-sdk/#chatevent","text":"id type is ChatEventType enum. timestamp is a Date. displayName","title":"ChatEvent"},{"location":"SDK-Guide/ios-sdk/#chateventtype-enum","text":"joined when agent joined the chat. typing when agent is typing.","title":"ChatEventType enum"},{"location":"SDK-Guide/ios-sdk/#distributionclient","text":"Distribution client exposes operations for push notification.","title":"DistributionClient"},{"location":"SDK-Guide/ios-sdk/#registerchannel","text":"Registers a push notification channel for the specified device. let request = RegisterPushNotificationChannelRequest(deviceId: deviceId, registrationId: registrationId) sdk.distributionClient.registerChannel(request: request) { result in switch result { case .failure(let error): print(\"Register channel error: \\(errror)\") case .success(): print(\"Register channel success\") } } Errors - FinapticErrorCode.transInvalidTransaction : If a transaction ID is provided that is not found or resolves to an unauthorized account - FinapticErrorCode.internalError : If an unexpected error occurs while processing the request. The error will include a RefNumber which Finaptic can use to investigate the cause.","title":"registerChannel"},{"location":"SDK-Guide/ios-sdk/#registerpushnotificationchannelrequest","text":"deviceId for which to register the push notification channel. This can be a unique ID provided by the device vendor or an anonymous sandboxed ID that uniquely represents the device. registrationId for the respective device. This is the registration token generated by the application client. See Firebase documentation for more information .","title":"RegisterPushNotificationChannelRequest"},{"location":"SDK-Guide/ios-sdk/#transactioncreatedevent","text":"For each Transaction, a push notification will be sent with the following data. You can call getTransaction to get more details. { \"eventType\": \"TransactionCreatedEvent\", \"transactionId\": \"00c660a0-c03d-401d-bf77-99df3e6a157f\" \"amount\": \"12.30\", \"availableBalance\": \"120.00\", \"actualBalance\": \"100.00\", \"transactionTime\": \"2021-12-17 12:34:56.793213 +0000 UTC\", }","title":"TransactionCreatedEvent"},{"location":"SDK-Guide/ios-sdk/#interacclient","text":"InteracClient exposes methods used to register and list/retrieve Auto Deposit Registrations.","title":"InteracClient"},{"location":"SDK-Guide/ios-sdk/#createregistration","text":"Once a registration request is submitted, users will receive an email at the email address that they provided from Interac, which will ask them to confirm their auto-deposit registration. let registration = Registration(accountId: account.id, aliasEmail: \"test@finaptic.com\") let request = CreateRegistrationRequest(registration: registration) sdk.interacClient.createRegistration(request: request) { result in switch result { case .success(let response): print(\"Create autodeposit registration success with email \\(response.registration.aliasEmail)\") case .failure(let error): switch error.code { case .unavailable: print(\"Check your internet connection and try again\", error) case .deadlineExceeded: print(\"Operation couldn't complete in the default timeout. Try again.\", error) case .transInteracInvalidAccount: print(\"Invalid account\", error) case .transInteracAliasInUse: print(\"Autodeposit alias in use\", error) case .transInteracRegCountExceeded: print(\"Maximum number of account-alias registrations threshold exceeded\", error) case .transInteracInvMobNumber: print(\"Invalid mobile phone number\", error) case .transInteracInvMobAreacode: print(\"Invalid mobile phone area code\", error) default: print(\"Create autodeposit registration error: \\(error)\") } } } Possible error codes: transInteracInvalidAccount : Invalid account. transInteracAliasInUse : Autodeposit alias in use. transInteracRegCountExceeded : Maximum number of account-alias registrations threshold exceeded. transInteracInvMobNumber : Invalid mobile phone number. transInteracInvMobAreacode : Invalid mobile phone area code.","title":"createRegistration"},{"location":"SDK-Guide/ios-sdk/#createregistrationrequest","text":"registration : See Registration .","title":"CreateRegistrationRequest"},{"location":"SDK-Guide/ios-sdk/#createregistrationresponse","text":"registration : See Registration .","title":"CreateRegistrationResponse"},{"location":"SDK-Guide/ios-sdk/#registration","text":"registrationId : Output only. expiryDate : Output only. accountId : Provided for the account that the customer wishes auto-deposit transactions to be routed to. aliasEmail : Email for autodeposit registation. aliasPhoneNumber : Optional. See PhoneNumber .","title":"Registration"},{"location":"SDK-Guide/ios-sdk/#phonenumber","text":"phoneNumber : Valid phone number.","title":"PhoneNumber"},{"location":"SDK-Guide/ios-sdk/#listautodepositregistrations","text":"let request = ListAutodepositRegistrationsRequest(accountId: account.id) sdk.interacClient.listAutodepositRegistrations(request: request) { result in switch result { case .success(let response): response.registrations.forEach { print(\"Autodeposit registration for \\($0.aliasEmail)\") } case .failure(let error): print(\"List autodeposit registrations error: \\(error)\") } }","title":"listAutodepositRegistrations"},{"location":"SDK-Guide/ios-sdk/#listautodepositregistrationsrequest","text":"accountId : The Account ID for the Registrations that are to be listed.","title":"ListAutodepositRegistrationsRequest"},{"location":"SDK-Guide/ios-sdk/#listautodepositregistrationsresponse","text":"registrations : The requested list of Registrations .","title":"ListAutodepositRegistrationsResponse"},{"location":"SDK-Guide/ios-sdk/#updateregistration","text":"When updating the account alias registration, minimal changes are allowed, notably it is meant to change the target account linked to the alias. Notice that it is not possible to change the account alias handle itself (e.g. email/phone number). If more important changes are needed, the customer could always use the delete registration service and start a new account alias from scratch after that. let request = UpdateRegistrationRequest(registrationId: registrationId, accountId: accountId) sdk.interacClient.updateRegistration(request: request) { result in switch result { case .success(let response): print(\"Update autodeposit registration success: \\(response.registration)\") case .failure(let error): switch error.code { case .unavailable: print(\"Check your internet connection and try again\", error) case .deadlineExceeded: print(\"Operation couldn't complete in the default timeout. Try again.\", error) case .transInteracInvalidAccount: print(\"Invalid account\", error) case .unauthorized: print(\"Registration ID passed as argument is not owned by the current user.\", error) default: print(\"Update autodeposit registration error: \\(error)\") } } }","title":"updateRegistration"},{"location":"SDK-Guide/ios-sdk/#updateregistrationrequest","text":"Used to initiate the update of an existing Interac account alias registration. registrationId : The ID of the Registration to update. accountId : The ID of the Account.","title":"UpdateRegistrationRequest"},{"location":"SDK-Guide/ios-sdk/#updateregistrationresponse","text":"registration : See Registration . Errors: FinapticErrorCode.invalidArgument : if the account ID passed as argument is not owned or authorized for the current user. FinapticErrorCode.unauthorized : if the registration ID passed as argument is not owned by the current user. FinapticErrorCode.internal : if there is an unexpected error while processing the request.","title":"UpdateRegistrationResponse"},{"location":"SDK-Guide/ios-sdk/#deleteregistration","text":"Deleting an account alias registration will invalidate/inactivate the link between an account alias handle (email/phone) and an account, so that the account will no longer receive deposits automatically when sent using the given alias. At that moment, the customer is free to use the same alias handle to create a new registration pointing to the same or a different account. let request = DeleteRegistrationRequest(registrationId: registrationId) sdk.interacClient.deleteRegistration(request: request) { result in switch result { case .success(let response): print(\"Delete autodeposit registration success: \\(response.registration)\") case .failure(let error): switch error.code { case .unavailable: print(\"Check your internet connection and try again\", error) case .deadlineExceeded: print(\"Operation couldn't complete in the default timeout. Try again.\", error) case .unauthorized: print(\"Registration ID passed as argument is not owned by the current user.\", error) default: print(\"Delete autodeposit registration error: \\(error)\") } } }","title":"deleteRegistration"},{"location":"SDK-Guide/ios-sdk/#deleteregistrationrequest","text":"Used to initiate the deletion/deactivation of an existing Interac account alias registration. registrationId : The ID of the Registration to delete.","title":"DeleteRegistrationRequest"},{"location":"SDK-Guide/ios-sdk/#deleteregistrationresponse","text":"registration : See Registration . Errors: FinapticErrorCode.unauthorized : if the registration ID passed as argument is not owned by the current user. FinapticErrorCode.internal : if there is an unexpected error while processing the request.","title":"DeleteRegistrationResponse"},{"location":"SDK-Guide/ios-sdk/#authenticateincomingtransfer","text":"Used to authenticate an inbound Interac transfer. You can get the security question by calling getIncomingTransferDetails . Different errors can arise when authenticating an incoming transfer. For details see incoming transfer error codes . let request = AuthenticateIncomingTransferRequest(interacPaymentNumber: interacPaymentNumber, securityAnswer: \"Security answer\") sdk.interacClient.authenticateIncomingTransfer(request: request) { result in switch result { case .failure(let error): print(\"Authenticate incoming transfer error: \\(error)\") case .success(let response): print(\"Authenticate incoming transfer success: \\(response)\") } }","title":"authenticateIncomingTransfer"},{"location":"SDK-Guide/ios-sdk/#authenticateincomingtransferrequest","text":"interacPaymentNumber : The payment number, as provided by Interac, which this request authenticates. securityAnswer : The answer to the security question as provided by the customer.","title":"AuthenticateIncomingTransferRequest"},{"location":"SDK-Guide/ios-sdk/#authenticateincomingtransferresponse","text":"interacPaymentNumber : The payment number. success : Indicates if the provided response was correct. retryAllowed : In case of an incorrect response (success=false), indicates if the user can try again providing a new answer.","title":"AuthenticateIncomingTransferResponse"},{"location":"SDK-Guide/ios-sdk/#completeincomingtransfer","text":"Used to complete the deposit of an inbound Interac transfer. Different errors can arise when completing an incoming transfer. For details see incoming transfer error codes . let request = CompleteIncomingTransferRequest( interacPaymentNumber: interacPaymentNumber, targetAccountId: accountId, recipientMemo: \"Optional recipient memo\") self?.sdk.interacClient.completeIncomingTransfer(request: request) { result in switch result { case .failure(let error): print(\"Complete incoming transfer error: \\(error)\") case .success(let response): print(\"Complete incoming transfer success: \\(response)\") } }","title":"completeIncomingTransfer"},{"location":"SDK-Guide/ios-sdk/#completeincomingtransferrequest","text":"interacPaymentNumber : The payment number, as provided by Interac, for which the deposit is being completed. targetAccountId : Represents the target account ID. Current customer needs to be the owner or authorized user of the target account. Target account must be a deposit account. recipientMemo : An optional memo provided by the recipient. This memo will be sent to the sender.","title":"CompleteIncomingTransferRequest"},{"location":"SDK-Guide/ios-sdk/#completeincomingtransferresponse","text":"interacPaymentNumber : The payment number. transactionId : Represents this single financial transaction (operation). lifecycleTransactionId : Represents the overarching transaction, across all phases of its lifecycle.","title":"CompleteIncomingTransferResponse"},{"location":"SDK-Guide/ios-sdk/#declineincomingtransfer","text":"Used to complete the deposit of an inbound Interac transfer. Different errors can arise when declining an incoming transfer. For details see incoming transfer error codes . let request = DeclineIncomingTransferRequest(interacPaymentNumber: interacPaymentNumber, recipientMemo: \"Optional recipient memo\") self?.sdk.interacClient.declineIncomingTransfer(request: request) { result in switch result { case .failure(let error): print(\"Decline incoming transfer error: \\(error)\") case .success(let response): print(\"Decline incoming transfer success: \\(response)\") } }","title":"declineIncomingTransfer"},{"location":"SDK-Guide/ios-sdk/#declineincomingtransferrequest","text":"interacPaymentNumber : The payment number, as provided by Interac, for which the transfer is being declined. recipientMemo : An optional memo provided by the recipient. This memo will be sent to the sender.","title":"DeclineIncomingTransferRequest"},{"location":"SDK-Guide/ios-sdk/#declineincomingtransferresponse","text":"interacPaymentNumber : The payment number.","title":"DeclineIncomingTransferResponse"},{"location":"SDK-Guide/ios-sdk/#incoming-transfer-error-codes","text":"FinapticErrorCode.transInteracInvalidTransfer : Transfer does not exist FinapticErrorCode.transInteracAlreadyCancelled : Returned when attempting to authenticate a transfer that has already been canceled. FinapticErrorCode.transInteracAlreadyAccepted : Returned when attempting to authenticate a transfer that has already been accepted. FinapticErrorCode.transInteracPreviousTransferInProgress : Returned when there already exists a transfer between sender and recipient that has not been completed or canceled. FinapticErrorCode.transInteracInconsistentCustomer : Returned when performing any operation a transfer has been authenticated by different customer ID. FinapticErrorCode.transInteracTransferLimitsExceeded : Rolling or per-transaction limits exceeded . FinapticErrorCode.transInteracAuthenticationRequired : Returned when attempting to complete an incoming Q&A transfer whose authentication step has not yet been completed successfully. E.g. the user has not provided the correct answer to the security question.","title":"Incoming Transfer Error Codes"},{"location":"SDK-Guide/ios-sdk/#coretransactionclient","text":"","title":"CoreTransactionClient"},{"location":"SDK-Guide/ios-sdk/#listaccounts","text":"Lists all accounts on which the current user is the owner, or an authorized user. Uses pagination to allow listing accounts in smaller, easy to manage, chunks. let request = ListAccountsRequest(pageSize: 2, pageToken: nil) sdk.coreTransactionClient.listAccounts(request: request) { result in switch result { case .success(let response): print(\"Accounts: \\(response.accounts.count)\") case .failure(let error): print(\"List accounts error: \\(error)\") } }","title":"listAccounts"},{"location":"SDK-Guide/ios-sdk/#listaccountsrequest","text":"pageSize : The maximum number of Accounts to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving a page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListAccountsResponse ). When no value is specified, then the initial page will be returned.","title":"ListAccountsRequest"},{"location":"SDK-Guide/ios-sdk/#listaccountsresponse","text":"accounts : The requested list of Accounts. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListAccountsRequest ). When no value is returned in this field, then no further data exists to be listed.","title":"ListAccountsResponse"},{"location":"SDK-Guide/ios-sdk/#getaccount","text":"let request = GetAccountRequest(accountId: accountId) sdk.coreTransactionClient.getAccount(request: request) { result in switch result { case .success(let account): print(\"Get account success: \\(account)\") case .failure(let error): print(\"Get account error: \\(error)\") } }","title":"getAccount"},{"location":"SDK-Guide/ios-sdk/#getaccountrequest","text":"accountId : The ID of the Account to retrieve.","title":"GetAccountRequest"},{"location":"SDK-Guide/ios-sdk/#listauthorizedusers","text":"Lists all authorized users of an account. let request = ListAuthorizedUsersRequest(accountId: accountId) sdk.coreTransactionClient.listAuthorizedUsers(request: request) { result in switch result { case .success(let response): print(\"List authorized users success\") for authorizedUserId in response.authorizedUsers { print(\"Authorized user with id \\(authorizedUserId)\") } case .failure(let error): print(\"List authorized users error: \\(error)\") } }","title":"listAuthorizedUsers"},{"location":"SDK-Guide/ios-sdk/#listauthorizedusersrequest","text":"accountId : The ID of the Account for which the authorized users are to be listed.","title":"ListAuthorizedUsersRequest"},{"location":"SDK-Guide/ios-sdk/#listauthorizedusersresponse","text":"authorizedUsers : The requested list of authorized users ids.","title":"ListAuthorizedUsersResponse"},{"location":"SDK-Guide/ios-sdk/#listowners","text":"Lists all owners of an account if the caller as the access rights. let request = ListOwnersRequest(accountId: accountId) sdk.coreTransactionClient.listOwners(request: request) { result in switch result { case .success(let response): print(\"List owners success\") for ownerId in response.owners { print(\"Owner with id \\(ownerId)\") } case .failure(let error): print(\"List owners error: \\(error)\") } }","title":"listOwners"},{"location":"SDK-Guide/ios-sdk/#listtransactions","text":"Lists Transactions associated to the Account specified using pagination. Transactions are sorted in descending order of Transaction time. let request = ListTransactionsRequest(accountId: accountId, pageSize: 2) sdk.coreTransactionClient.listTransactions(request: request) { result in switch result { case .success(let response): print(\"List transactions success\") for transaction in response.transactions { print(\"Transaction with id \\(transaction.transactionId)\") } case .failure(let error): print(\"List transactions error: \\(error)\") } }","title":"listTransactions"},{"location":"SDK-Guide/ios-sdk/#listtransactionsrequest","text":"accountId : The ID of the Account to list Transactions for. from : The UTC timestamp from which to list Transactions. to : The UTC timestamp until which to list Transactions. pageSize : The maximum number of Transactions to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListTransactionsResponse ). When no value is specified, then the initial page will be returned.","title":"ListTransactionsRequest"},{"location":"SDK-Guide/ios-sdk/#listtransactionsresponse","text":"transactions : The requested list of Transactions. nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see ListTransactionsRequest ). When no value is returned in this field, then no further data exists to be listed.","title":"ListTransactionsResponse"},{"location":"SDK-Guide/ios-sdk/#coretransferclient","text":"Exposes endpoints related to the retrieval of transfers data.","title":"CoreTransferClient"},{"location":"SDK-Guide/ios-sdk/#gettransferdetails","text":"Returns the latest state of a transfer by a given transaction ID. See TransferTransactionDetails for more details. let request = GetTransferDetailsRequest(transactionId: transaction.transactionId) sdk.coreTransferClient.getTransferDetails(request: request) { result in switch result { case .failure(let error): print(\"Get TransferTransactionDetails error: \\(error)\") case .success(let transferTransactionDetails): print(\"Get TransferTransactionDetails success: \\(transferTransactionDetails)\") } }","title":"getTransferDetails"},{"location":"SDK-Guide/ios-sdk/#gettransferdetailsrequest","text":"transactionId : The ID of the transaction to get details for.","title":"GetTransferDetailsRequest"},{"location":"SDK-Guide/ios-sdk/#listtargetaccounts","text":"Retrieves all accounts that can be used as recipient of funds for the intended type of transfer the current user wants to initiate/authorize. It is expected that after listing target accounts, one of the account IDs returned would be used by the customer for incoming transfer operations like creation of an Interac auto-deposit registration, depositing an incoming transfer or moving money between accounts. let request = ListTargetAccountsRequest( transferType: .internalAccountToAccount, pageSize: 10) self.sdk.coreTransferClient.listTargetAccounts(request: request) { result in switch result { case .success(let response): print(\"List Target Accounts success: \\(response)\") case .failure(let error): print(\"List Target Accounts error: \\(error)\") } }","title":"listTargetAccounts"},{"location":"SDK-Guide/ios-sdk/#listtargetaccountsrequest","text":"transferType : The type of the transfer the customer wants to initiate/authorize. See TransferType . pageSize : The maximum number of Accounts to retrieve as part of this request. This value needs to be superior, or equal to 1. pageToken : When retrieving a page other than the initial page, the value for the pageToken must be specified, and taken from the previous page's nextPageToken value (see ListTargetAccountsResponse ). When no value is specified, then the initial page will be returned.","title":"ListTargetAccountsRequest"},{"location":"SDK-Guide/ios-sdk/#listtargetaccountsresponse","text":"accounts : The resulting list of Account identifiers for selection. See AccountIdentification . nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the page_token field of the next request (see ListTargetAccountsRequest ). When no value is returned in this field, then no further data exists to be listed.","title":"ListTargetAccountsResponse"},{"location":"SDK-Guide/ios-sdk/#accountidentification","text":"Used to identify which accounts can be presented to the consumer for certain selections, e.g. for selection lists while trying to perform/authorize transfers. id : The unique ID of the Account as created by its source domain. sourceDomain : The source domain which created the Account (eg: core-banking).","title":"AccountIdentification"},{"location":"SDK-Guide/ios-sdk/#initiatetransfer","text":"Create a transfer fund request between accounts owned by current customer. let amount = Amount(amount: Decimal(string: \"0.01\")!, currency: \"CAD\") let request = InitiateTransferRequest(sourceAccountId: sourceAccount.id, destinationAccountId: destinationAccount.id, fundTransfer: amount) sdk.coreTransferClient.initiateTransfer(request: request) { result in switch result { case .failure(let error): print(\"Initiate transfer error: \\(error)\") case .success(let response): guard response.reason.isEmpty else { print(\"Initiate transfer failed with reason: \\(response.reason)\") return } let transfer = response.details print(\"Initiate transfer success: \\(transfer)\") } }","title":"initiateTransfer"},{"location":"SDK-Guide/ios-sdk/#initiatetransferrequest","text":"sourceAccountId : Represents the source account ID. Current customer needs to be owner or authorized user of the source account. Source account needs to have sufficient available balance and actual balance to be able to initiate the transfer. destinationAccountId : Represents the destination account ID. Current customer needs to be owner or authorized user of the destination account. fundTransfer : The amount of the fund transfer. The amount should be always positive.","title":"InitiateTransferRequest"},{"location":"SDK-Guide/ios-sdk/#initiatetransferresponse","text":"details : Details of the transaction with its status (whether the transaction is TransferStatus.completed or TransferStatus.declined ). See TransferTransactionDetails for more details. reason : Empty when status is TransferStatus.completed . Reason why transfer is declined.","title":"InitiateTransferResponse"},{"location":"SDK-Guide/ios-sdk/#transfertransactiondetails","text":"transactionId : Represents this single financial transaction (operation). lifecycleTransactionId : Represents the overarching transaction, across all phases of its lifecycle (e.g. authorization, settlement, reversal, ...). status : Status of the transfer. See TransferStatus enumeration for details on possible statuses. customerRole : The role played by our customer in this transaction. See CustomerRole for details on possible roles. transferType : The type of transfer for this transaction. See TransferType for details on possible types. counterparty : When transferType is interacAutodeposit , this will contain the details about the person/entity on the other side of this transfer. When transferType is internalAccountToAccount , this will contain the details of the owner of the destination account. clearingSystemRefNumber : Unique identifier assigned to the transaction by the external payment/transfer clearing system. remittance : Includes remittance data from this transfer if it contains any.","title":"TransferTransactionDetails"},{"location":"SDK-Guide/ios-sdk/#transferstatus-enum","text":"unspecified : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. declined : Indicates that the transfer has been declined and rollback has been performed. When transferType is internalAccountToAccount , this could be due to insufficient funds to initiate the transfer. completed : Indicates that the transfer has been successfully completed. pending : Indicates that the transfer is in an intermediate stage before completion.","title":"TransferStatus enum"},{"location":"SDK-Guide/ios-sdk/#customerrole-enum","text":"unspecified : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. recipient : Indicates that the customer is the recipient of the transfer operation. initiator : Indicates that the customer is the initiator of the transfer operation.","title":"CustomerRole enum"},{"location":"SDK-Guide/ios-sdk/#transfertype-enum","text":"unspecified : It is returned when a value has not been specified, and is present by convention, for error-detection purposes. internalAccountToAccount : Indicates that the transfer was an Account to Account transfer that did not transit through external systems ( stayed within the institution ). interacAutodeposit : Indicates that the transfer came through Interac systems, and used the Interac Autodeposit mechanism. interacRegularPayment : Indicates that the transfer came through Interac systems, and used the Interac Q&A mechanism.","title":"TransferType enum"},{"location":"SDK-Guide/ios-sdk/#structured-and-unstructured-remittance-data","text":"Remittance includes additional information provided by the sender giving context for a transfer for instance, a transfer may be sent to a business by one of its clients in order to pay for a bill, the remittance data will include a reference to that bill payment. Remittance data could be unstructured or structured or both.","title":"Structured and Unstructured Remittance Data"},{"location":"SDK-Guide/ios-sdk/#unstructured","text":"The unstructured remittance data can be used for free-form text such as in a memo field. User Interface and Data Mapping Example: Label Data element Notes data","title":"Unstructured"},{"location":"SDK-Guide/ios-sdk/#structured","text":"Structured remittance data can be sent in up to 5 blocks for each transaction, with each block representing a document, such as a purchase order. The structured remittance data is organized into the following groupings of information: Referred Document Information : Information about the 'invoice'. Not necessarily an invoice, but some document that outlines the context and reason for the payment. Referred Document Amount : The amount being paid in the current transfer. Creditor Reference Information : Additional reference info provided by the creditor. Invoicer : Contains information about the payee, such as contact information. Invoicee : Contains information about the payor, such as contact information. Additional remittance information : A free form text field for additional remittance information.","title":"Structured"},{"location":"SDK-Guide/ios-sdk/#user-interface-and-data-mapping-examples","text":"","title":"User Interface and Data Mapping Examples:"},{"location":"SDK-Guide/ios-sdk/#payor-details","text":"invoicee contains information about the payor. Label Data element Name invoicee.name Address Address Type invoicee.postalAddress.addressType. code Department invoicee.postalAddress.department Sub-department invoicee.postalAddress.subDepartment Street invoicee.postalAddress.streetName Street Number invoicee.postalAddress.buildingNumber Postal Code invoicee.postalAddress.postCode City invoicee.postalAddress.townName Province invoicee.postalAddress.countrySubDivision Country invoicee.postalAddress.country Address invoicee.postalAddress.addressLine Identification Payor ID invoicee.identification.organisationIdentification.other[n].identification ID type invoicee.identification.organisationIdentification.other[n].schemeName. code Contact Details Name invoicee.contactDetails. name Phone invoicee.contactDetails.phoneNumber Mobile invoicee.contactDetails.mobileNumber Fax invoicee.contactDetails.faxNumber Email Address invoicee.contactDetails.emailAddress","title":"Payor Details"},{"location":"SDK-Guide/ios-sdk/#payee-details","text":"invoicer contains information about the payee. Label Data element Name invoicer.name Address Address Type invoicer.postalAddress.addressType. code Department invoicer.postalAddress.department Sub-department invoicer.postalAddress.subDepartment Street invoicer.postalAddress.streetName Street Number invoicer.postalAddress.buildingNumber Postal Code invoicer.postalAddress.postCode City invoicer.postalAddress.townName Province invoicer.postalAddress.countrySubDivision Country invoicer.postalAddress.country Address invoicer.postalAddress.addressLine Identification Payee ID invoicer.identification.organisationIdentification.other[n]. identification ID type invoicer.identification.organisationIdentification.other[n].schemeName. code Contact Details Name invoicer.contactDetails. name Phone invoicer.contactDetails. phoneNumber Mobile invoicer.contactDetails. mobileNumber Fax invoicer.contactDetails. faxNumber Email Address invoicer.contactDetails. emailAddress","title":"Payee Details"},{"location":"SDK-Guide/ios-sdk/#document-information","text":"Label Data element Document Type referredDocumentInformation[n].type.codeOrProprietary. code Purchase Order Number referredDocumentInformation[n].number Issue Date referredDocumentInformation[n].relatedDate Total Amount Due referredDocumentAmount.duePayableAmount.amount referredDocumentAmount.duePayableAmount.currency Discount Amount (if creditDebitIndicator=DBIT) referredDocumentAmount.adjustmentAmountAndReason[n].amount.amount referredDocumentAmount.adjustmentAmountAndReason[n].amount.currency Credit Amount (if creditDebitIndicator=CRDT) referredDocumentAmount.adjustmentAmountAndReason[n].amount.amount referredDocumentAmount.adjustmentAmountAndReason[n].amount.currency Reason for Adjustment referredDocumentAmount.adjustmentAmountAndReason[n].reason Additional Adjustment Information referredDocumentAmount.adjustmentAmountAndReason[n].additionalInformation Amount to be Paid referredDocumentAmount.remittedAmount.amount referredDocumentAmount.remittedAmount.currency Creditor Reference Type creditorReferenceInformation.type.codeOrProprietary. code Creditor Reference creditorReferenceInformation.reference","title":"Document information"},{"location":"SDK-Guide/ios-sdk/#additional-remittance-information","text":"Label Data element Additional Details additionalRemittanceInformation[n]","title":"Additional remittance information"},{"location":"SDK-Guide/ios-sdk/#addresstype2code-enum","text":"ADDR : Postal Address PBOX : POBox Address HOME : Residential Address BIZZ : Busines s Address MLTO : MailTo Address DLVY : Delivery To Address","title":"AddressType2Code enum"},{"location":"SDK-Guide/ios-sdk/#externalorganisationidentification1code-enum","text":"BANK : Bank ID CBID : Central Bank ID CHID : Clearing House ID CINC : Corporation COID : Country Code CUST : Customer ID DUNS : DUNS Number EMPL : Employer ID GS1G : Global Location Number SREN : SIREN code SRET : SIRET code TXID : Tax ID","title":"ExternalOrganisationIdentification1Code enum"},{"location":"SDK-Guide/ios-sdk/#documenttype6code-enum","text":"MSIN : Metered Service Invoice CNFA : Credit Note Related To Financial Adjustment DNFA : Debit Note Related To Financial Adjustment CINV : Commercial Invoice CREN : Credit Note DEBN : Debit Note HIRI : Hire Invoice SBIN : Self Billed Invoice CMCN : Commercial Contract SOAC : Statement Of Account DISP : Dispatch Advice BOLD : Bill Of Lading VCHR : Voucher AROI : Account Receivable Open Item TSUT : Trade Services Utility Trans action PUOR : Purchase Order","title":"DocumentType6Code enum"},{"location":"SDK-Guide/ios-sdk/#documenttype3code-enum","text":"RADM : Remittance Advice Message RPIN : Related Payment Instructions FXDR : Foreign Exchange Deal Reference DISP : Dispatch Advice PUOR : Purchase Order SCOR : Structured Communication Reference","title":"DocumentType3Code enum"},{"location":"SDK-Guide/ios-sdk/#getincomingtransferdetails","text":"Retrieves the details and state of an incoming Interac Q&A transfer. let request = GetIncomingTransferDetailsRequest(interacPaymentNumber: interacPaymentNumber) sdk.coreTransferClient.getIncomingTransferDetails(request: request) { result in switch result { case .failure(let error): print(\"Get incoming transfer details error: \\(error)\") case .success(let response): print(\"Get incoming transfer details success: \\(response)\") } }","title":"getIncomingTransferDetails"},{"location":"SDK-Guide/ios-sdk/#getincomingtransferdetailsrequest","text":"interacPaymentNumber : The payment id, as provided by custom url scheme. You need to register custom URL scheme that Finaptic will provide(e.g. finaptic://interac/deposit?lang=en&paymentid=000000000). You can find more information here .","title":"GetIncomingTransferDetailsRequest"},{"location":"SDK-Guide/ios-sdk/#getincomingtransferdetailsresponse","text":"transferDetails : Contains details about a given inbound Interac transfer. See IncomingTransferDetails . Errors: An error with error code FinapticErrorCode.transInteracInvalidTransfer msg: \"payment number is invalid\" will be generated in the following scenarios: calls made with a non-existent interacPaymentNumber An error with error code FinapticErrorCode.transInteracInconsistentCustomer msg: \"Transfer was previously authenticated with a different customer ID\" will be generated when: calls made with a different customer than was previously authenticated","title":"GetIncomingTransferDetailsResponse"},{"location":"SDK-Guide/ios-sdk/#incomingtransferdetails","text":"interacPaymentNumber : The payment number, as provided by Interac, which the details of the transfer will be returned for. transferStatus : The current status of the transfer. See IncomingTransferStatus . transferAmount : The amount of the transfer. expiryDate : The timestamp when this transfer will expire. initiatorName : The name of who initiated the transfer. authenticationRequired : Indicates if this transfer requires that the recipient provide a security answer before depositing the transfer into the account. securityQuestion : If authenticationRequired is true, the field contains the security question that the user must provide the answer to in order to deposit the transfer. senderMemo : An optional memo provided by the sender.","title":"IncomingTransferDetails"},{"location":"SDK-Guide/ios-sdk/#incomingtransferstatus-enum","text":"unspecified : Reserved for error detection purposes. It should not be used directly. available : Represents that a transfer has not been processed and is in a valid state to be authorized. authorized : Represents that a transfer has been authorized and is in a valid state to be accepted or declined. accepted : Represents that a transfer has been accepted. The transfer is complete and deposited into the target account. canceled : Represents that a transfer is complete and not deposited to an account. Ways to achieve this state are: if the transfer is canceled by the sender, if the receiver declines the transfer, the transfer has expired, the receiver is unable to authenticate the transfer within the allotted attempts.","title":"IncomingTransferStatus enum"},{"location":"SDK-Guide/ios-sdk/#personal-finance-management","text":"","title":"Personal Finance Management"},{"location":"SDK-Guide/ios-sdk/#gettransactions","text":"Lists transactions for a given Account with pagination. let request = GetTransactionsRequest(accountId: accountId, pageSize: 10, sortOrder: .descending) sdk.personalFinanceManagementClient.getTransactions(request: request) { result in switch result { case .success(let response): print(\"Get transactions success\") for transaction in response.transactions { print(\"Transaction with id \\(transaction.transactionId)\") } case .failure(let error): print(\"Get transactions error: \\(error)\") } }","title":"getTransactions"},{"location":"SDK-Guide/ios-sdk/#gettransactionsrequest","text":"accountId : The Account ID for which Transactions are returned. pageSize : The maximum number of Transactions to return. This value must be greater or equal to one. pageToken : When retrieving page other than the initial page, the value for the page_token must be specified, and taken from the previous page's nextPageToken value (see GetTransactionsResponse ). When no value is specified, then the initial page will be returned. sortOrder : The order the returned Transactions are sorted in. Transactions are sorted by the Transaction's transactionTime field. See TransactionOrder .","title":"GetTransactionsRequest"},{"location":"SDK-Guide/ios-sdk/#gettransactionsresponse","text":"previousPageToken : The token to be used to retrieve the previous page of data. Must be passed in the pageToken field of the next request (see GetTransactionsRequest ). When no value is returned in this field, then there is no previous data to be listed. transactions : The requested list of Transactions . nextPageToken : The token to be used to retrieve the next page of data. Must be passed in the pageToken field of the next request (see GetTransactionsRequest ). When no value is returned in this field, then no further data exists to be listed. sortOrder : The order the Transactions are listed in. See TransactionOrder .","title":"GetTransactionsResponse"},{"location":"SDK-Guide/ios-sdk/#gettransaction","text":"let request = GetTransactionRequest(transactionId: transactionId) sdk.personalFinanceManagementClient.getTransaction(request: request) { result in switch result { case .success(let response): print(\"Get transaction success: \\(response.transaction.transactionId)\") case .failure(let error): print(\"Get transaction error: \\(error)\") } }","title":"getTransaction"},{"location":"SDK-Guide/ios-sdk/#gettransactionrequest","text":"transactionId : Transaction id.","title":"GetTransactionRequest"},{"location":"SDK-Guide/ios-sdk/#gettransactionresponse","text":"","title":"GetTransactionResponse"},{"location":"SDK-Guide/ios-sdk/#-transaction-see-transactions","text":"","title":"- transaction: See Transactions."},{"location":"SDK-Guide/ios-sdk/#transactionorder-enum","text":"orderUnspecified : Should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. Trying to make a request with this type will result in an error. descending : Represents newest first. ascending : Represents oldest first.","title":"TransactionOrder enum"},{"location":"SDK-Guide/ios-sdk/#transaction","text":"transactionId : Unique identifier that represents this single financial transaction. lifecycleTransactionId : Unique identifier that represents the overarching transaction, across all phases of its lifecycle. amount : The Amount of the Transaction. transactorName : The name and location of the vendor where the payment was processed. balance : The resulting Balance of the Account after the Transaction has occurred. transactionState : TransactionState enumeration represents the state of a Transaction. See TransactionState . transactionType : The TransactionType of the Transaction. See TransactionType . accountId : ID of the Account on which the Transaction was authorised. This can also be utilised to fetch the Account. category : A localized descriptor of the transaction's category (i.e. Groceries, Transport, etc.). transactionTime : The UTC timestamp when the Transaction occurred. accountDomain : The name of the domain that can be queried for additional details regarding the Account of this transaction. initiatingDomain : The name of the domain that can be queried for additional details regarding this Transaction.","title":"Transaction"},{"location":"SDK-Guide/ios-sdk/#transactionstate-enum","text":"transactionStateUnspecified : Reserved for error detection purposes. It should not be used directly. posted : Represents a transaction that has been completed. pending : Represents a transaction in an intermediate state, dependent on the transaction type. unknown : Represents a transaction type where available information is insufficient to determine TransactionState.","title":"TransactionState enum"},{"location":"SDK-Guide/ios-sdk/#transactiontype-enum","text":"transactionTypeUnspecified : Reserved for error detection purposes. It should not be used directly. authorized : Represents a transaction type that is a purchase for which the merchant has received approval from the bank. An authorized transaction will always have state pending . debit : Represents a transaction type when there is an addition to the amount in the customer's account. refund : Represents a transaction type when businesses and merchants issue a reversal of the transaction that had previously occurred (e.g. a previously credited transaction will be debited back into the customers account). chargeback : Represents a transaction type that is returned to a payment card after a customer successfully disputes an item on their account statement or transactions report. A chargeback may occur on debit cards (and the underlying bank account) or on credit cards. credit : Represents a transaction type when there is a deduction to the amount in the customer's account. productNotDefined : Represents a transaction state where available information is insufficient to determine TransactionType.","title":"TransactionType enum"},{"location":"SDK-Guide/ios-sdk/#errors","text":"Most callable methods from the SDK potentially can fail with a FinapticError, which contains \"code\", \"message\" and \"cause\" attributes. sdk.onboardingClient.initiateApplication(request: request) { result in switch result { case .success(let response): ... case .failure(let error): switch error.code { case .unavailable: print(\"Check your internet connection and try again\") case .deadlineExceeded: print(\"Operation couldn't complete in the default timeout. Try again.\") default: print(\"Initiate application error: \\(error)\") } } }","title":"Errors"},{"location":"Systems-and-Security/","text":"Systems and Security Requirements \u00b6 This section contains system and information security requirements.","title":"Systems and Security Requirements"},{"location":"Systems-and-Security/#systems-and-security-requirements","text":"This section contains system and information security requirements.","title":"Systems and Security Requirements"},{"location":"Systems-and-Security/partner_app_accreditation/","text":"Partner Application Accreditation Process and App Security Checklist \u00b6 Summary \u00b6 Partners that leverage our SDK or APIs in their own applications must build those applications securely. While Finaptic handles security of the APIs themselves, the client application must be designed securely, and the implementation of it must be tested. This document describes the steps in the accredidation process. Process Overview \u00b6 Step Accreditation Step Timeline 1 Finaptic and Partner to review that SDLC (Software Development Life Cycle) process must be confirmed to meet the requirements described in this document. Action items for review will be reviewed again later. Kickoff week 2 Partner must document all external dependencies (software/libraries and vendors) and their purpose, and communicate the list to Finaptic as early as possible. Kickoff + 1 month 3 Partner must ensure the application has the required controls, listed in this document, implemented. Before security testing 4 Partner must provide source code of application to Finaptic for code review purposes Before penetration testing 5 A third party must perform a \"penetration test\" of the application before go-live. Finaptic will review the scope as well as the results Go Live - One Month 6 Functional testing results are reviewed by Finaptic Go Live - One Week 7 Findings deemed critical in the testing must be fixed before go-live. Before go-live Step 1: Software Development Lifecycle (SDLC) \u00b6 We must ensure that all partners making custom applications (web or mobile) using Finaptic SDKs and APIs, have a sufficient level of security maturity when it comes to the SDLC. This part can be reviewed early in the partner relationship, to identify potential issues and have time to perform the necessary improvements as soon as possible. SDLC Requirements Checklist \u00b6 Requirement Done Partner must use a source version control system, such as GitHub. Authentication to this system, if done over the Internet, must require Multi-Factor Authentication (MFA). Code reviews must be enforced on all code. A single person must be unable to write code that will end up in production builds without being reviewed by someone else. A vulnerability management process must be in place, ensuring all components of the application are patched/fixed in a timely manner. The application must be reviewed/tested for security by a third party at least once a year and after significant changes. Testing can be of the penetration testing kind, code audits, or anywhere in between, with the entire mobile application in scope. Recommendations \u00b6 Code should be signed with a PGP key unique to the developer committing it. Static Application Security Testing (SAST) should be in place to scan code for common security vulnerabilities. The application should implement jailbreak/rooting detection and not be usable on devices detected as potentially compromised. Step 2: Document External Dependencies \u00b6 External dependencies (libraries or services) have an important impact on the security of a mobile or web application. Those dependencies must be inventoried, as well as their purpose. For external dependencies specifically, please document what information is shared with the third parties as well. Once it is sent to Finaptic, the Finaptic security team will review it and see if it is necessary to discuss any of the dependencies further. Requirement Done Inventory code dependencies (third party libraries, etc) Inventory external dependencies (third party services, etc) Communicate inventories to Finaptic Step 3: Application Security Controls \u00b6 The current mobile app requirements and recommendations are valid for both iOS and Android, though the suggested implementations are only documented for iOS so far. Requirements Checklist - Mobile application with Finaptic SDK \u00b6 Requirement Done Communication from the app must be done over encrypted protocols only. While Finaptic APIs are only accessible over HTTPS, other destinations being used over HTTP would put the integrity of communications at risk and could allow someone to exploit flaws in the application itself. If exceptions are needed, they must be documented, communicated to Finaptic and use NSexceptionDomains on iOS. Certificate authority pinning must be done to prevent breaking TLS communications. While pinning the certificates used by Finaptic is the safest, pinning the certificate authority, and allowing rotation in the future, is very secure and much easier to manage. Ensure that only strong TLS ciphers can be used in the application, by explicitly enabling NSExceptionRequiresForwardSecrecy and NSRequiresCertificateTransparency at least towards Finaptic APIs and authentication provider. The Finaptic SDK must be use as a library within partner application If \"long sessions\" are provided, so the user does not have to enter credentials when opening the application, those sessions must be protected by biometrics. For iOS, this means ensuring kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly is configured (a device without a passcode can't have biometric), and this ensures this credential won't be usable through keychain syncing. kSecAccessControlBiometryAny must also be configured for keychain stored credentials. Sessions not protected by biometrics should not last for more than 15 minutes of inactivity, and a Log Out button should be available to the end-user. Sensitive data fields (passwords, PII entry) must be tagged in order to avoid 3rd party keyboards being usable on them. The OS features to integrate screenshots of running applications in the application switchers must replace the screenshot of the application with a static image when the user is viewing financial information. This is to avoid screenshots with financial information being stored on the device, and potentially in backups. All secrets and authentication related materials must be stored in the system secure storage, such as the keychain on iOS. URL Schemes should never be used for any \"write\" action related to Finaptic APIs. For example, a URL scheme to trigger an Interac transfer is not acceptable, as URL schemes are insecure by design. External services, such as but not limited to analytics providers, must not receive PII, financial transactional data, or any other data which is managed by Finaptic, in order to avoid duplicating critical info that is and must be protected by Finaptic Recommendations \u00b6 Reject the use of 3rd party keyboards completely, using UIApplicationKeyboardExtensionPointIdentifier Requirements Checklist - Web application with Finaptic APIs \u00b6 TBD Step 4: Partner to provide source code to Finaptic for code review \u00b6 Source code must be provided to Finaptic for internal code review, prior to external security testing. Step 5: Security Testing (Penetration test, Code Audit, etc.) \u00b6 Finaptic requires that partners test their applications which leverage Finaptic APIs or SDKs. Testing must be done at least once a year as well as when major changes are performed . Testing must be done by a third party company that specializes in security testing, unless partner has an internal team dedicated to offensive security. The scope of the tests must be the entire mobile application. The format of testing is up to the partner - very open testing techniques such as a code audit are acceptable, and completely advanced knowledge free penetration testing is acceptable as well. We recommend using many techniques over time. If the test is a penetration test, vulnerability re-testing must be included. Test results must be communicated to Finaptic, and remediation priority will be discussed between Finaptic and partner. Mobile application with Finaptic SDK \u00b6 If vulnerabilities are found on the SDK itself during the application test, Finaptic will resolve them based on risk and priority. Web application with Finaptic APIs \u00b6 Not supported at this time. Step 6: User Acceptance Testing (UAT) by Finaptic \u00b6 One week before go-live, as well as before major changes, the application will be manually reviewed by Finaptic, focusing on: Functional testing Disaster recovery User consent Accessibility Legal This process will be detailed further in a future version of this document. Step 7: Findings deemed critical in the testing must be fixed before go-live. \u00b6 Findings discovered in Step 4 deemed to be critical to fix before go-live must now be fixed, and re-tested by the vendor used in Step 4. Critical vulnerability \u00b6 A critical vulnerability is defined as a vulnerability which could be used directly to impact the security or privacy of customers or Finaptic. The Finaptic security team reserves the right to flag any vulnerability as critical, based on our own threat modeling exercises, but will usually focus on these types of vulnerabilities: Privacy/Confidentiality issues at the network level (ex: lack of proper HTTPS configuration) Credential storage safety (ex: sessions stored in an unsafe manner) Data leak caused by 3rd party tools (ex: PII sent to analytics service) Less critical vulnerabilities also have to be fixed, but can be prioritized as per the partner's vulnerability management policy. Process \u00b6 Re-testing of vulnerabilities is performed. Testing vendor provides documentation showing the issues were resolved. Step 7: Go live! \u00b6 \ud83e\udd73","title":"Partner Application Accreditation Process and App Security Checklist"},{"location":"Systems-and-Security/partner_app_accreditation/#partner-application-accreditation-process-and-app-security-checklist","text":"","title":"Partner Application Accreditation Process and App Security Checklist"},{"location":"Systems-and-Security/partner_app_accreditation/#summary","text":"Partners that leverage our SDK or APIs in their own applications must build those applications securely. While Finaptic handles security of the APIs themselves, the client application must be designed securely, and the implementation of it must be tested. This document describes the steps in the accredidation process.","title":"Summary"},{"location":"Systems-and-Security/partner_app_accreditation/#process-overview","text":"Step Accreditation Step Timeline 1 Finaptic and Partner to review that SDLC (Software Development Life Cycle) process must be confirmed to meet the requirements described in this document. Action items for review will be reviewed again later. Kickoff week 2 Partner must document all external dependencies (software/libraries and vendors) and their purpose, and communicate the list to Finaptic as early as possible. Kickoff + 1 month 3 Partner must ensure the application has the required controls, listed in this document, implemented. Before security testing 4 Partner must provide source code of application to Finaptic for code review purposes Before penetration testing 5 A third party must perform a \"penetration test\" of the application before go-live. Finaptic will review the scope as well as the results Go Live - One Month 6 Functional testing results are reviewed by Finaptic Go Live - One Week 7 Findings deemed critical in the testing must be fixed before go-live. Before go-live","title":"Process Overview"},{"location":"Systems-and-Security/partner_app_accreditation/#step-1-software-development-lifecycle-sdlc","text":"We must ensure that all partners making custom applications (web or mobile) using Finaptic SDKs and APIs, have a sufficient level of security maturity when it comes to the SDLC. This part can be reviewed early in the partner relationship, to identify potential issues and have time to perform the necessary improvements as soon as possible.","title":"Step 1: Software Development Lifecycle (SDLC)"},{"location":"Systems-and-Security/partner_app_accreditation/#sdlc-requirements-checklist","text":"Requirement Done Partner must use a source version control system, such as GitHub. Authentication to this system, if done over the Internet, must require Multi-Factor Authentication (MFA). Code reviews must be enforced on all code. A single person must be unable to write code that will end up in production builds without being reviewed by someone else. A vulnerability management process must be in place, ensuring all components of the application are patched/fixed in a timely manner. The application must be reviewed/tested for security by a third party at least once a year and after significant changes. Testing can be of the penetration testing kind, code audits, or anywhere in between, with the entire mobile application in scope.","title":"SDLC Requirements Checklist"},{"location":"Systems-and-Security/partner_app_accreditation/#recommendations","text":"Code should be signed with a PGP key unique to the developer committing it. Static Application Security Testing (SAST) should be in place to scan code for common security vulnerabilities. The application should implement jailbreak/rooting detection and not be usable on devices detected as potentially compromised.","title":"Recommendations"},{"location":"Systems-and-Security/partner_app_accreditation/#step-2-document-external-dependencies","text":"External dependencies (libraries or services) have an important impact on the security of a mobile or web application. Those dependencies must be inventoried, as well as their purpose. For external dependencies specifically, please document what information is shared with the third parties as well. Once it is sent to Finaptic, the Finaptic security team will review it and see if it is necessary to discuss any of the dependencies further. Requirement Done Inventory code dependencies (third party libraries, etc) Inventory external dependencies (third party services, etc) Communicate inventories to Finaptic","title":"Step 2: Document External Dependencies"},{"location":"Systems-and-Security/partner_app_accreditation/#step-3-application-security-controls","text":"The current mobile app requirements and recommendations are valid for both iOS and Android, though the suggested implementations are only documented for iOS so far.","title":"Step 3: Application Security Controls"},{"location":"Systems-and-Security/partner_app_accreditation/#requirements-checklist-mobile-application-with-finaptic-sdk","text":"Requirement Done Communication from the app must be done over encrypted protocols only. While Finaptic APIs are only accessible over HTTPS, other destinations being used over HTTP would put the integrity of communications at risk and could allow someone to exploit flaws in the application itself. If exceptions are needed, they must be documented, communicated to Finaptic and use NSexceptionDomains on iOS. Certificate authority pinning must be done to prevent breaking TLS communications. While pinning the certificates used by Finaptic is the safest, pinning the certificate authority, and allowing rotation in the future, is very secure and much easier to manage. Ensure that only strong TLS ciphers can be used in the application, by explicitly enabling NSExceptionRequiresForwardSecrecy and NSRequiresCertificateTransparency at least towards Finaptic APIs and authentication provider. The Finaptic SDK must be use as a library within partner application If \"long sessions\" are provided, so the user does not have to enter credentials when opening the application, those sessions must be protected by biometrics. For iOS, this means ensuring kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly is configured (a device without a passcode can't have biometric), and this ensures this credential won't be usable through keychain syncing. kSecAccessControlBiometryAny must also be configured for keychain stored credentials. Sessions not protected by biometrics should not last for more than 15 minutes of inactivity, and a Log Out button should be available to the end-user. Sensitive data fields (passwords, PII entry) must be tagged in order to avoid 3rd party keyboards being usable on them. The OS features to integrate screenshots of running applications in the application switchers must replace the screenshot of the application with a static image when the user is viewing financial information. This is to avoid screenshots with financial information being stored on the device, and potentially in backups. All secrets and authentication related materials must be stored in the system secure storage, such as the keychain on iOS. URL Schemes should never be used for any \"write\" action related to Finaptic APIs. For example, a URL scheme to trigger an Interac transfer is not acceptable, as URL schemes are insecure by design. External services, such as but not limited to analytics providers, must not receive PII, financial transactional data, or any other data which is managed by Finaptic, in order to avoid duplicating critical info that is and must be protected by Finaptic","title":"Requirements Checklist - Mobile application with Finaptic SDK"},{"location":"Systems-and-Security/partner_app_accreditation/#recommendations_1","text":"Reject the use of 3rd party keyboards completely, using UIApplicationKeyboardExtensionPointIdentifier","title":"Recommendations"},{"location":"Systems-and-Security/partner_app_accreditation/#requirements-checklist-web-application-with-finaptic-apis","text":"TBD","title":"Requirements Checklist - Web application with Finaptic APIs"},{"location":"Systems-and-Security/partner_app_accreditation/#step-4-partner-to-provide-source-code-to-finaptic-for-code-review","text":"Source code must be provided to Finaptic for internal code review, prior to external security testing.","title":"Step 4: Partner to provide source code to Finaptic for code review"},{"location":"Systems-and-Security/partner_app_accreditation/#step-5-security-testing-penetration-test-code-audit-etc","text":"Finaptic requires that partners test their applications which leverage Finaptic APIs or SDKs. Testing must be done at least once a year as well as when major changes are performed . Testing must be done by a third party company that specializes in security testing, unless partner has an internal team dedicated to offensive security. The scope of the tests must be the entire mobile application. The format of testing is up to the partner - very open testing techniques such as a code audit are acceptable, and completely advanced knowledge free penetration testing is acceptable as well. We recommend using many techniques over time. If the test is a penetration test, vulnerability re-testing must be included. Test results must be communicated to Finaptic, and remediation priority will be discussed between Finaptic and partner.","title":"Step 5: Security Testing (Penetration test, Code Audit, etc.)"},{"location":"Systems-and-Security/partner_app_accreditation/#mobile-application-with-finaptic-sdk","text":"If vulnerabilities are found on the SDK itself during the application test, Finaptic will resolve them based on risk and priority.","title":"Mobile application with Finaptic SDK"},{"location":"Systems-and-Security/partner_app_accreditation/#web-application-with-finaptic-apis","text":"Not supported at this time.","title":"Web application with Finaptic APIs"},{"location":"Systems-and-Security/partner_app_accreditation/#step-6-user-acceptance-testing-uat-by-finaptic","text":"One week before go-live, as well as before major changes, the application will be manually reviewed by Finaptic, focusing on: Functional testing Disaster recovery User consent Accessibility Legal This process will be detailed further in a future version of this document.","title":"Step 6: User Acceptance Testing (UAT) by Finaptic"},{"location":"Systems-and-Security/partner_app_accreditation/#step-7-findings-deemed-critical-in-the-testing-must-be-fixed-before-go-live","text":"Findings discovered in Step 4 deemed to be critical to fix before go-live must now be fixed, and re-tested by the vendor used in Step 4.","title":"Step 7: Findings deemed critical in the testing must be fixed before go-live."},{"location":"Systems-and-Security/partner_app_accreditation/#critical-vulnerability","text":"A critical vulnerability is defined as a vulnerability which could be used directly to impact the security or privacy of customers or Finaptic. The Finaptic security team reserves the right to flag any vulnerability as critical, based on our own threat modeling exercises, but will usually focus on these types of vulnerabilities: Privacy/Confidentiality issues at the network level (ex: lack of proper HTTPS configuration) Credential storage safety (ex: sessions stored in an unsafe manner) Data leak caused by 3rd party tools (ex: PII sent to analytics service) Less critical vulnerabilities also have to be fixed, but can be prioritized as per the partner's vulnerability management policy.","title":"Critical vulnerability"},{"location":"Systems-and-Security/partner_app_accreditation/#process","text":"Re-testing of vulnerabilities is performed. Testing vendor provides documentation showing the issues were resolved.","title":"Process"},{"location":"Systems-and-Security/partner_app_accreditation/#step-7-go-live","text":"\ud83e\udd73","title":"Step 7: Go live!"},{"location":"Systems-and-Security/security_requirements/","text":"Security Requirements for Partners \u00b6 Security is a shared responsibility. While Finaptic provides a secure environment and APIs, it is important to ensure that the client applications and partner environments follow some guidelines, to ensure the entire experience is protected. Scope \u00b6 This document establishes requirements for Finaptic partners, for systems and services which are integrated with Finaptic. Example systems that are covered: A mobile app using the Finaptic SDK A web application using Finaptic APIs Systems which impact the security of other systems that are in scope Updates \u00b6 Finaptic may periodically update these Security Requirements by posting a new version. It is understood that as threat evolves and systems become more complex, security controls must keep up. These requirements are good security practices, and in most case should not generate a significant increase to Partner's obligations. Partners who wish to discuss these measures or alternate measures can do so in private with the Finaptic Security and Legal teams. Information Security Policy and Incident Notification \u00b6 Partners must have an information security program, as well as policies and standards. Partners must have an incident management process, and technical means of logging and monitoring activity to discover such incidents. Logs should be kept for a minimum of a year and be accessible for querying at all times. Partners must notify Finaptic of security incidents within sevent-two hours of becoming aware of it. Secure development \u00b6 A software development life cycle (SDLC) process must be in place. Source code must be stored in a source version control system. Authentication to this system, if exposed to the Internet, must require Multi-Factor Authentication (MFA). Code reviews must be performed on code. Vulnerabilities in code and libraries must be managed. Recommendations for additional security can be found in our partner app accreditation document. Vulnerability Management \u00b6 Disclosure Policy \u00b6 Partners must have a disclosure policy covering systems and services using Finaptic technology that is similar to Finaptic's which: Allows anyone to report vulnerabilities Provides timelines for expected resolution Partners must report any vulnerability found in their applications or systems when they could put Finaptic data, systems or customers at risk. Fixing Issues \u00b6 Partner will fix all critical and high severity vulnerabilities that could affect the security of Finaptic Data and functionality, of which Partner becomes aware, within 14 days of becoming aware of the vulnerability. If Partner cannot fix the vulnerability within 14 days, Partner will promptly inform Finaptic, including all details of the risk to Finaptic arising from Partner\u2019s inability to fix the vulnerability, so a solution can be designed to mitigate the risk. Application and Network Penetration Testing. \u00b6 Partner shall, at least once per year, perform a suite of independent third-party tests. These tests will be performed upon: (i) the applications leveraging Finaptic technology; (ii) all aspects of Partner\u2019s internet-facing perimeter related to the applications and services; and (iii) Partner\u2019s internal corporate network and internal systems which could impact the security of the applications and services. Partner will supply Finaptic with details of all third-party tests from the previous year, including names of third-party testers and number of person hours used. Partner shall, upon Finaptic's request and under suitable non-disclosure obligations, share with Finaptic: (i) confirmation that the tests required by this Section 1.3 were performed; and (ii) the third party tests results from Sections 1.3(a)(i) and (ii) above. Technical Security Requirements \u00b6 Mobile and Web Applications \u00b6 Mobile applications leveraging the Finaptic SDK must include controls to protect end customers and their information. A mobile and web application security standard is provided to this effect, and is kept up to date as the threat landscape changes.","title":"Security Requirements for Partners"},{"location":"Systems-and-Security/security_requirements/#security-requirements-for-partners","text":"Security is a shared responsibility. While Finaptic provides a secure environment and APIs, it is important to ensure that the client applications and partner environments follow some guidelines, to ensure the entire experience is protected.","title":"Security Requirements for Partners"},{"location":"Systems-and-Security/security_requirements/#scope","text":"This document establishes requirements for Finaptic partners, for systems and services which are integrated with Finaptic. Example systems that are covered: A mobile app using the Finaptic SDK A web application using Finaptic APIs Systems which impact the security of other systems that are in scope","title":"Scope"},{"location":"Systems-and-Security/security_requirements/#updates","text":"Finaptic may periodically update these Security Requirements by posting a new version. It is understood that as threat evolves and systems become more complex, security controls must keep up. These requirements are good security practices, and in most case should not generate a significant increase to Partner's obligations. Partners who wish to discuss these measures or alternate measures can do so in private with the Finaptic Security and Legal teams.","title":"Updates"},{"location":"Systems-and-Security/security_requirements/#information-security-policy-and-incident-notification","text":"Partners must have an information security program, as well as policies and standards. Partners must have an incident management process, and technical means of logging and monitoring activity to discover such incidents. Logs should be kept for a minimum of a year and be accessible for querying at all times. Partners must notify Finaptic of security incidents within sevent-two hours of becoming aware of it.","title":"Information Security Policy and Incident Notification"},{"location":"Systems-and-Security/security_requirements/#secure-development","text":"A software development life cycle (SDLC) process must be in place. Source code must be stored in a source version control system. Authentication to this system, if exposed to the Internet, must require Multi-Factor Authentication (MFA). Code reviews must be performed on code. Vulnerabilities in code and libraries must be managed. Recommendations for additional security can be found in our partner app accreditation document.","title":"Secure development"},{"location":"Systems-and-Security/security_requirements/#vulnerability-management","text":"","title":"Vulnerability Management"},{"location":"Systems-and-Security/security_requirements/#disclosure-policy","text":"Partners must have a disclosure policy covering systems and services using Finaptic technology that is similar to Finaptic's which: Allows anyone to report vulnerabilities Provides timelines for expected resolution Partners must report any vulnerability found in their applications or systems when they could put Finaptic data, systems or customers at risk.","title":"Disclosure Policy"},{"location":"Systems-and-Security/security_requirements/#fixing-issues","text":"Partner will fix all critical and high severity vulnerabilities that could affect the security of Finaptic Data and functionality, of which Partner becomes aware, within 14 days of becoming aware of the vulnerability. If Partner cannot fix the vulnerability within 14 days, Partner will promptly inform Finaptic, including all details of the risk to Finaptic arising from Partner\u2019s inability to fix the vulnerability, so a solution can be designed to mitigate the risk.","title":"Fixing Issues"},{"location":"Systems-and-Security/security_requirements/#application-and-network-penetration-testing","text":"Partner shall, at least once per year, perform a suite of independent third-party tests. These tests will be performed upon: (i) the applications leveraging Finaptic technology; (ii) all aspects of Partner\u2019s internet-facing perimeter related to the applications and services; and (iii) Partner\u2019s internal corporate network and internal systems which could impact the security of the applications and services. Partner will supply Finaptic with details of all third-party tests from the previous year, including names of third-party testers and number of person hours used. Partner shall, upon Finaptic's request and under suitable non-disclosure obligations, share with Finaptic: (i) confirmation that the tests required by this Section 1.3 were performed; and (ii) the third party tests results from Sections 1.3(a)(i) and (ii) above.","title":"Application and Network Penetration Testing."},{"location":"Systems-and-Security/security_requirements/#technical-security-requirements","text":"","title":"Technical Security Requirements"},{"location":"Systems-and-Security/security_requirements/#mobile-and-web-applications","text":"Mobile applications leveraging the Finaptic SDK must include controls to protect end customers and their information. A mobile and web application security standard is provided to this effect, and is kept up to date as the threat landscape changes.","title":"Mobile and Web Applications"},{"location":"Systems-and-Security/vulnerability_disclosure/","text":"Vulnerability Disclosure \u00b6 Finaptic welcomes vulnerability reports by security researchers, partners, their customers, or anyone else looking to improve the security of services we provide. We do not currently run a bug bounty program, and no money is currently offered for security issues reported. As this is not a bug bounty program, this is not a permission to actively try to break security of Finaptic, but rather, a channel for reporting vulnerabilities that could be discovered passively or through other channels, by customers or anyone else. To report a security issue with our platform, please email security@finaptic.com with the word \"Vulnerability\" or \"Disclosure\" in the subject line. If you wish to encrypt the email, you can do so, with the public key provided at the bottom of this page. For every report that is deemed legitimate (as in: not spam), we will acknowledge receiving the information within 3 business days, and we will keep you informed about remediation status. Your personal information will not be used for any purpose other than the vulnerability report. Process \u00b6 Our priority is resolving the vulnerability, once it is confirmed to be valid. We prefer for the following process to be followed in order for vulnerabilities to be fixed in a coordinated way: The reporter of the vulnerability is contacted within 3 business days to acknowledge reception. Finaptic will evaluate the validity and severity of the report. Based on the evaluation, remediation will be planned, within a maximum of 90 days, though we aim to fix important vulnerabilities much faster. The reporter will be contacted with the resolution plan. The vulnerability is fixed, and can now be disclosed publicy both on our end (release notes, blog posts, etc.) and on the reporter's end. PGP Key \u00b6 PGP Key for security@finaptic.com as well) Key ID: 55C66719 Fingerprint: 7D62 BEA9 D5FA B1A9 939A 90B7 F0ED DD47 55C6 6719 -----BEGIN PGP PUBLIC KEY BLOCK----- mQINBGEBZ3sBEACy4GLw5sYCCsy75COtB7Ti2JuHV9vx0G/fTqv/Go4/pJW6iNFU 8uNdfYzjE9cobNdPm07k3FuX1LjLFZON/spe4d4pb9I6+bzlh2zQVJXp1+J/0O35 hJGRySyjKUaePUnVAbhORa6NaLoCAQpBHBmnUHcR6MBvKGcWe9beYCiNNglkGv0R veBN9DIYBbYFQBIdLQRjAviXmC0/6NryAuPWuo9luMQ2zLrCNT7Tag+JcCzx53De hz63MZLSvC8zpkU8X0mdRX4Y/K1YdTu8E/8zHvDtd5ifeDjEWZZ4p5odOUyqQVWq n/9k01gRjchfrlFvcsnZAzpNEFW1ds194X3Qtag+BqHxoKkuXcm1RJi1wb8KuUj9 P2Ebr/Sqvqdxmiir/LtEc/L5nJh9Xo6hMj9b6eKXHll9PFqq2fugMqakydmqYuzd Ir23F/IQBVKupaPaQ3y2FNpzBmzcwOR3b6kNv0YMmUIq8GP0DEf0s1F35Sir67I1 sqYMG7aS2Ten7v8AW9JOfwfeu1FpYW2vYrlUUB2wHpYDzVJeM3gkChYZ3epFdUxX sY67+/0YmtZNeHStlPFzFMSNXeoL2cy7mMGK98URLqGVGZDPF20Dd/xVBM/0gR1k MunDYQPdoruvbgMC/yoOddDMjW13oBBla/GNzdO8cEHx1XUf6gWxJgZSSQARAQAB tC5GaW5hcHRpYyBTZWN1cml0eSBUZWFtIDxzZWN1cml0eUBmaW5hcHRpYy5jb20+ iQJUBBMBCAA+FiEEfWK+qdX6samTmpC38O3dR1XGZxkFAmEBZ3sCGwMFCQeGH00F CwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQ8O3dR1XGZxkYeQ/9G+Ut3mvZqfLw YynUV+s0IJgkv4CxpCoKsdQ3ni7c1PynK4wQo4aWs77wBS/Qeae5DQjDUojxIThD Isg+lSzueQx1WnmWjywRthWXpBwdnd9CbeSgl4XXho9vFZF2wDEA0QhCivsh+tkQ +DidVLRRkbyuLSOkv5ERE7XLKgsmkqFi5RRH70DTzWonNLNzsJknRblRceyCYTTs 1CaTrMwrL6lllzZOGGznB7rEcy4jZ/bdzo7FXDF0jDFR9hgl6jBsiS4GiaRX0XTm CoH9yasNgpC5uobQZr4l0+DDCAKuG3BBVBj4ud0uO5BRSXb81LRa71t2ulLiZFc2 mMTQ6ZWTl7BYp8dcS6qndiRXgvZw00F7KKwyzGF2QK0L711EENUruwGqmDwP5iJC ppEfOSwoYFFUun2qjhb48UY0dOZMFS9DKxeGe5BKl7TE2H/fpEoEvcu1SKNsCbqp ovdBTJhDLhK7N4x9tRltC98OCuMVhNlsyuaK7Dt7H9FZZTIXDlEWrYRq1/A7sHpQ 6vEIEKY2/poUearpr0u5ds5h6dHQZQ5fXwspZ0JjMZFKQbWoIdz40o2wOD4W93rM ahSYBbi78+dDLXCDRDc+QVTRfDO2El0ZYWY6Qir/AaQ1RfN5uliVAhgFUr9KXAdd I5Rp00GPenLiiZHug2pxv7jU/n8NldW5Ag0EYQFnewEQAKu7To+muYMg7iFMWR22 KohngT2NHc8e67HCcehXrEPuHHcLVrfC78jUoa+kfZdvdKuA91jZPm20x1iDqFg5 KiRtSEqoluP0IVt/YnxB72ZOZM5odYkfu97Uujdm3nCoXTcEpmX28d19OyBSrzpA FOcV8HmSeTcjXkD6PHYHKS1J0kPMlM6usFOgUrjxaWkQNo2V8BWa/gOiXv8CSmJ7 kDSikti5eYBY1X6s0GuJY9pwf5K7jVmkifdvDAr+ro3VHIWVA08WSNcq3TJh8Xrx TKZlqa1Vle9iqKktyrKUq/JhbE2eYU4zcbTfR6cgdzQTwcliFwwNb9sasxIKAAcA CL9Ep7aJwQ/drYgOVacvxX7alf4qWE04PMOoExr7A+4SQBTgFapWhGRRM+2L66vE oANrQmtkAAT7ChieYi7BHh2BYwir+/8cgGZV6xqE/8B4RZGJJ+W8/10Df5oSCk6S dx1pePmCj1ieukn4beYK/9e0CEp4C3yUKOJNPkl5w+KaBI7t2JJ34/cwYcKjPncT mTHJ9zgjj5IpoQHA9rvt8TM61175mAmyrP816yFCrOpV7OWr8KLlMAsHSlSJcTd/ 9vGPgcyy3VujRj1X0oCxvhzp8S+A+GukOr3yRvgb4DC7+IDxa56Stm/PUjfo4T/4 htxfgOVIbN4XDrA2HOWFVVnTABEBAAGJAjwEGAEIACYWIQR9Yr6p1fqxqZOakLfw 7d1HVcZnGQUCYQFnewIbDAUJB4YfTQAKCRDw7d1HVcZnGWWtD/9mWxeMfnYpLWQ+ UUFBfGrTRWdOGLKLgIB3JGiPWpgFGu5YVJmshUAfWrWJhPgGc+hkFG8hPgyG+03j IDnbpvJ6OAezsuP8+0uGzSkZVIzX2Jm5iycHoFw+KyN3vY5KJgUrIczcGb8DwVxL wUR+JUFc6ghgfc4kJ7rQQ4lrKzp+wOiNK3b9gpU4sWmMXd4MvvElMdcEDXgLzvqn SKGvdxS96xyfH9adPlTTJVB4Sq+GF/9V6XsdlEgVAiUwUHw/+HXAfaqB38kONvKR KqqNGLpIONBU0GdGZm3d9HGkAlR6RE+IKI+mq7MKe1G1wNS767M1ittXJ+eQydRX c51HlP2x6WdONAMmfqKKGJNaHzdV4n5Y9Hkpn7GJv6rIDxR+dnskSGUqwHYKV1Bc 3QEkEQmnvf0VT30yvEOo27yWMfkvjocV8TMKPqYy1OOjSNo3ZaPzz6e/GTE6iPjH WogycSEjYIEwKyTFR9hImrOLX4J/IvXrZuzpOF5tt1XBbOgJQhDC2Dpthdk3WikG UoFAzXOTdByBIVTAjc2A50D/BphKYuAnF3OSXQC2SM8elVX275/dezqlC8dNINpu RbK8C0p6yRKOx02migz0wf29x/7dtX8rfEMRZ+p0BtFF2Q7XxxXNViAdxErjXHZl VB4gmwb8CDcSodzWnr/3JInLugNUSw== =prfk -----END PGP PUBLIC KEY BLOCK-----","title":"Vulnerability Disclosure"},{"location":"Systems-and-Security/vulnerability_disclosure/#vulnerability-disclosure","text":"Finaptic welcomes vulnerability reports by security researchers, partners, their customers, or anyone else looking to improve the security of services we provide. We do not currently run a bug bounty program, and no money is currently offered for security issues reported. As this is not a bug bounty program, this is not a permission to actively try to break security of Finaptic, but rather, a channel for reporting vulnerabilities that could be discovered passively or through other channels, by customers or anyone else. To report a security issue with our platform, please email security@finaptic.com with the word \"Vulnerability\" or \"Disclosure\" in the subject line. If you wish to encrypt the email, you can do so, with the public key provided at the bottom of this page. For every report that is deemed legitimate (as in: not spam), we will acknowledge receiving the information within 3 business days, and we will keep you informed about remediation status. Your personal information will not be used for any purpose other than the vulnerability report.","title":"Vulnerability Disclosure"},{"location":"Systems-and-Security/vulnerability_disclosure/#process","text":"Our priority is resolving the vulnerability, once it is confirmed to be valid. We prefer for the following process to be followed in order for vulnerabilities to be fixed in a coordinated way: The reporter of the vulnerability is contacted within 3 business days to acknowledge reception. Finaptic will evaluate the validity and severity of the report. Based on the evaluation, remediation will be planned, within a maximum of 90 days, though we aim to fix important vulnerabilities much faster. The reporter will be contacted with the resolution plan. The vulnerability is fixed, and can now be disclosed publicy both on our end (release notes, blog posts, etc.) and on the reporter's end.","title":"Process"},{"location":"Systems-and-Security/vulnerability_disclosure/#pgp-key","text":"PGP Key for security@finaptic.com as well) Key ID: 55C66719 Fingerprint: 7D62 BEA9 D5FA B1A9 939A 90B7 F0ED DD47 55C6 6719 -----BEGIN PGP PUBLIC KEY BLOCK----- mQINBGEBZ3sBEACy4GLw5sYCCsy75COtB7Ti2JuHV9vx0G/fTqv/Go4/pJW6iNFU 8uNdfYzjE9cobNdPm07k3FuX1LjLFZON/spe4d4pb9I6+bzlh2zQVJXp1+J/0O35 hJGRySyjKUaePUnVAbhORa6NaLoCAQpBHBmnUHcR6MBvKGcWe9beYCiNNglkGv0R veBN9DIYBbYFQBIdLQRjAviXmC0/6NryAuPWuo9luMQ2zLrCNT7Tag+JcCzx53De hz63MZLSvC8zpkU8X0mdRX4Y/K1YdTu8E/8zHvDtd5ifeDjEWZZ4p5odOUyqQVWq n/9k01gRjchfrlFvcsnZAzpNEFW1ds194X3Qtag+BqHxoKkuXcm1RJi1wb8KuUj9 P2Ebr/Sqvqdxmiir/LtEc/L5nJh9Xo6hMj9b6eKXHll9PFqq2fugMqakydmqYuzd Ir23F/IQBVKupaPaQ3y2FNpzBmzcwOR3b6kNv0YMmUIq8GP0DEf0s1F35Sir67I1 sqYMG7aS2Ten7v8AW9JOfwfeu1FpYW2vYrlUUB2wHpYDzVJeM3gkChYZ3epFdUxX sY67+/0YmtZNeHStlPFzFMSNXeoL2cy7mMGK98URLqGVGZDPF20Dd/xVBM/0gR1k MunDYQPdoruvbgMC/yoOddDMjW13oBBla/GNzdO8cEHx1XUf6gWxJgZSSQARAQAB tC5GaW5hcHRpYyBTZWN1cml0eSBUZWFtIDxzZWN1cml0eUBmaW5hcHRpYy5jb20+ iQJUBBMBCAA+FiEEfWK+qdX6samTmpC38O3dR1XGZxkFAmEBZ3sCGwMFCQeGH00F CwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQ8O3dR1XGZxkYeQ/9G+Ut3mvZqfLw YynUV+s0IJgkv4CxpCoKsdQ3ni7c1PynK4wQo4aWs77wBS/Qeae5DQjDUojxIThD Isg+lSzueQx1WnmWjywRthWXpBwdnd9CbeSgl4XXho9vFZF2wDEA0QhCivsh+tkQ +DidVLRRkbyuLSOkv5ERE7XLKgsmkqFi5RRH70DTzWonNLNzsJknRblRceyCYTTs 1CaTrMwrL6lllzZOGGznB7rEcy4jZ/bdzo7FXDF0jDFR9hgl6jBsiS4GiaRX0XTm CoH9yasNgpC5uobQZr4l0+DDCAKuG3BBVBj4ud0uO5BRSXb81LRa71t2ulLiZFc2 mMTQ6ZWTl7BYp8dcS6qndiRXgvZw00F7KKwyzGF2QK0L711EENUruwGqmDwP5iJC ppEfOSwoYFFUun2qjhb48UY0dOZMFS9DKxeGe5BKl7TE2H/fpEoEvcu1SKNsCbqp ovdBTJhDLhK7N4x9tRltC98OCuMVhNlsyuaK7Dt7H9FZZTIXDlEWrYRq1/A7sHpQ 6vEIEKY2/poUearpr0u5ds5h6dHQZQ5fXwspZ0JjMZFKQbWoIdz40o2wOD4W93rM ahSYBbi78+dDLXCDRDc+QVTRfDO2El0ZYWY6Qir/AaQ1RfN5uliVAhgFUr9KXAdd I5Rp00GPenLiiZHug2pxv7jU/n8NldW5Ag0EYQFnewEQAKu7To+muYMg7iFMWR22 KohngT2NHc8e67HCcehXrEPuHHcLVrfC78jUoa+kfZdvdKuA91jZPm20x1iDqFg5 KiRtSEqoluP0IVt/YnxB72ZOZM5odYkfu97Uujdm3nCoXTcEpmX28d19OyBSrzpA FOcV8HmSeTcjXkD6PHYHKS1J0kPMlM6usFOgUrjxaWkQNo2V8BWa/gOiXv8CSmJ7 kDSikti5eYBY1X6s0GuJY9pwf5K7jVmkifdvDAr+ro3VHIWVA08WSNcq3TJh8Xrx TKZlqa1Vle9iqKktyrKUq/JhbE2eYU4zcbTfR6cgdzQTwcliFwwNb9sasxIKAAcA CL9Ep7aJwQ/drYgOVacvxX7alf4qWE04PMOoExr7A+4SQBTgFapWhGRRM+2L66vE oANrQmtkAAT7ChieYi7BHh2BYwir+/8cgGZV6xqE/8B4RZGJJ+W8/10Df5oSCk6S dx1pePmCj1ieukn4beYK/9e0CEp4C3yUKOJNPkl5w+KaBI7t2JJ34/cwYcKjPncT mTHJ9zgjj5IpoQHA9rvt8TM61175mAmyrP816yFCrOpV7OWr8KLlMAsHSlSJcTd/ 9vGPgcyy3VujRj1X0oCxvhzp8S+A+GukOr3yRvgb4DC7+IDxa56Stm/PUjfo4T/4 htxfgOVIbN4XDrA2HOWFVVnTABEBAAGJAjwEGAEIACYWIQR9Yr6p1fqxqZOakLfw 7d1HVcZnGQUCYQFnewIbDAUJB4YfTQAKCRDw7d1HVcZnGWWtD/9mWxeMfnYpLWQ+ UUFBfGrTRWdOGLKLgIB3JGiPWpgFGu5YVJmshUAfWrWJhPgGc+hkFG8hPgyG+03j IDnbpvJ6OAezsuP8+0uGzSkZVIzX2Jm5iycHoFw+KyN3vY5KJgUrIczcGb8DwVxL wUR+JUFc6ghgfc4kJ7rQQ4lrKzp+wOiNK3b9gpU4sWmMXd4MvvElMdcEDXgLzvqn SKGvdxS96xyfH9adPlTTJVB4Sq+GF/9V6XsdlEgVAiUwUHw/+HXAfaqB38kONvKR KqqNGLpIONBU0GdGZm3d9HGkAlR6RE+IKI+mq7MKe1G1wNS767M1ittXJ+eQydRX c51HlP2x6WdONAMmfqKKGJNaHzdV4n5Y9Hkpn7GJv6rIDxR+dnskSGUqwHYKV1Bc 3QEkEQmnvf0VT30yvEOo27yWMfkvjocV8TMKPqYy1OOjSNo3ZaPzz6e/GTE6iPjH WogycSEjYIEwKyTFR9hImrOLX4J/IvXrZuzpOF5tt1XBbOgJQhDC2Dpthdk3WikG UoFAzXOTdByBIVTAjc2A50D/BphKYuAnF3OSXQC2SM8elVX275/dezqlC8dNINpu RbK8C0p6yRKOx02migz0wf29x/7dtX8rfEMRZ+p0BtFF2Q7XxxXNViAdxErjXHZl VB4gmwb8CDcSodzWnr/3JInLugNUSw== =prfk -----END PGP PUBLIC KEY BLOCK-----","title":"PGP Key"}]}