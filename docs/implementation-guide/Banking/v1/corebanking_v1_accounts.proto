syntax = "proto3";
package thebaasco.tenant.corebanking.v1;

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "types/amount.proto";
import "types/options.proto";

option go_package = "proto/tenant/corebanking/v1";

//AccountStatus is an enumeration indicating the status of an Account. All accounts are created in the ACCOUNT_STATUS_INACTIVE state by default.
enum AccountStatus {
  
  //ACCOUNT_STATUS_UNSPECIFIED should never be used directly. It is returned when a value has not been specified, and is present by convention, for error-detection purposes. 
  ACCOUNT_STATUS_UNSPECIFIED = 0;
  
  //ACCOUNT_STATUS_INACTIVE represents an Account that is inactive. It is the initial state after creation. An Account that is inactive cannot process any transactions.
  ACCOUNT_STATUS_INACTIVE = 1;
  
  //ACCOUNT_STATUS_ACTIVE represents an Account that is active. In this state normal operations can be processed on the Account.
  ACCOUNT_STATUS_ACTIVE = 2;
}

//Accounts service exposes specific operations related to checking and saving accounts.
//To retrieve general information about an Account, such as its balance, check the Core-Transaction api documentation.
service Accounts {
  
  //GetAccountDetails retrieves details about an Account.
  //Only users associated with the Account (owner or authorized users) will be able to invoke this endpoint.
  //To list Accounts, or to get generic information about a specific Account, such as its balance, see Core-Transaction api documentation.
  rpc GetAccountDetails(GetAccountDetailsRequest) returns (AccountDetails) {}
};

//CreateAccountRequest is used to perform the asynchronous operation of creating a new Account. Performing this operation will generate an asynchronous response of type CreateAccountResponse, on the response topic.
message CreateAccountRequest {
  option (thebaasco.types.topic) = "thebaasco.core-banking.create-account-command";
  option (thebaasco.types.response_topic) = "thebaasco.core-banking.create-account-response";

  //Required. The type of Account to open is a string that is composed in conjunction between product catalog and requestor domain (e.g. "current_account.v39")
  //An unknown or invalid Account type will generate an error with status code INVALID_ARGUMENT.  
  string account_type = 1[(validate.rules).string.min_len = 1];
  
  //Optional. The parameters for the Account type. The possible parameters and format is defined by the banking layer's Smart Contract.
  map<string, string> account_parameters = 2;
}

//CreateAccountResponse is the response to CreateAccountRequest. It contains the AccountDetails for the created Account. 
message CreateAccountResponse {

  //The details for the created Account.
  AccountDetails account_details = 1[(validate.rules).message.required = true];
}

//GetAccountDetailsRequest is passed as parameter to the GetAccountDetails operation, in order to determine which Account to retrieve the details from.
message GetAccountDetailsRequest {

  //The ID of the Account to retrieve. The value must be a valid UUID, and current user must have proper access to the Account to retrieve it.
  string account_id = 1[(validate.rules).string.uuid = true];
}

//AccountDetails represents the details of a Core-Banking Account.
message AccountDetails {

  //The ID of the Account. This will always be a valid UUID. Output only.
  string account_id = 1[(validate.rules).string.uuid = true];

  //The status of the Account. See documentation on AccountStatus enum for details on enum values. Output only.
  AccountStatus status = 2[(validate.rules).enum = {not_in: [0], defined_only: true}];
  
  //The primary holder of the Account. This value comes from the Client-Profile domain. This will always be a list of valid UUID. Output only.
  string owner_client_id = 3[(validate.rules).string.uuid = true];
  
  //The list of authorized users for the Account. This will always be a list of valid UUIDs. Output only.
  repeated string authorized_client_ids = 4[(validate.rules).repeated.items.string.uuid = true];
  
  //The interest that is accumulated daily since last applied, but hasn't been applied to the balance yet. Interest is applied to Account balance monthly. Output only.
  thebaasco.types.Amount accrued_interest = 5;
}

//AccountCreatedEvent is an event that is raised when a Core-Banking Account is successfully created, following a CreateAccountRequest.
message AccountCreatedEvent {
  option (thebaasco.types.topic) = "thebaasco.core-banking.accounts.account-created";

  //The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not.
  //This ID will always be a valid UUID.
  string event_id = 1[(validate.rules).string.uuid = true];

  //The details of the created Account.
  AccountDetails account_details = 2[(validate.rules).message.required = true];

  //The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants.
  int32 tenant_id = 3[(validate.rules).int32 = {gte: 1, lte: 9999}];

  //The UTC timestamp at which the Account was created.
  google.protobuf.Timestamp account_creation_time = 4 [(validate.rules).timestamp.required = true];
}

//ChangeAccountStatusRequest is used to perform the asynchronous operation of changing an Account's status. Performing this operation will generate an asynchronous response of type ChangeAccountStatusResponse, on the response topic.
// Possible state transitions:
// - From "ACCOUNT_STATUS_INACTIVE" to "ACCOUNT_STATUS_ACTIVE"
message ChangeAccountStatusRequest {
  option (thebaasco.types.topic) = "thebaasco.core-banking.change-account-status-command";
  option (thebaasco.types.response_topic) = "thebaasco.core-banking.change-account-status-response";

  //The ID of the Account to update. The value must be a valid UUID, and current user must have proper access to the Account.
  string account_id = 1[(validate.rules).string.uuid = true];

  //The target status of the Account. See documentation on AccountStatus enum for details on enum values.
  AccountStatus status = 2[(validate.rules).enum = {not_in: [0], defined_only: true}];
}

//ChangeAccountStatusResponse message is returned when issuing a CreateAccountRequest. It contains the AccountDetails for the Account.
message ChangeAccountStatusResponse {

  //The updated details for the Account.
  AccountDetails account_details = 1[(validate.rules).message.required = true];
}

//AccountStatusChangedEvent is an event raised when an Account changes status.
message AccountStatusChangedEvent {
  option (thebaasco.types.topic) = "thebaasco.core-banking.account-status-updated-event";

  //The unique ID of this event. Can be used by consumers to determine if an event has already been processed or not.
  //This ID will always be a valid UUID.
  string event_id = 1[(validate.rules).string.uuid = true];


  //The updated details for the Account.
  AccountDetails account_details = 2[(validate.rules).message.required = true];

  //The ID to identify the tenant on which the operation occurred. This can be used when processing events at the global scope to differentiate between tenants.
  int32 tenant_id = 3[(validate.rules).int32 = {gte: 1, lte: 9999}];
  
  //The UTC timestamp at which the Account status changed.
  google.protobuf.Timestamp account_status_changed_time = 4 [(validate.rules).timestamp.required = true];
}
