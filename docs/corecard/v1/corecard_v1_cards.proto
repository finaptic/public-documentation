syntax = "proto3";
package thebaasco.tenant.corecard.v1;

import "google/protobuf/timestamp.proto";
import "google/type/date.proto";
import "validate/validate.proto";
import "types/options.proto";


option go_package = "proto/tenant/corecard/v1";

service Cards {
    rpc GetCard(GetCardRequest) returns (Card){
    }

    rpc ListCards(ListCardsRequest) returns (ListCardsResponse){
    }

    rpc GetCardDetails(GetCardDetailsRequest) returns (CardDetails) {
    }

    //To obtain a sign-on token to be used with the provided card SDK
    //To do sensitive operations like retrieving Card PAN and CVV or resetting card PIN
    rpc CreateCardSDKSignOnToken(CreateCardSDKSignOnTokenRequest) returns (CreateCardSDKSignOnTokenResponse){
    }
}

enum CardType {
    CARD_TYPE_UNSPECIFIED = 0;
    CARD_TYPE_PREPAID = 1;
}

message Card {   
    //Output only
    string id = 1;
    CardType card_type = 2[(validate.rules).enum = { not_in: [0], defined_only: true}];
    string account_id = 3[(validate.rules).string.uuid = true];
    string description = 4;
}

message CardDetails{
    //Output only
    string card_id = 1;
    //Output only
    string card_number = 2;
    //Output only
    google.type.Date expiration = 3;
    //Output only
    string cvv = 4;
}

message CreateCardRequest{
    option (thebaasco.types.topic) = "thebaasco.core-card.create-card-command";
    option (thebaasco.types.response_topic) = "thebaasco.core-card.create-card-response";
    option (thebaasco.types.dead_letter_topic) = "thebaasco.core-card.create-card-dead-letter";

    Card card = 1[(validate.rules).message.required = true];
}

message UpdateCardRequest{
    option (thebaasco.types.topic) = "thebaasco.core-card.update-card-command";
    option (thebaasco.types.response_topic) = "thebaasco.core-card.update-card-response";
    option (thebaasco.types.dead_letter_topic) = "thebaasco.core-card.update-card-dead-letter";

    string card_id = 1[(validate.rules).string.uuid = true];
    Card card = 2[(validate.rules).message.required = true];
}

message DeleteCardRequest{
    option (thebaasco.types.topic) = "thebaasco.core-card.delete-card-command";
    option (thebaasco.types.response_topic) = "thebaasco.core-card.delete-card-response";
    option (thebaasco.types.dead_letter_topic) = "thebaasco.core-card.delete-card-dead-letter";

    string card_id = 1[(validate.rules).string.uuid = true];
}

message ListCardsRequest{
    string user_id = 1[(validate.rules).string.uuid = true];
    int32 page_size = 2[(validate.rules).int32.gte = 1];
    string page_token = 3;
}

message ListCardsResponse{
    repeated Card cards = 1;
    string next_page_token = 2;
}

message GetCardRequest {
    string card_id = 1[(validate.rules).string.uuid = true];
}

message GetCardDetailsRequest {
    string card_id = 1[(validate.rules).string.uuid = true]; 
}

message ActivateCardRequest {
    string card_id = 1[(validate.rules).string.uuid = true];
}

message ChangePinRequest {
    string card_id = 1[(validate.rules).string.uuid = true];
    string pin = 2[(validate.rules).string = { min_len: 4, max_len: 6, pattern: "^\\d*$"}];
}

message CardCreatedEvent {
    string id=1;
    Card card=2[(validate.rules).message.required = true];
    int64 tenant_id=3[(validate.rules).int64 = {gte: 1, lte: 72057594037927935}]; //mask that ensure we can't use more than 56bits
    google.protobuf.Timestamp card_creation_time = 4 [(validate.rules).timestamp.required = true];
}

message CreateCardSDKSignOnTokenRequest {
    string card_id = 1[(validate.rules).string.uuid = true];
}

message CreateCardSDKSignOnTokenResponse {
    string token = 1;
}