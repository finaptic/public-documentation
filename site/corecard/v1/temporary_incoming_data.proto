syntax = "proto3";
package thebaasco.tenant.corecard.v1;

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "proto/tenant/corecard/v1";

//this proto file contains the drafted, proposed data definition that would be coming out of the I2C Authorization Processor application.
//It is being proposed to allow development to start on Core-Card, but it is fully recognized that when I2C auth processor performs implementation, some
//changes might be required. For the sake of trying to limit those changes, we're involving I2C lead in review, just in case.

//What we're expecting here is the incoming messages metadata, for financial transactions, that map to a TM PostingInstructionBatch (succesfully processed or not).

//Document https://drive.google.com/file/d/1yufQbe93NS9U2Q0Zp3MRU4zSMGrjAl18/view was used to get as close to raw representation as possible, as we don't want the data
//to be processed (any processing will happen after this data is persisted in core-card)

message TransactionMetadataReceivedEvent {

    // UUID, generated internally, that represents a unique request/response pair for I2C.
    string authorization_transaction_id = 1[(validate.rules).string.uuid = true];

    // This is the UUID used across all domains to uniquely represent the transaction. This is taken from Thought Machine Vault's PostingInstructionBatch ID 
    string transaction_id = 2[(validate.rules).string.uuid = true];

    //Raw, unprocessed binary data for the I2C message
    bytes raw = 3;

    // String representation of the originating message type (e.g. "0100", "0400", ... )
    string mti = 4;

    // Hexadecimal encoded value, as a string for primary bit map. 
    string primary_bitmap = 5;

    // Hexadecimal encoded value, as a string for primary bit map. 
    string secondary_bitmap = 6;

    // Map of all data elements received in original message, not filtered.
    // The key would be in the following format: "DE-025", "DE-003", ...
    // The value would be encoded as a string, with following guidelines:
    //   It will be the parsing's code ( core-card ) that will be responsible to know the format of each data element and consume it accordingly, as needed.
    //   n : series of digits, encoded as a string --> "1234" 
    //   an : Alpha numeric or digis --> "A123B" 
    //   ans : Alpha numeric and special chars --> "A123$"
    //   x  : single char indicator of Credit or Debit --> x + n 8 = "C12345678"
    //   LLVAR//LLLVAR: variable length chain of chars --> "POTATO is the BEST!"
    //   b : base64 encoded string for binary content.
    map<string,string> data_elements = 7;

    // Timestamp for the I2C message
    google.protobuf.Timestamp message_time = 8 [(validate.rules).timestamp.required = true];

    int32 tenant_id = 9[(validate.rules).int32 = {gte: 1, lte: 9999}];
}
