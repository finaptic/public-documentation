syntax = "proto3";
package thebaasco.tenant.persfinmngt.v1;

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "types/amount.proto";
import "types/balance.proto";
import "types/options.proto";

option go_package = "proto/tenant/persfinmngt/v1";

service Transactions {
  rpc GetTransactions(GetTransactionsRequest) returns (GetTransactionsResponse){
  }
}

enum Order {
  ORDER_UNSPECIFIED = 0;
  DESCENDING = 1;
  ASCENDING = 2;
}

message GetTransactionsRequest{
  string account_id = 1[(validate.rules).string.uuid = true];
  int32 page_size = 2[(validate.rules).int32 = {gte: 1}];
  string page_token = 3;
  Order sort_order = 4[(validate.rules).enum = {not_in: [0], defined_only: true}];
}

message GetTransactionsResponse {
  string previous_page_token = 1;
  repeated Transaction transactions = 2;
  string next_page_token = 3;
  Order sort_order = 4[(validate.rules).enum = {not_in: [0], defined_only: true}];
}

message Transaction{
  string transaction_id = 1[(validate.rules).string.uuid = true]; //Unique identifier that represents this single transaction (operation).

  string lifecycle_transaction_id = 2[(validate.rules).string.uuid = true]; //Unique identifier that represents the overarching transaction, across all phases of it's lifecycle (e.g. authorization, settlement, reversal, ...)
  //(there might be multiple unique "transaction_id" for a single "lifecycle_transaction_id")

  types.Amount amount = 3[(validate.rules).message.required = true]; // This  is the transaction amount //

  string transactor_name = 4; //The name and location of the vendor where the card payment was processed
  //The legal name of the source who initiated the transfer(debtors name) //

  thebaasco.types.Balance balance = 5[(validate.rules).message.required = true]; // The remaining avialable balance for that specified account//

  enum TransactionState {
    TRANSACTION_STATE_UNSPECIFIED = 0;
    POSTED = 1;
    PENDING =2;
    // For use only when available information is insufficient to determine state
    UNKNOWN =3;
  }

  TransactionState transaction_state = 6[(validate.rules).enum = {not_in: [0], defined_only: true}]; //This is defined in PFM to make it easier for the end user
  //for the kind of transaction type that has affected his authorised account

  enum TransactionType {
    TRANSACTION_TYPE_UNSPECIFIED = 0;
    AUTHORIZED = 1;
    DEBIT = 2;
    REFUND = 3;
    DECLINED = 4;
    CHARGEBACK = 5;
    CREDIT = 6;
    // For use only when available information is insufficient to determine type
    PRODUCT_NOT_DEFINED =7;
  }

  TransactionType transaction_type = 7[(validate.rules).enum = {not_in: [0], defined_only: true}]; // The transaction states will be a subset of the transaction type
  ///This would keep evolving when we define further states


  string account_id = 8[(validate.rules).string.uuid = true]; //The authorised account id of that user on which a debit or credit transaction has occured .
  //Can also be utilised to fetch the card reference number//

  string category = 9; //The localized description for the transaction's category (i.e. Groceries, Transport, ... based off the MCC ).

  google.protobuf.Timestamp transaction_time = 10; // The transaction time  when the card/ interac transfer took place //

  //Name of the domain that can be querried for additional details on this transaction ( e.g. core-card, core-transfer, ... )
  string source_domain = 11[(validate.rules).string.min_len = 1];
}

message TransactionCreatedEvent {
  option (thebaasco.types.topic) = "thebaasco.pers-fin-mngt.transaction-created-event";

  string event_id = 1; //This needs to be unique per transaction_id/customer_id pair, to ensure proper idempotency handling for consumers.
  string customer_id = 2[(validate.rules).string.uuid = true]; //cuid for the customer impacted by this transaction. If there are multiple customers associated with an account, then transactions on the account will generate multiple events.
  Transaction transaction = 3[(validate.rules).message.required = true];
  int32 tenant_id = 4[(validate.rules).int32 = {gte: 1, lte: 9999}];
  google.protobuf.Timestamp event_time = 5 [(validate.rules).timestamp.required = true];
}
