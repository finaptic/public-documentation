syntax = "proto3";
package thebaasco.tenant.corebanking.v1;

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "types/amount.proto";
import "types/options.proto";

option go_package = "proto/tenant/corebanking/v1";

//Indicate the status of the account. All accounts are created in the "INACTIVE" state.
enum AccountStatus {
  ACCOUNT_STATUS_UNSPECIFIED = 0;
  ACCOUNT_STATUS_INACTIVE = 1; //Initial state after creation. Once moved from INACTIVE to anything else, cannot come back.
  ACCOUNT_STATUS_ACTIVE = 2; //Normal operations can proceed.
}

service Accounts {
  rpc GetAccountDetails(GetAccountDetailsRequest) returns (AccountDetails) {}
};

//Asynchronous request to open an account.
message CreateAccountRequest {
  option (thebaasco.types.topic) = "thebaasco.core-banking.create-account-command";
  option (thebaasco.types.response_topic) = "thebaasco.core-banking.create-account-response";

  //Type of account to open, this is a string that is composed in conjunction between product bundling endine and requestor domain (e.g. "current_account.v39" )
  string account_type = 1[(validate.rules).string.min_len = 1];
  //Parameters for the type of account, this is composed in conjunction between product bundling engine, and requestor domain.
  map<string, string> account_parameters = 2;
}

message CreateAccountResponse {
  AccountDetails account_details = 1[(validate.rules).message.required = true];
}

message GetAccountDetailsRequest {
  string account_id = 1[(validate.rules).string.uuid = true];
}

message AccountDetails {
  //Output only
  string account_id = 1[(validate.rules).string.uuid = true];
  //Output only
  AccountStatus status = 2[(validate.rules).enum = {not_in: [0], defined_only: true}];
  //Output only
  string owner_client_id = 3[(validate.rules).string.uuid = true];
  //Output only
  repeated string authorized_client_ids = 4[(validate.rules).repeated.items.string.uuid = true];
  //Output only
  thebaasco.types.Amount accrued_interest = 5; //interest that was accumulated, but hasn't been applied to the balance yet
}

message AccountCreatedEvent {
  option (thebaasco.types.topic) = "thebaasco.core-banking.accounts.account-created";

  string event_id = 1[(validate.rules).string.uuid = true];
  AccountDetails account_details = 2[(validate.rules).message.required = true];
  int32 tenant_id = 3[(validate.rules).int32 = {gte: 1, lte: 9999}];
  google.protobuf.Timestamp account_creation_time = 4 [(validate.rules).timestamp.required = true];
}

//Asynchronous request to change the state of an account.
message ChangeAccountStatusRequest {
  option (thebaasco.types.topic) = "thebaasco.core-banking.change-account-status-command";
  option (thebaasco.types.response_topic) = "thebaasco.core-banking.change-account-status-response";

  string account_id = 1[(validate.rules).string.uuid = true];
  AccountStatus status = 2[(validate.rules).enum = {not_in: [0], defined_only: true}];
}

message ChangeAccountStatusResponse {
  AccountDetails account_details = 1[(validate.rules).message.required = true];
}

message AccountStatusChangedEvent {
  option (thebaasco.types.topic) = "thebaasco.core-banking.account-status-updated-event";

  string event_id = 1[(validate.rules).string.uuid = true];
  AccountDetails account_details = 2[(validate.rules).message.required = true];
  int32 tenant_id = 3[(validate.rules).int32 = {gte: 1, lte: 9999}]; //mask that ensure we can't use more than 56bits
  google.protobuf.Timestamp account_status_changed_time = 4 [(validate.rules).timestamp.required = true];
}