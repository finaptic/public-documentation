syntax = "proto3";
package thebaasco.tenant.coretransaction.v1;

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "types/amount.proto";
import "types/balance.proto";
import "types/options.proto";

option go_package = "proto/tenant/coretransaction/v1";

service Transactions {
    rpc ListTransactions(ListTransactionsRequest) returns (ListTransactionsResponse){}
}

message Transaction {
    /* Output only. ID of the transaction ( uuid v4 ). This is not a globally unique ID, but uniquely identify the operation
    *  that resulted in the change in account balance. In the case of transfer between accounts, there
    *  could be 2 transactions that have the same transaction id, but different account ids. 
    */
    string transaction_id = 1[(validate.rules).string.uuid = true];

    // This is the client_transaction_id in TM
    string lifecycle_transaction_id = 2[(validate.rules).string.uuid = true];

    /* Output only. ID of the Account ( uuid v4 ). This is a globally unique ID. 
    */
    string account_id = 3[(validate.rules).string.uuid = true]; // Aggregate Root ID

    //Output only.
    google.protobuf.Timestamp transaction_time = 4[(validate.rules).timestamp.required = true];

    //Output only.
    thebaasco.types.Amount amount = 5[(validate.rules).message.required = true];
    
    //Output only.
    thebaasco.types.Balance balance = 6[(validate.rules).message.required = true];
}

message ListTransactionsRequest{
    string account_id = 1[(validate.rules).string.uuid = true];
    google.protobuf.Timestamp from = 2;
    google.protobuf.Timestamp to = 3;
    int32 page_size = 4;
    string page_token = 5;
}

message ListTransactionsResponse{
    repeated Transaction transactions = 1;
    string next_page_token = 2;
}

message TransactionCreatedEvent {
    option (thebaasco.types.topic) = "thebaasco.core-transaction.transaction-created-event";
    /* This event ID is a repeatable, globally unique ID ( uuid v5 ) that can be used as idempotency key
    *  to determine if the event was already processed or not. This ID is created from the account
    *  and transaction ids to ensure repeatability and globaly uniqueness
    */
    string event_id = 1[(validate.rules).string.uuid = true];
    Transaction transaction = 2[(validate.rules).message.required = true];
    int32 tenant_id = 3[(validate.rules).int32 = {gte: 1, lte: 9999}];
    google.protobuf.Timestamp event_time = 4[(validate.rules).timestamp.required = true];
}
